{"version":3,"file":"static/js/8715.698f874e.chunk.js","mappings":"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","sources":["hooks/swap/useAddLiquidity.ts","components/swap/AddLiquiditySteps.tsx","views/swap-liquidity-v3/liquidity/AddLiquidity/index.tsx","../packages/hooks/src/swap/usePassCode.ts","../packages/hooks/src/swap/usePassCodeManager.ts"],"sourcesContent":["import { useCallback } from \"react\";\nimport { updateUserPositionPoolId, getPassCode, requestPassCode } from \"@w2e/hooks\";\nimport { Position, Token } from \"@w2e/swap-sdk\";\nimport { t } from \"@lingui/macro\";\nimport { getActorIdentity } from \"components/Identity\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { getLocaleMessage } from \"locales/services\";\nimport { useStepCalls, newStepKey, useCloseAllSteps } from \"hooks/useStepCall\";\nimport { getAddLiquidityStepDetails } from \"components/swap/AddLiquiditySteps\";\nimport { useStepContentManager } from \"store/steps/hooks\";\nimport { useSwapApprove, useSwapDeposit, useSwapTransfer } from \"hooks/swap/index\";\nimport { isUseTransfer, actualAmountToPool } from \"utils/token/index\";\nimport { createPool, mint as _mint } from \"hooks/swap/v3Calls\";\nimport { useSuccessTip, useErrorTip } from \"hooks/useTips\";\nimport { useUpdateUserPositionPools } from \"store/hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { ExternalTipArgs, OpenExternalTip } from \"types/index\";\nimport type { PCMMetadata } from \"@w2e/types\";\nimport { PassCodeManagerId } from \"constants/canister\";\nimport { Principal } from \"@dfinity/principal\";\n\nlet SwapPoolId: undefined | string;\n\ninterface AddLiquidityCallsArgs {\n  noLiquidity: boolean;\n  position: Position;\n  openExternalTip: OpenExternalTip;\n  stepKey: string;\n  pcmMetadata: PCMMetadata;\n  pcmToken: Token;\n  hasPassCode: boolean;\n  needPayForPCM: boolean;\n}\n\nfunction useAddLiquidityCalls() {\n  const principal = useAccountPrincipal();\n  const [openSuccessTip] = useSuccessTip();\n  const [openErrorTip] = useErrorTip();\n\n  const approve = useSwapApprove();\n  const deposit = useSwapDeposit();\n  const transfer = useSwapTransfer();\n\n  const updateStoreUserPositionPool = useUpdateUserPositionPools();\n\n  return useCallback(\n    ({\n      noLiquidity,\n      position,\n      pcmMetadata,\n      pcmToken,\n      hasPassCode,\n      openExternalTip,\n      stepKey,\n      needPayForPCM,\n    }: AddLiquidityCallsArgs) => {\n      const approveOrTransferPCMToken = async () => {\n        return isUseTransfer(pcmToken)\n          ? await transfer(\n              pcmToken,\n              (pcmMetadata.passcodePrice + BigInt(pcmToken.transFee)).toString(),\n              PassCodeManagerId,\n            )\n          : await approve(pcmToken, pcmMetadata.passcodePrice.toString(), PassCodeManagerId);\n      };\n\n      const depositPCMToken = async () => {\n        return await deposit(pcmToken, pcmMetadata.passcodePrice.toString(), PassCodeManagerId);\n      };\n\n      const requestPCMCode = async () => {\n        const { token0, token1, fee } = position.pool;\n\n        const { data, message } = await requestPassCode(\n          Principal.fromText(token0.address),\n          Principal.fromText(token1.address),\n          BigInt(fee),\n        );\n\n        if (data !== \"ok\") {\n          openErrorTip(message ?? t`Failed to request pcm code`);\n        }\n\n        return data === \"ok\";\n      };\n\n      const _createPool = async () => {\n        const identity = await getActorIdentity();\n\n        const { token0, token1, fee, sqrtRatioX96 } = position.pool;\n\n        const { status, message, data } = await createPool(\n          identity,\n          token0.address,\n          token1.address,\n          fee,\n          sqrtRatioX96.toString(),\n        );\n\n        if (status === \"err\" || !data) {\n          openErrorTip(message);\n          return false;\n        }\n\n        SwapPoolId = data?.canisterId.toString();\n\n        return true;\n      };\n\n      const getPoolId = () => {\n        return !noLiquidity ? position.pool.id : SwapPoolId ?? position.pool.id;\n      };\n\n      const approveToken0 = async () => {\n        if (!position || !principal) return false;\n        const poolId = getPoolId();\n\n        const amount0Desired = position.mintAmounts.amount0.toString();\n        if (amount0Desired !== \"0\") {\n          return await approve(position.pool.token0, amount0Desired, poolId);\n        }\n        return true;\n      };\n\n      const approveToken1 = async () => {\n        if (!position || !principal) return false;\n        const poolId = getPoolId();\n        const amount1Desired = position.mintAmounts.amount1.toString();\n        if (amount1Desired !== \"0\") {\n          return await approve(position.pool.token1, amount1Desired, poolId);\n        }\n        return true;\n      };\n\n      const transferToken0 = async () => {\n        if (!position || !principal) return false;\n        const poolId = getPoolId();\n\n        const amount0Desired = position.mintAmounts.amount0.toString();\n        if (amount0Desired !== \"0\") {\n          return await transfer(position.pool.token0, amount0Desired, poolId);\n        }\n        return true;\n      };\n\n      const transferToken1 = async () => {\n        if (!position || !principal) return false;\n        const poolId = getPoolId();\n\n        const amount1Desired = position.mintAmounts.amount1.toString();\n        if (amount1Desired !== \"0\") {\n          return await transfer(position.pool.token1, amount1Desired, poolId);\n        }\n        return true;\n      };\n\n      const depositToken0 = async () => {\n        if (!position || !principal) return false;\n\n        const poolId = getPoolId();\n        const amount0Desired = position.mintAmounts.amount0.toString();\n        if (amount0Desired === \"0\") return true;\n        return await deposit(position.pool.token0, amount0Desired, poolId, ({ message }: ExternalTipArgs) => {\n          openExternalTip({ message, tipKey: stepKey });\n        });\n      };\n\n      const depositToken1 = async () => {\n        if (!position || !principal) return false;\n\n        const poolId = getPoolId();\n        const amount1Desired = position.mintAmounts.amount1.toString();\n        if (amount1Desired === \"0\") return true;\n        return await deposit(position.pool.token1, amount1Desired, poolId, ({ message }: ExternalTipArgs) => {\n          openExternalTip({ message, tipKey: stepKey });\n        });\n      };\n\n      const mint = async () => {\n        if (!position || !principal) return false;\n\n        const poolId = getPoolId();\n        const identity = await getActorIdentity();\n        const { token0 } = position.pool;\n        const { token1 } = position.pool;\n        const amount0Desired = actualAmountToPool(token0, position.mintAmounts.amount0.toString());\n        const amount1Desired = actualAmountToPool(token1, position.mintAmounts.amount1.toString());\n\n        const { status, message } = await _mint(poolId, identity, {\n          token0: token0.address,\n          token1: token1.address,\n          fee: BigInt(position.pool.fee),\n          tickLower: BigInt(position.tickLower),\n          tickUpper: BigInt(position.tickUpper),\n          amount0Desired,\n          amount1Desired,\n        });\n\n        if (status === \"ok\") {\n          openSuccessTip(t`Add Liquidity Successfully`);\n\n          updateUserPositionPoolId(poolId, true);\n          updateStoreUserPositionPool([poolId]);\n\n          return true;\n        }\n        if (status === \"err\") {\n          openExternalTip({ message: getLocaleMessage(message), tipKey: stepKey });\n          return false;\n        }\n\n        return false;\n      };\n\n      return [\n        noLiquidity && !hasPassCode && needPayForPCM ? approveOrTransferPCMToken : undefined,\n        noLiquidity && !hasPassCode && needPayForPCM ? depositPCMToken : undefined,\n        noLiquidity && !hasPassCode ? requestPCMCode : undefined,\n        noLiquidity ? _createPool : undefined,\n        isUseTransfer(position?.pool.token0) ? transferToken0 : approveToken0,\n        depositToken0,\n        isUseTransfer(position?.pool.token1) ? transferToken1 : approveToken1,\n        depositToken1,\n        mint,\n      ].filter((fn) => fn !== undefined) as (() => Promise<boolean>)[];\n    },\n    [principal],\n  );\n}\n\ninterface InitialAddLiquidityStepsArgs {\n  position: Position;\n  noLiquidity: boolean;\n  retry: () => void;\n  pcmMetadata: PCMMetadata;\n  pcmToken: Token;\n  hasPassCode: boolean;\n  needPayForPCM: boolean;\n}\n\nfunction useInitialAddLiquiditySteps() {\n  const initialStepContent = useStepContentManager();\n  const history = useHistory();\n  const closeAllSteps = useCloseAllSteps();\n\n  const handleReclaim = () => {\n    history.push(\"/swap/reclaim\");\n    closeAllSteps();\n  };\n\n  const handleReclaimPCMBalance = () => {\n    history.push(\"/swap/pcm/reclaim\");\n    closeAllSteps();\n  };\n\n  return useCallback(\n    (\n      key: string,\n      { position, noLiquidity, retry, pcmMetadata, pcmToken, hasPassCode, needPayForPCM }: InitialAddLiquidityStepsArgs,\n    ) => {\n      const content = getAddLiquidityStepDetails({\n        position,\n        noLiquidity,\n        retry,\n        handleReclaim,\n        handleReclaimPCMBalance,\n        pcmMetadata,\n        pcmToken,\n        hasPassCode,\n        needPayForPCM,\n      });\n\n      initialStepContent(String(key), {\n        content,\n        title: t`Add Liquidity Details`,\n      });\n    },\n    [],\n  );\n}\n\nexport interface AddLiquidityCallProps {\n  position: Position;\n  noLiquidity: boolean;\n  openExternalTip: OpenExternalTip;\n  pcmMetadata: PCMMetadata;\n  pcmToken: Token;\n  principal: string;\n  needPayForPCM: boolean;\n}\n\nexport function useAddLiquidityCall() {\n  const getCalls = useAddLiquidityCalls();\n  const formatCall = useStepCalls();\n  const initialStepDetails = useInitialAddLiquiditySteps();\n\n  return useCallback(\n    async ({\n      position,\n      noLiquidity,\n      principal,\n      pcmMetadata,\n      pcmToken,\n      openExternalTip,\n      needPayForPCM,\n    }: AddLiquidityCallProps) => {\n      let hasPassCode = false;\n\n      if (noLiquidity) {\n        const passCode = await getPassCode(principal);\n\n        const { token0, token1, fee } = position.pool;\n        hasPassCode =\n          passCode.find(\n            (ele) =>\n              ele.token0.toString() === token0.address &&\n              ele.token1.toString() === token1.address &&\n              ele.fee === BigInt(fee),\n          ) !== undefined;\n      }\n\n      const key = newStepKey();\n      const calls = getCalls({\n        position,\n        pcmMetadata,\n        pcmToken,\n        hasPassCode,\n        openExternalTip,\n        noLiquidity,\n        stepKey: key,\n        needPayForPCM,\n      });\n      const { call, reset, retry } = formatCall(calls, key);\n\n      initialStepDetails(key, { needPayForPCM, position, noLiquidity, pcmMetadata, hasPassCode, pcmToken, retry });\n\n      return { call, reset, retry, key };\n    },\n    [getCalls, formatCall, initialStepDetails],\n  );\n}\n","import { Box, Avatar } from \"@mui/material\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { Position, Token } from \"@w2e/swap-sdk\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { TextButton } from \"components/index\";\nimport { toFormat } from \"utils/index\";\nimport { isUseTransfer, actualAmountToPool } from \"utils/token/index\";\nimport { StepDetails, StepContent } from \"components/Steps/types\";\nimport type { PCMMetadata } from \"@w2e/types\";\nimport { PassCodeManagerId } from \"constants/canister\";\n\nexport interface GetAddLiquidityStepDetails {\n  noLiquidity: boolean;\n  position: Position | undefined;\n  retry: () => void;\n  handleReclaim: () => void;\n  handleReclaimPCMBalance: () => void;\n  pcmMetadata: PCMMetadata;\n  pcmToken: Token;\n  hasPassCode: boolean;\n  needPayForPCM: boolean;\n}\n\nexport function getAddLiquidityStepDetails({\n  position,\n  noLiquidity,\n  retry,\n  handleReclaim,\n  handleReclaimPCMBalance,\n  pcmMetadata,\n  pcmToken,\n  hasPassCode,\n  needPayForPCM,\n}: GetAddLiquidityStepDetails) {\n  if (!position) return [];\n\n  const { token0 } = position.pool;\n  const { token1 } = position.pool;\n\n  const symbol0 = position.pool.token0.symbol;\n  const symbol1 = position.pool.token1.symbol;\n\n  const amount0 = toFormat(\n    parseTokenAmount(actualAmountToPool(token0, position.mintAmounts.amount0.toString()), token0.decimals).toString(),\n  );\n  const amount1 = toFormat(\n    parseTokenAmount(actualAmountToPool(token1, position.mintAmounts.amount1.toString()), token1.decimals).toString(),\n  );\n\n  const amount0Value = (\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n      <Avatar sx={{ width: \"16px\", height: \"16px\", margin: \"0 4px 0 0\" }} src={position.pool.token0.logo}>\n        &nbsp;\n      </Avatar>\n      {amount0}\n    </Box>\n  );\n\n  const amount1Value = (\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n      <Avatar sx={{ width: \"16px\", height: \"16px\", margin: \"0 4px 0 0\" }} src={position.pool.token1.logo}>\n        &nbsp;\n      </Avatar>\n      {amount1}\n    </Box>\n  );\n\n  const originSteps: StepContent[] = [\n    {\n      title: isUseTransfer(token0) ? `Transfer ${symbol0}` : `Approve ${symbol0}`,\n      children: [\n        { label: t`Amount`, value: amount0Value },\n        { label: t`Canister Id`, value: token0.address },\n      ],\n    },\n    {\n      title: t`Deposit ${symbol0}`,\n      children: [\n        {\n          label: t`Amount`,\n          value: amount0Value,\n        },\n        { label: t`Canister Id`, value: token0.address },\n      ],\n      errorActions: [\n        <>\n          <TextButton onClick={handleReclaim}>\n            <Trans>Reclaim</Trans>\n          </TextButton>\n        </>,\n      ],\n      errorMessage: t`Please click Reclaim your tokens if they've transferred to the swap pool.`,\n    },\n    {\n      title: isUseTransfer(token1) ? `Transfer ${symbol1}` : `Approve ${symbol1}`,\n      children: [\n        { label: t`Amount`, value: amount1Value },\n        { label: t`Canister Id`, value: token1.address },\n      ],\n    },\n    {\n      title: `Deposit ${symbol1}`,\n      children: [\n        {\n          label: t`Amount`,\n          value: amount1Value,\n        },\n        { label: t`Canister Id`, value: token1.address },\n      ],\n      errorActions: [\n        <>\n          <TextButton onClick={handleReclaim}>\n            <Trans>Reclaim</Trans>\n          </TextButton>\n        </>,\n      ],\n      errorMessage: t`Please click Reclaim your tokens if they've transferred to the swap pool.`,\n    },\n    {\n      title: `Add liquidity ${token0.symbol} and ${token1.symbol}`,\n      children: [\n        { label: symbol0, value: amount0Value },\n        { label: symbol1, value: amount1Value },\n      ],\n      errorActions: [\n        <TextButton onClick={handleReclaim}>\n          <Trans>Reclaim</Trans>\n        </TextButton>,\n        <TextButton onClick={retry}>\n          <Trans>Retry</Trans>\n        </TextButton>,\n      ],\n      errorMessage: t`Please click Reclaim your tokens if they've transferred to the swap pool.`,\n    },\n  ];\n\n  if (noLiquidity) {\n    const pcmAmount = parseTokenAmount(pcmMetadata.passcodePrice, pcmToken.decimals);\n\n    originSteps.unshift({\n      title: `Create pool ${token0.symbol} and ${token1.symbol}`,\n    });\n\n    if (!hasPassCode) {\n      originSteps.unshift({\n        title: `Confirm payment and request permission`,\n      });\n\n      if (needPayForPCM) {\n        originSteps.unshift({\n          title: `Deposit ${pcmAmount.toFormat()} ${pcmToken.symbol} for creating swap pool fee`,\n          children: [\n            { label: t`Recipient canister ID`, value: PassCodeManagerId },\n            { label: t`Deposit amount`, value: `${pcmAmount.toFormat()} ${pcmToken.symbol}` },\n          ],\n        });\n\n        originSteps.unshift({\n          title: isUseTransfer(pcmToken)\n            ? `Transfer ${pcmToken.symbol} for creating swap pool fee`\n            : `Approve ${pcmToken.symbol} for creating swap pool fee`,\n          children: [\n            { label: t`Recipient canister ID`, value: PassCodeManagerId },\n            { label: t`Amount`, value: `${pcmAmount.toFormat()} ${pcmToken.symbol}` },\n          ],\n          errorActions: [\n            <>\n              <TextButton onClick={handleReclaimPCMBalance}>\n                <Trans>Reclaim</Trans>\n              </TextButton>\n            </>,\n          ],\n          errorMessage: t`Please click Reclaim your tokens if they've transferred to the swap pool.`,\n        });\n      }\n    }\n  }\n\n  return originSteps\n    .filter((step) => step !== undefined)\n    .map((step, index) => ({ ...step, step: index }) as StepDetails);\n}\n","/* eslint-disable prefer-const */\nimport { useState, useCallback, useMemo, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Box, Grid, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport BackIcon from \"assets/images/swap/back\";\nimport FeeSelector from \"components/swap/SwapFeeSelector\";\nimport CurrencySelector from \"components/CurrencySelector\";\nimport DepositAmount from \"components/swap/SwapDepositAmount\";\nimport SwapWrapper from \"components/swap/SwapUIWrapper\";\nimport {\n  useMintState,\n  useMintHandlers,\n  useMintInfo,\n  useRangeCallbacks,\n  useResetMintState,\n} from \"store/swap/liquidity/hooks\";\nimport { useSlippageManager } from \"store/swap/cache/hooks\";\nimport { UseCurrencyState, useToken } from \"hooks/useCurrency\";\nimport { Bound, DEFAULT_FEE, DEFAULT_SWAP_INPUT_ID, FIELD } from \"constants/swap\";\nimport ConfirmAddLiquidity from \"components/swap/AddLiquidityConfirmModal\";\nimport { useAccount } from \"store/global/hooks\";\nimport { useErrorTip, useLoadingTip } from \"hooks/useTips\";\nimport BigNumber from \"bignumber.js\";\nimport { isDarkTheme } from \"utils/index\";\nimport { maxAmountFormat } from \"utils/swap\";\nimport { Trans, t } from \"@lingui/macro\";\nimport Identity, { CallbackProps, SubmitLoadingProps } from \"components/Identity\";\nimport { Identity as TypeIdentity } from \"types/global\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { Theme } from \"@mui/material/styles\";\nimport { TokenInfo } from \"types/token\";\nimport { useAddLiquidityCall } from \"hooks/swap/useAddLiquidity\";\nimport StepViewButton from \"components/Steps/View\";\nimport AddLiquidityButton from \"components/swap/AddLiquidityButton\";\nimport { ExternalTipArgs } from \"types/index\";\nimport { ReclaimTips } from \"components/ReclaimTips\";\nimport { usePCMMetadata, useUserPCMBalance } from \"@w2e/hooks\";\nimport SetPriceRange from \"./SetPriceRange\";\n\nconst DISABLED_STYLE = {\n  opacity: 0.2,\n  pointerEvents: \"none\",\n};\n\nconst useStyle = makeStyles((theme: Theme) => {\n  return {\n    container: {\n      width: \"920px\",\n      backgroundColor: isDarkTheme(theme) ? theme.palette.background.level1 : theme.colors.lightGray50,\n      borderRadius: theme.radius,\n      padding: \"24px\",\n      \"@media(max-width: 960px)\": {\n        width: \"460px\",\n        padding: \"12px\",\n      },\n    },\n    topHeader: {\n      paddingBottom: \"12px\",\n      borderBottom: isDarkTheme(theme) ? \"1px solid #212946\" : `1px solid ${theme.colors.lightGray200BorderColor}`,\n    },\n    outerBox: {\n      paddingTop: \"24px\",\n      display: \"grid\",\n      gap: \"24px 48px\",\n      gridTemplateRows: \"max-content\",\n      gridTemplateColumns: \"1fr 1fr\",\n      gridAutoFlow: \"row\",\n      \"@media(max-width: 960px)\": {\n        gridTemplateColumns: \"1fr\",\n      },\n    },\n    priceRange: {\n      gridArea: \"1 / 2 / 3 / auto\",\n      height: \"fit-content\",\n      \"@media(max-width: 960px)\": {\n        gridArea: \"2 / 1 / 3 / auto\",\n      },\n    },\n  };\n});\n\ninterface URLParams {\n  currencyIdA: string;\n  currencyIdB: string;\n  feeAmount: string;\n}\n\nexport default function AddLiquidity() {\n  const classes = useStyle();\n  const history = useHistory();\n  const principal = useAccountPrincipal();\n\n  let { currencyIdA, currencyIdB, feeAmount: feeAmountFromUrl } = useParams<URLParams>();\n\n  if (!currencyIdA) currencyIdA = DEFAULT_SWAP_INPUT_ID;\n\n  const [confirmModalShow, setConfirmModalShow] = useState(false);\n\n  const [slippageTolerance] = useSlippageManager(\"mint\");\n\n  const feeAmount = feeAmountFromUrl ? Number(feeAmountFromUrl) : DEFAULT_FEE;\n\n  const [useCurrencyALoading, baseCurrency] = useToken(currencyIdA);\n  const [useCurrencyBLoading, currencyB] = useToken(currencyIdB);\n  const quoteCurrency = baseCurrency && currencyB && baseCurrency.equals(currencyB) ? undefined : currencyB;\n\n  const { independentField, typedValue, startPrice } = useMintState();\n\n  const {\n    ticks,\n    pricesAtTicks,\n    invalidRange,\n    dependentField,\n    parsedAmounts,\n    depositADisabled,\n    depositBDisabled,\n    ticksAtLimit,\n    errorMessage,\n    position,\n    invertPrice,\n    price,\n    pool,\n    noLiquidity,\n    currencyBalances,\n    atMaxAmounts,\n    maxAmounts,\n    poolLoading,\n  } = useMintInfo(baseCurrency ?? undefined, quoteCurrency ?? undefined, feeAmount, baseCurrency ?? undefined);\n\n  const isValid = !errorMessage && !invalidRange;\n\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks;\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks;\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: parsedAmounts[dependentField]?.toExact() ?? \"\",\n  };\n\n  const { onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput, onStartPriceInput } = useMintHandlers();\n\n  const resetMintState = useResetMintState();\n\n  const handleBackToPosition = useCallback(() => {\n    resetMintState();\n    history.push(\"/swap/liquidity\");\n  }, [history, resetMintState]);\n\n  const onTokenAChange = (token: TokenInfo) => {\n    const tokenId = token.canisterId.toString();\n\n    if (tokenId === currencyIdB || !currencyIdB) {\n      history.push(`/swap/liquidity/add/${tokenId}`);\n    } else {\n      history.push(`/swap/liquidity/add/${tokenId}/${currencyIdB}`);\n    }\n  };\n\n  const onTokenBChange = (token: TokenInfo) => {\n    const tokenId = token.canisterId.toString();\n\n    if (tokenId === currencyIdA || !currencyIdA) {\n      history.push(`/swap/liquidity/add/${tokenId}`);\n    } else {\n      history.push(`/swap/liquidity/add/${currencyIdA}/${tokenId}`);\n    }\n  };\n\n  const handleFeeChange = useCallback(\n    (feeValue) => {\n      if (currencyIdA && currencyIdB) {\n        history.push(`/swap/liquidity/add/${currencyIdA}/${currencyIdB}/${feeValue}`);\n      }\n    },\n    [currencyIdA, currencyIdB],\n  );\n\n  const clearAll = useCallback(() => {\n    onFieldAInput(\"\");\n    onFieldBInput(\"\");\n    onLeftRangeInput(\"\");\n    onRightRangeInput(\"\");\n    history.push(`/swap/liquidity/add`);\n  }, [history, onFieldAInput, onFieldBInput, onLeftRangeInput, onRightRangeInput]);\n\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper, getSetFullRange } =\n    useRangeCallbacks(baseCurrency ?? undefined, quoteCurrency ?? undefined, feeAmount, tickLower, tickUpper, pool);\n\n  const isValidPair = currencyIdA && currencyIdB && currencyIdA !== currencyIdB;\n\n  const handleOnAdd = useCallback(() => {\n    setConfirmModalShow(true);\n  }, []);\n\n  const account = useAccount();\n\n  const [openLoadingTip, closeLoadingTip] = useLoadingTip();\n  const [openErrorTip] = useErrorTip();\n\n  const { result: pcmMetadata } = usePCMMetadata();\n  const { result: userPCMBalance } = useUserPCMBalance(principal);\n\n  const [, pcmToken] = useToken(pcmMetadata?.tokenCid.toString());\n  const getAddLiquidityCall = useAddLiquidityCall();\n\n  const handleOnConfirm = useCallback(\n    async (identity: TypeIdentity, { loading }: SubmitLoadingProps) => {\n      if (\n        !identity ||\n        loading ||\n        !position ||\n        !principal ||\n        !pcmMetadata ||\n        !pcmToken ||\n        userPCMBalance === undefined ||\n        userPCMBalance === null\n      )\n        return;\n\n      const needPayForPCM = userPCMBalance < pcmMetadata.passcodePrice;\n\n      const { call, key } = await getAddLiquidityCall({\n        noLiquidity,\n        position,\n        pcmMetadata,\n        needPayForPCM,\n        pcmToken,\n        principal: principal.toString(),\n        openExternalTip: ({ message, tipKey }: ExternalTipArgs) => {\n          openErrorTip(<ReclaimTips message={message} tipKey={tipKey} />);\n        },\n      });\n\n      const loadingTipKey = openLoadingTip(t`Add ${baseCurrency?.symbol}/${quoteCurrency?.symbol} liquidity`, {\n        extraContent: <StepViewButton step={key} />,\n      });\n\n      setConfirmModalShow(false);\n\n      const result = await call();\n\n      if (!result) {\n        closeLoadingTip(loadingTipKey);\n        return;\n      }\n\n      closeLoadingTip(loadingTipKey);\n\n      handleBackToPosition();\n    },\n    [position, slippageTolerance, account, noLiquidity],\n  );\n\n  const handleOnCancel = useCallback(() => {\n    setConfirmModalShow(false);\n  }, []);\n\n  const isDepositAmountDisabled = useMemo(\n    () =>\n      invalidRange || tickLower === undefined || tickUpper === undefined || (noLiquidity && !startPrice) || poolLoading,\n    [invalidRange, tickLower, tickUpper, startPrice, noLiquidity, poolLoading],\n  );\n\n  const handleTokenToggle = () => {\n    if (!ticksAtLimit[Bound.LOWER] && !ticksAtLimit[Bound.UPPER]) {\n      onLeftRangeInput((invertPrice ? priceLower : priceUpper?.invert())?.toSignificant(6) ?? \"\");\n      onRightRangeInput((invertPrice ? priceUpper : priceLower?.invert())?.toSignificant(6) ?? \"\");\n      onFieldAInput(formattedAmounts[FIELD.CURRENCY_B] ?? \"\");\n    }\n\n    history.push(`/swap/liquidity/add/${currencyIdB}/${currencyIdA}${feeAmount ? `/${feeAmount}` : \"\"}`);\n  };\n\n  const handleCurrencyAMax = () => {\n    const currencyAAmount = maxAmounts[FIELD.CURRENCY_A];\n\n    if (!baseCurrency || !currencyAAmount) return;\n\n    onFieldAInput(maxAmountFormat(currencyAAmount.toExact(), currencyAAmount.currency.decimals));\n  };\n\n  const handleCurrencyBMax = () => {\n    const currencyBAmount = maxAmounts[FIELD.CURRENCY_B];\n\n    if (!currencyB || !currencyBAmount) return;\n\n    onFieldBInput(maxAmountFormat(currencyBAmount.toExact(), currencyBAmount.currency.decimals));\n  };\n\n  useEffect(() => {\n    return () => {\n      resetMintState();\n    };\n  }, []);\n\n  return (\n    <Identity onSubmit={handleOnConfirm}>\n      {({ submit, loading }: CallbackProps) => (\n        <>\n          <SwapWrapper>\n            <Grid container justifyContent=\"center\">\n              <Grid item className={classes.container}>\n                <Grid container className={classes.topHeader}>\n                  <Grid item xs={3} container alignItems=\"center\">\n                    <BackIcon\n                      sx={{\n                        cursor: \"pointer\",\n                      }}\n                      onClick={handleBackToPosition}\n                    />\n                  </Grid>\n                  <Grid item xs={6} container justifyContent=\"center\" alignItems=\"center\">\n                    <Typography variant=\"h3\" color=\"textPrimary\" align=\"center\">\n                      <Trans>Add Liquidity</Trans>\n                    </Typography>\n                  </Grid>\n                  <Grid item container alignItems=\"center\" xs={3} sx={{ position: \"relative\" }}>\n                    <Grid item xs>\n                      <Grid container justifyContent=\"flex-end\">\n                        <Typography sx={{ cursor: \"pointer\" }} color=\"secondary\" component=\"span\" onClick={clearAll}>\n                          <Trans>clear all</Trans>\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Box className={classes.outerBox}>\n                  <Box>\n                    <Typography variant=\"h4\" color=\"textPrimary\">\n                      <Trans>Select Pair</Trans>\n                    </Typography>\n                    <Grid container mt={2} spacing=\"12px\">\n                      <Grid item xs={6}>\n                        <CurrencySelector\n                          currencyId={currencyIdA}\n                          onChange={onTokenAChange}\n                          loading={useCurrencyALoading === UseCurrencyState.LOADING}\n                          disabledCurrency={[...(baseCurrency ? [baseCurrency] : [])]}\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <CurrencySelector\n                          currencyId={currencyIdB}\n                          onChange={onTokenBChange}\n                          loading={useCurrencyBLoading === UseCurrencyState.LOADING}\n                          disabledCurrency={[...(quoteCurrency ? [quoteCurrency] : [])]}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Box mt={2} sx={!isValidPair ? DISABLED_STYLE : {}}>\n                      <FeeSelector\n                        defaultActiveFee={feeAmount}\n                        onSelect={handleFeeChange}\n                        currencyA={baseCurrency}\n                        currencyB={quoteCurrency}\n                      />\n                    </Box>\n                  </Box>\n                  <Box sx={isDepositAmountDisabled ? DISABLED_STYLE : {}}>\n                    <Typography variant=\"h4\" color=\"textPrimary\">\n                      <Trans>Deposit Amounts</Trans>\n                    </Typography>\n                    <Box mt={2}>\n                      <Box>\n                        <DepositAmount\n                          currency={baseCurrency}\n                          value={formattedAmounts[FIELD.CURRENCY_A]}\n                          onUserInput={onFieldAInput}\n                          locked={depositADisabled}\n                          currencyBalance={currencyBalances?.[FIELD.CURRENCY_A]}\n                          showMaxButton={\n                            !atMaxAmounts[FIELD.CURRENCY_A] &&\n                            new BigNumber(maxAmounts[FIELD.CURRENCY_A]?.toExact() ?? 0).isGreaterThan(0)\n                          }\n                          onMax={handleCurrencyAMax}\n                        />\n                      </Box>\n                      <Box mt={2}>\n                        <DepositAmount\n                          currency={quoteCurrency}\n                          value={formattedAmounts[FIELD.CURRENCY_B]}\n                          onUserInput={onFieldBInput}\n                          locked={depositBDisabled}\n                          currencyBalance={currencyBalances?.[FIELD.CURRENCY_B]}\n                          showMaxButton={\n                            !atMaxAmounts[FIELD.CURRENCY_B] &&\n                            new BigNumber(maxAmounts[FIELD.CURRENCY_B]?.toExact() ?? 0).isGreaterThan(0)\n                          }\n                          onMax={handleCurrencyBMax}\n                        />\n                      </Box>\n                    </Box>\n                    <Box\n                      mt={2}\n                      sx={{\n                        \"@media(max-width: 959px)\": {\n                          display: \"block\",\n                        },\n                        \"@media(min-width: 960px)\": {\n                          display: \"none\",\n                        },\n                      }}\n                    >\n                      <AddLiquidityButton size=\"large\" disabled={!isValid} error={errorMessage} onClick={handleOnAdd} />\n                    </Box>\n                  </Box>\n                  <Box className={classes.priceRange} sx={!isValidPair ? DISABLED_STYLE : {}}>\n                    <SetPriceRange\n                      poolLoading={poolLoading}\n                      startPrice={startPrice}\n                      noLiquidity={noLiquidity}\n                      onStartPriceInput={onStartPriceInput}\n                      onLeftRangeInput={onLeftRangeInput}\n                      onRightRangeInput={onRightRangeInput}\n                      getDecrementLower={getDecrementLower}\n                      getIncrementLower={getIncrementLower}\n                      getDecrementUpper={getDecrementUpper}\n                      getIncrementUpper={getIncrementUpper}\n                      getSetFullRange={getSetFullRange}\n                      handleTokenToggle={handleTokenToggle}\n                      baseCurrency={baseCurrency}\n                      quoteCurrency={quoteCurrency}\n                      ticksAtLimit={ticksAtLimit}\n                      feeAmount={feeAmount}\n                      priceLower={priceLower}\n                      priceUpper={priceUpper}\n                      price={price ? parseFloat((invertPrice ? price.invert() : price).toSignificant(8)) : undefined}\n                    />\n                    <Box\n                      mt={2}\n                      sx={{\n                        \"@media(max-width:960px)\": {\n                          display: \"none\",\n                        },\n                      }}\n                    >\n                      <AddLiquidityButton\n                        size=\"large\"\n                        disabled={!isValid || loading}\n                        error={errorMessage}\n                        onClick={handleOnAdd}\n                      />\n                    </Box>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </SwapWrapper>\n\n          {confirmModalShow && !!position && (\n            <ConfirmAddLiquidity\n              onConfirm={submit}\n              onCancel={handleOnCancel}\n              open={confirmModalShow}\n              position={position}\n            />\n          )}\n        </>\n      )}\n    </Identity>\n  );\n}\n","import { useCallback } from \"react\";\nimport { useCallsData } from \"../useCallData\";\nimport { swapFactory } from \"@w2e/actor\";\nimport { resultFormat } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport type { PassCode } from \"@w2e/candid\";\n\nexport async function getPassCode(principal: string) {\n  return resultFormat<PassCode[]>(await (await swapFactory()).getPasscodesByPrincipal(Principal.fromText(principal)))\n    .data;\n}\n\nexport function usePassCode(principal: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!principal) return undefined;\n      return getPassCode(principal);\n    }, [principal]),\n    reload,\n  );\n}\n","import { useCallback } from \"react\";\nimport { passCodeManager } from \"@w2e/actor\";\nimport { resultFormat } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { useCallsData } from \"../useCallData\";\n\nexport function usePCMMetadata() {\n  return useCallsData(\n    useCallback(async () => {\n      return resultFormat<{\n        passcodePrice: bigint;\n        tokenCid: Principal;\n        factoryCid: Principal;\n      }>(await (await passCodeManager()).metadata()).data;\n    }, []),\n  );\n}\n\nexport async function requestPassCode(token0: Principal, token1: Principal, fee: bigint) {\n  const result = await (await passCodeManager(true)).requestPasscode(token0, token1, fee);\n\n  return resultFormat<string>(result);\n}\n\nexport async function withdrawPCMBalance(amount: bigint, fee: bigint) {\n  const result = await (await passCodeManager(true)).withdraw({ fee, amount });\n  return resultFormat<bigint>(result);\n}\n\nexport async function destroyPassCode(token0: string, token1: string, fee: bigint) {\n  const result = await (\n    await passCodeManager(true)\n  ).destoryPasscode(Principal.fromText(token0), Principal.fromText(token1), fee);\n\n  return resultFormat<string>(result);\n}\n\nexport function useUserPCMBalance(principal: Principal | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!principal) return undefined;\n\n      return resultFormat<bigint>(await (await passCodeManager()).balanceOf(principal)).data;\n    }, [principal]),\n    reload,\n  );\n}\n"],"names":["SwapPoolId","useInitialAddLiquiditySteps","initialStepContent","useStepContentManager","history","useHistory","closeAllSteps","useCloseAllSteps","handleReclaim","push","handleReclaimPCMBalance","useCallback","key","_ref4","position","noLiquidity","retry","pcmMetadata","pcmToken","hasPassCode","needPayForPCM","content","_ref","token0","pool","token1","symbol0","symbol","symbol1","amount0","toFormat","parseTokenAmount","actualAmountToPool","mintAmounts","toString","decimals","amount1","amount0Value","_jsxs","Box","sx","display","alignItems","children","_jsx","Avatar","width","height","margin","src","logo","amount1Value","originSteps","title","isUseTransfer","concat","label","i18n","_","id","value","address","values","errorActions","_Fragment","TextButton","onClick","Trans","errorMessage","pcmAmount","passcodePrice","unshift","PassCodeManagerId","filter","step","undefined","map","index","getAddLiquidityStepDetails","String","useAddLiquidityCall","getCalls","principal","useAccountPrincipal","openSuccessTip","useSuccessTip","openErrorTip","useErrorTip","approve","useSwapApprove","deposit","useSwapDeposit","transfer","useSwapTransfer","updateStoreUserPositionPool","useUpdateUserPositionPools","openExternalTip","stepKey","getPoolId","_SwapPoolId","async","BigInt","transFee","fee","data","message","requestPassCode","Principal","fromText","identity","getActorIdentity","sqrtRatioX96","status","createPool","canisterId","poolId","amount0Desired","_ref2","tipKey","amount1Desired","_ref3","_mint","tickLower","tickUpper","updateUserPositionPoolId","getLocaleMessage","fn","useAddLiquidityCalls","formatCall","useStepCalls","initialStepDetails","_ref5","passCode","getPassCode","find","ele","newStepKey","calls","call","reset","DISABLED_STYLE","opacity","pointerEvents","useStyle","makeStyles","theme","container","backgroundColor","isDarkTheme","palette","background","level1","colors","lightGray50","borderRadius","radius","padding","topHeader","paddingBottom","borderBottom","lightGray200BorderColor","outerBox","paddingTop","gap","gridTemplateRows","gridTemplateColumns","gridAutoFlow","priceRange","gridArea","AddLiquidity","_parsedAmounts$depend","_parsedAmounts$depend2","classes","currencyIdA","currencyIdB","feeAmount","feeAmountFromUrl","useParams","DEFAULT_SWAP_INPUT_ID","confirmModalShow","setConfirmModalShow","useState","slippageTolerance","useSlippageManager","Number","DEFAULT_FEE","useCurrencyALoading","baseCurrency","useToken","useCurrencyBLoading","currencyB","quoteCurrency","equals","independentField","typedValue","startPrice","useMintState","ticks","pricesAtTicks","invalidRange","dependentField","parsedAmounts","depositADisabled","depositBDisabled","ticksAtLimit","invertPrice","price","currencyBalances","atMaxAmounts","maxAmounts","poolLoading","useMintInfo","isValid","Bound","LOWER","UPPER","priceLower","priceUpper","formattedAmounts","toExact","onFieldAInput","onFieldBInput","onLeftRangeInput","onRightRangeInput","onStartPriceInput","useMintHandlers","resetMintState","useResetMintState","handleBackToPosition","onTokenAChange","token","tokenId","onTokenBChange","handleFeeChange","feeValue","clearAll","getDecrementLower","getIncrementLower","getDecrementUpper","getIncrementUpper","getSetFullRange","useRangeCallbacks","isValidPair","handleOnAdd","account","useAccount","openLoadingTip","closeLoadingTip","useLoadingTip","result","usePCMMetadata","userPCMBalance","useUserPCMBalance","tokenCid","getAddLiquidityCall","handleOnConfirm","loading","ReclaimTips","loadingTipKey","0","1","extraContent","StepViewButton","handleOnCancel","isDepositAmountDisabled","useMemo","handleTokenToggle","_toSignificant","_toSignificant2","_formattedAmounts$FIE","invert","toSignificant","FIELD","CURRENCY_B","handleCurrencyAMax","currencyAAmount","CURRENCY_A","maxAmountFormat","currency","handleCurrencyBMax","currencyBAmount","useEffect","Identity","onSubmit","_maxAmounts$FIELD$CUR","_maxAmounts$FIELD$CUR2","_maxAmounts$FIELD$CUR3","_maxAmounts$FIELD$CUR4","submit","SwapWrapper","Grid","justifyContent","item","className","xs","BackIcon","cursor","Typography","variant","color","align","component","mt","spacing","CurrencySelector","currencyId","onChange","UseCurrencyState","LOADING","disabledCurrency","FeeSelector","defaultActiveFee","onSelect","currencyA","DepositAmount","onUserInput","locked","currencyBalance","showMaxButton","BigNumber","isGreaterThan","onMax","AddLiquidityButton","size","disabled","error","SetPriceRange","parseFloat","ConfirmAddLiquidity","onConfirm","onCancel","open","fulfilled","generator","next","e","reject","rejected","throw","done","resolve","then","apply","thisArg","_arguments","__awaiter","resultFormat","swapFactory","getPasscodesByPrincipal","usePassCode","reload","useCallsData","passCodeManager","metadata","requestPasscode","withdrawPCMBalance","amount","withdraw","destroyPassCode","destoryPasscode","balanceOf"],"sourceRoot":""}