{"version":3,"file":"static/js/9114.9e8b125b.chunk.js","mappings":"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","sources":["views/staking-farm/create.tsx","../packages/hooks/src/staking-farm/index.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Typography, TextFieldProps, Grid, Box } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { FilledTextField, Wrapper, MainCard, NumberFilledTextField } from \"components/index\";\nimport { useTips } from \"hooks/useTips\";\nimport { t } from \"@lingui/macro\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { Theme } from \"@mui/material/styles\";\nimport { numberToString, formatTokenAmount } from \"@w2e/utils\";\nimport Button from \"components/authentication/ButtonConnector\";\nimport { createV3Farm, useSwapPoolMetadata } from \"@w2e/hooks\";\nimport { TOKEN_STANDARD } from \"@w2e/types\";\nimport { type ActorIdentity, ResultStatus } from \"@w2e/types\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DateTimePicker } from \"@mui/x-date-pickers/DateTimePicker\";\nimport { timeParser } from \"utils/index\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { useUpdateTokenStandard } from \"store/token/cache/hooks\";\nimport { getSwapTokenArgs } from \"hooks/token/index\";\nimport dayjs from \"dayjs\";\nimport { FarmControllerId } from \"constants/canister\";\nimport { standardCheck } from \"utils/token/standardCheck\";\n\nexport const TokenStandards = [\n  { label: \"EXT\", value: TOKEN_STANDARD.EXT },\n  { label: \"DIP20\", value: TOKEN_STANDARD.DIP20 },\n  { label: \"ICRC1\", value: TOKEN_STANDARD.ICRC1 },\n  { label: \"ICRC2\", value: TOKEN_STANDARD.ICRC2 },\n  { label: \"ICP\", value: TOKEN_STANDARD.ICP },\n];\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return {\n    breadcrumbs: {\n      padding: \"0 0 25px 16px\",\n      \"& a\": {\n        textDecoration: \"none\",\n        \"&:hover\": {\n          textDecoration: \"underline\",\n        },\n      },\n    },\n    nftDesc: {\n      color: theme.palette.primary[`400`],\n    },\n    mintInfoBox: {\n      display: \"grid\",\n      gap: \"30px 0\",\n      gridTemplateColumns: \"1fr\",\n      gridAutoFlow: \"row\",\n    },\n    uploadImage: {\n      height: \"180px\",\n    },\n  };\n});\n\ntype Values = {\n  rewardToken: string;\n  rewardTokenSymbol: string;\n  rewardTokenDecimals: number;\n  rewardTokenFee: number;\n  rewardStandard: string;\n  pool: string;\n  startDateTime: Date;\n  endDateTime: Date;\n  reward?: number;\n  rewardPool: string;\n  token0AmountLimit: number;\n  token1AmountLimit: number;\n  priceInsideLimit: string;\n  secondPerCycle: number;\n};\n\nconst DefaultValue = {\n  startDateTime: new Date(new Date().getTime() + 10 * 60 * 1000),\n  endDateTime: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000),\n  token0AmountLimit: 0,\n  token1AmountLimit: 0,\n  secondPerCycle: 600,\n} as Values;\n\nexport default function CreateProject() {\n  const classes = useStyles();\n  const history = useHistory();\n  const principal = useAccountPrincipal();\n  const [values, setValues] = useState<Values>(DefaultValue);\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState(false);\n  const [tokenId, setTokenId] = useState<string | undefined>(undefined);\n\n  const updateTokenStandard = useUpdateTokenStandard();\n\n  const handleFieldChange = (value: string | number | Date, field: string) => {\n    if (field === \"rewardStandard\" || field === \"rewardToken\") {\n      if (values.rewardToken && values.rewardStandard) {\n        updateTokenStandard({\n          canisterId: values.rewardToken,\n          standard: values.rewardStandard as TOKEN_STANDARD,\n        });\n      }\n    }\n\n    setValues({ ...values, [field]: value });\n  };\n\n  useEffect(() => {\n    async function call() {\n      if (!values.rewardToken || !values.rewardStandard) {\n        setTokenId(undefined);\n        return;\n      }\n      const { valid } = await standardCheck(values.rewardToken, values.rewardStandard as TOKEN_STANDARD);\n      if (!valid) {\n        setTokenId(undefined);\n      } else {\n        setTokenId(values.rewardToken);\n      }\n    }\n\n    call();\n  }, [values.rewardToken, values.rewardStandard]);\n\n  const { result: rewardTokenInfo } = useTokenInfo(tokenId);\n  const { result: poolMetadata } = useSwapPoolMetadata(values.pool);\n  const { result: poolToken0 } = useTokenInfo(poolMetadata?.token0.address);\n  const { result: poolToken1 } = useTokenInfo(poolMetadata?.token1.address);\n\n  const handleCreateFarmsEvent = async (identity: ActorIdentity) => {\n    if (!identity || loading || !principal || !rewardTokenInfo) return;\n\n    setLoading(true);\n\n    const { status, message } = await createV3Farm(identity, {\n      rewardToken: getSwapTokenArgs(rewardTokenInfo.canisterId),\n      startTime: BigInt(parseInt(String(values.startDateTime.getTime() / 1000), 10)),\n      endTime: BigInt(parseInt(String(values.endDateTime.getTime() / 1000), 10)),\n      pool: values.pool,\n      secondPerCycle: BigInt(values.secondPerCycle),\n      rewardAmount: BigInt(numberToString(formatTokenAmount(values.reward, rewardTokenInfo.decimals)) || 0),\n      rewardPool: values.rewardPool,\n      token0AmountLimit: BigInt(numberToString(formatTokenAmount(values.token0AmountLimit, poolToken0?.decimals)) || 0),\n      token1AmountLimit: BigInt(numberToString(formatTokenAmount(values.token1AmountLimit, poolToken1?.decimals)) || 0),\n      priceInsideLimit: values.priceInsideLimit === \"true\",\n    });\n\n    openTip(status === ResultStatus.OK ? \"Created successfully\" : message, status);\n\n    setLoading(false);\n\n    if (status === ResultStatus.OK) {\n      history.push(\"/staking-farm\");\n    }\n  };\n\n  let errorMsg = \"\";\n  if (!values.rewardToken) errorMsg = t`Enter the reward token`;\n  if (!values.rewardStandard) errorMsg = t`Enter the reward standard`;\n  if (!rewardTokenInfo) errorMsg = t`Invalid reward token`;\n  if (!values.rewardPool) errorMsg = t`Enter reward token swap pool id`;\n  if (!values.pool) errorMsg = t`Enter the pool`;\n  if (!values.reward) errorMsg = t`Enter the reward`;\n  if (!values.token0AmountLimit && values.token0AmountLimit !== 0)\n    errorMsg = t`Enter the token0 minimum staking amount `;\n  if (!values.token1AmountLimit && values.token1AmountLimit !== 0)\n    errorMsg = t`Enter the token1 minimum staking amount`;\n\n  return (\n    <Wrapper>\n      <MainCard>\n        <Grid container justifyContent=\"center\">\n          <Box sx={{ maxWidth: \"474px\", width: \"100%\" }}>\n            <Grid mt=\"30px\" container className={classes.mintInfoBox}>\n              <FilledTextField\n                label=\"Reward Token\"\n                placeholder={t`Enter reward token id`}\n                onChange={(value) => handleFieldChange(value, \"rewardToken\")}\n                value={values.rewardToken}\n              />\n              <FilledTextField\n                select\n                menus={TokenStandards}\n                label=\"Reward standard\"\n                placeholder={t`Select the reward token standard`}\n                onChange={(value) => handleFieldChange(value, \"rewardStandard\")}\n                value={values.rewardStandard}\n              />\n              <FilledTextField\n                label=\"Reward token swap pool id \"\n                placeholder={t`Enter reward token swap pool id`}\n                onChange={(value) => handleFieldChange(value, \"rewardPool\")}\n                value={values.rewardPool}\n              />\n              <FilledTextField\n                label=\"Pool id \"\n                placeholder={t`Enter swap pool id`}\n                onChange={(value) => handleFieldChange(value, \"pool\")}\n                value={values.pool}\n              />\n              <Box>\n                <Typography color=\"text.secondary\">Start/End Time</Typography>\n                <Box mt={2}>\n                  <Grid container justifyContent=\"space-between\">\n                    <Grid\n                      item\n                      sx={{\n                        width: \"48%\",\n                      }}\n                    >\n                      <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <DateTimePicker\n                          // @ts-ignore\n                          renderInput={(params: TextFieldProps) => (\n                            <FilledTextField\n                              fullWidth\n                              {...params}\n                              InputProps={{\n                                ...(params?.InputProps ?? {}),\n                              }}\n                              helperText=\"\"\n                            />\n                          )}\n                          value={values.startDateTime}\n                          onChange={(newValue: any) => {\n                            handleFieldChange(timeParser(newValue), \"startDateTime\");\n                          }}\n                          minDateTime={dayjs(new Date())}\n                          maxDateTime={values.endDateTime ? dayjs(new Date(values.endDateTime)) : undefined}\n                        />\n                      </LocalizationProvider>\n                    </Grid>\n                    <Grid\n                      item\n                      sx={{\n                        width: \"48%\",\n                      }}\n                    >\n                      <LocalizationProvider dateAdapter={AdapterDayjs}>\n                        <DateTimePicker\n                          // @ts-ignore\n                          renderInput={(params: TextFieldProps) => (\n                            <FilledTextField\n                              fullWidth\n                              {...params}\n                              InputProps={{\n                                ...(params?.InputProps ?? {}),\n                              }}\n                              helperText=\"\"\n                            />\n                          )}\n                          value={values.endDateTime}\n                          onChange={(newValue: any) => {\n                            handleFieldChange(timeParser(newValue), \"endDateTime\");\n                          }}\n                          minDateTime={values.startDateTime ? dayjs(new Date(values.startDateTime)) : dayjs(new Date())}\n                        />\n                      </LocalizationProvider>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Box>\n\n              <NumberFilledTextField\n                label=\"Reward\"\n                placeholder={t`Enter total token claimed amount`}\n                onChange={(value: number) => handleFieldChange(value, \"reward\")}\n                value={values.reward}\n                numericProps={{\n                  thousandSeparator: true,\n                  decimalScale: values?.rewardTokenDecimals ?? 8,\n                  allowNegative: false,\n                  maxLength: 100,\n                }}\n              />\n\n              <NumberFilledTextField\n                label={`Token0 minimum staking amount ${poolToken0?.symbol ? `(${poolToken0?.symbol})` : \"\"}`}\n                placeholder={t`Enter the token0 minimum staking amount`}\n                onChange={(value: number) => handleFieldChange(value, \"token0AmountLimit\")}\n                value={values.token0AmountLimit}\n                numericProps={{\n                  thousandSeparator: true,\n                  decimalScale: values?.rewardTokenDecimals ?? 8,\n                  allowNegative: false,\n                  maxLength: 100,\n                }}\n              />\n\n              <NumberFilledTextField\n                label={`Token1 minimum staking amount ${poolToken1?.symbol ? `(${poolToken1?.symbol})` : \"\"}`}\n                placeholder={t`Enter the token1 minimum staking amount`}\n                onChange={(value: number) => handleFieldChange(value, \"token1AmountLimit\")}\n                value={values.token1AmountLimit}\n                numericProps={{\n                  thousandSeparator: true,\n                  decimalScale: values?.rewardTokenDecimals ?? 8,\n                  allowNegative: false,\n                  maxLength: 100,\n                }}\n              />\n\n              <NumberFilledTextField\n                label=\"SecondPerCycle\"\n                placeholder={t`Enter the secondPerCycle`}\n                onChange={(value: number) => handleFieldChange(value, \"secondPerCycle\")}\n                value={values.secondPerCycle}\n                numericProps={{\n                  thousandSeparator: true,\n                  decimalScale: 0,\n                  allowNegative: false,\n                  maxLength: 100,\n                }}\n              />\n\n              <FilledTextField\n                select\n                label=\"PriceInsideLimit\"\n                placeholder={t`Select the PriceInsideLimit`}\n                onChange={(value) => handleFieldChange(value, \"priceInsideLimit\")}\n                value={values.priceInsideLimit}\n                menus={[\n                  { label: \"True\", value: \"true\" },\n                  { label: \"False\", value: \"false\" },\n                ]}\n              />\n            </Grid>\n            <Typography sx={{ margin: \"10px 0 0 0\" }}>FarmControllerId: {FarmControllerId}</Typography>\n            <Box mt={4}>\n              <Identity onSubmit={handleCreateFarmsEvent}>\n                {({ submit }: CallbackProps) => (\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    size=\"large\"\n                    onClick={submit}\n                    disabled={Boolean(errorMsg) || loading}\n                    loading={loading}\n                  >\n                    {errorMsg || t`Create farm`}\n                  </Button>\n                )}\n              </Identity>\n            </Box>\n          </Box>\n        </Grid>\n      </MainCard>\n    </Wrapper>\n  );\n}\n","import { useCallsData, usePaginationAllData } from \"../useCallData\";\nimport { useCallback } from \"react\";\nimport { resultFormat, isAvailablePageArgs } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { v3Farm, v3FarmController } from \"@w2e/actor\";\nimport type {\n  StakingFarmDepositArgs,\n  StakingFarmInfo,\n  StakingFarmStakeTransaction,\n  StakingFarmDistributeTransaction,\n  FarmMetadata,\n} from \"@w2e/types\";\nimport type { ActorIdentity, PaginationResult } from \"@w2e/types\";\n\nexport async function getV3UserFarmInfo(canisterId: string, principal: string) {\n  return resultFormat<StakingFarmInfo>(await (await v3Farm(canisterId)).getFarmInfo(principal)).data;\n}\n\nexport function useV3UserFarmInfo(canisterId: string | undefined, principal: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!principal || !canisterId) return undefined;\n      return await getV3UserFarmInfo(canisterId, principal);\n    }, [principal, canisterId]),\n    reload,\n  );\n}\n\nexport async function getFarmUserPositions(canisterId: string, principal: string, offset: number, limit: number) {\n  return resultFormat<PaginationResult<StakingFarmDepositArgs>>(\n    await (await v3Farm(canisterId)).getUserPositions(Principal.from(principal), BigInt(offset), BigInt(limit)),\n  ).data;\n}\n\nexport function useFarmUserPositions(\n  canisterId: string | undefined,\n  principal: string | undefined,\n  offset: number,\n  limit: number,\n  reload?: boolean,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !principal || !isAvailablePageArgs(offset, limit)) return undefined;\n\n      return await getFarmUserPositions(canisterId, principal, offset, limit);\n    }, [canisterId, principal, offset, limit]),\n    reload,\n  );\n}\n\nexport function useFarmUserAllPositions(canisterId: string | undefined, user: string | undefined, reload?: boolean) {\n  const callback = useCallback(\n    async (offset: number, limit: number) => {\n      if (!canisterId || !user) return undefined;\n      return await getFarmUserPositions(canisterId, user, offset, limit);\n    },\n    [canisterId, user],\n  );\n\n  return usePaginationAllData<StakingFarmDepositArgs>(callback, 300, reload);\n}\n\nexport async function getFarmTVL(canisterId: string) {\n  return resultFormat<{ stakedTokenTVL: number; rewardTokenTVL: number }>(await (await v3Farm(canisterId)).getTVL())\n    .data;\n}\n\nexport function useFarmTVL(canisterId: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n\n      return await getFarmTVL(canisterId);\n    }, [canisterId]),\n    reload,\n  );\n}\n\nexport async function getFarmUserTVL(canisterId: string, principal: string) {\n  return resultFormat<number>(await (await v3Farm(canisterId)).getUserTVL(Principal.fromText(principal))).data;\n}\n\nexport function useFarmUserTVL(canisterId: string | undefined, principal: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !principal) return undefined;\n\n      return await getFarmUserTVL(canisterId, principal);\n    }, [canisterId, principal]),\n    reload,\n  );\n}\n\nexport type V3FarmRewardMeta = {\n  secondPerCycle: bigint;\n  totalRewardBalance: bigint;\n  rewardPerCycle: bigint;\n  totalRewardClaimed: bigint;\n  totalCycleCount: bigint;\n  currentCycleCount: bigint;\n  totalReward: bigint;\n  totalRewardUnclaimed: bigint;\n};\n\nexport function useV3FarmRewardMeta(canisterId: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n\n      return resultFormat<V3FarmRewardMeta>(await (await v3Farm(canisterId!)).getRewardMeta()).data;\n    }, [canisterId]),\n    reload,\n  );\n}\n\nexport async function getV3UserFarmRewardInfo(canisterId: string, positionIds: bigint[]) {\n  return resultFormat<bigint>(await (await v3Farm(canisterId!)).getRewardInfo(positionIds)).data;\n}\n\nexport function useV3UserFarmRewardInfo(\n  canisterId: string | undefined,\n  positionIds: bigint[] | undefined,\n  reload?: boolean,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !positionIds?.length) return undefined;\n      return await getV3UserFarmRewardInfo(canisterId, positionIds);\n    }, [canisterId, positionIds]),\n    reload,\n  );\n}\n\nexport type CreateFarmArgs = {\n  rewardToken: { address: string; standard: string };\n  rewardAmount: bigint;\n  rewardPool: string;\n  pool: string;\n  startTime: bigint;\n  endTime: bigint;\n  secondPerCycle: bigint;\n  token0AmountLimit: bigint;\n  token1AmountLimit: bigint;\n  priceInsideLimit: boolean;\n};\n\nexport async function createV3Farm(identity: ActorIdentity, args: CreateFarmArgs) {\n  return resultFormat<string>(\n    await (\n      await v3FarmController(identity)\n    ).create(\n      args.rewardToken,\n      args.rewardAmount,\n      args.rewardPool,\n      args.pool,\n      args.startTime,\n      args.endTime,\n      args.secondPerCycle,\n      args.token0AmountLimit,\n      args.token1AmountLimit,\n      args.priceInsideLimit,\n    ),\n  );\n}\n\nexport async function getV3StakingFarms(offset: number, limit: number, state: string) {\n  return resultFormat<PaginationResult<StakingFarmInfo>>(\n    await (await v3FarmController()).getFarmList(BigInt(offset), BigInt(limit), state),\n  ).data;\n}\n\nexport function useV3StakingFarms(offset: number, limit: number, state: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!isAvailablePageArgs(offset, limit) || !state) return undefined;\n      return await getV3StakingFarms(offset, limit, state);\n    }, [offset, limit, state]),\n    reload,\n  );\n}\n\nexport async function getV3FarmMetadata(canisterId: string) {\n  return resultFormat<FarmMetadata>(await (await v3Farm(canisterId)).getRewardMeta()).data;\n}\n\nexport function useV3FarmMetadata(canisterId: string | undefined) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return await getV3FarmMetadata(canisterId!);\n    }, [canisterId]),\n  );\n}\n\n/* v3 farm storage */\n\nexport async function getV3FarmStakeRecords(canisterId: string, offset: number, limit: number, from: string) {\n  return resultFormat<PaginationResult<StakingFarmStakeTransaction>>(\n    await (await v3Farm(canisterId)).getStakeRecord(BigInt(offset), BigInt(limit), from),\n  ).data;\n}\n\nexport function useV3FarmStakeRecords(\n  storageId: string | undefined,\n  offset: number,\n  limit: number,\n  from: string = \"\",\n  reload?: boolean,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!isAvailablePageArgs(offset, limit) || !storageId) return undefined;\n      return await getV3FarmStakeRecords(storageId, offset, limit, from);\n    }, [offset, limit, from, storageId]),\n    reload,\n  );\n}\n\nexport async function getV3FarmDistributeRecords(canisterId: string, offset: number, limit: number, owner: string) {\n  return resultFormat<PaginationResult<StakingFarmDistributeTransaction>>(\n    await (await v3Farm(canisterId)).getDistributeRecord(BigInt(offset), BigInt(limit), owner),\n  ).data;\n}\n\nexport function useV3FarmDistributeRecords(\n  storageId: string | undefined,\n  offset: number,\n  limit: number,\n  owner: string = \"\",\n  reload?: boolean,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!isAvailablePageArgs(offset, limit) || !storageId) return undefined;\n      return await getV3FarmDistributeRecords(storageId, offset, limit, owner);\n    }, [offset, limit, owner, storageId]),\n    reload,\n  );\n}\n\n/* v3 farm storage */\n"],"names":["TokenStandards","label","value","TOKEN_STANDARD","EXT","DIP20","ICRC1","ICRC2","ICP","useStyles","makeStyles","theme","breadcrumbs","padding","textDecoration","nftDesc","color","palette","primary","mintInfoBox","display","gap","gridTemplateColumns","gridAutoFlow","uploadImage","height","DefaultValue","startDateTime","Date","getTime","endDateTime","token0AmountLimit","token1AmountLimit","secondPerCycle","CreateProject","_values$rewardTokenDe","_values$rewardTokenDe2","_values$rewardTokenDe3","classes","history","useHistory","principal","useAccountPrincipal","values","setValues","useState","openTip","useTips","loading","setLoading","tokenId","setTokenId","undefined","updateTokenStandard","useUpdateTokenStandard","handleFieldChange","field","rewardToken","rewardStandard","canisterId","standard","useEffect","async","valid","standardCheck","call","result","rewardTokenInfo","useTokenInfo","poolMetadata","useSwapPoolMetadata","pool","poolToken0","token0","address","poolToken1","token1","errorMsg","i18n","_","id","rewardPool","reward","_jsx","Wrapper","children","MainCard","Grid","container","justifyContent","_jsxs","Box","sx","maxWidth","width","mt","className","FilledTextField","placeholder","onChange","select","menus","Typography","item","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","renderInput","params","_params$InputProps","fullWidth","InputProps","helperText","newValue","timeParser","minDateTime","dayjs","maxDateTime","_params$InputProps2","NumberFilledTextField","numericProps","thousandSeparator","decimalScale","rewardTokenDecimals","allowNegative","maxLength","concat","symbol","priceInsideLimit","margin","FarmControllerId","Identity","onSubmit","identity","status","message","createV3Farm","getSwapTokenArgs","startTime","BigInt","parseInt","String","endTime","rewardAmount","numberToString","formatTokenAmount","decimals","ResultStatus","OK","push","_ref","submit","Button","variant","size","onClick","disabled","Boolean","fulfilled","step","generator","next","e","reject","rejected","throw","done","resolve","then","apply","thisArg","_arguments","getV3UserFarmInfo","__awaiter","resultFormat","v3Farm","getFarmInfo","data","getFarmUserPositions","offset","limit","getUserPositions","Principal","from","useFarmUserAllPositions","user","reload","useCallback","usePaginationAllData","callback","getFarmTVL","getTVL","getFarmUserTVL","getUserTVL","fromText","getV3UserFarmRewardInfo","positionIds","getRewardInfo","args","v3FarmController","create","useV3StakingFarms","state","isAvailablePageArgs","getFarmList","getV3StakingFarms","useV3FarmMetadata","getRewardMeta","getV3FarmMetadata"],"sourceRoot":""}