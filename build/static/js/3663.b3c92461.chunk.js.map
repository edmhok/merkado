{"version":3,"file":"static/js/3663.b3c92461.chunk.js","mappings":"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","sources":["components/MaxButton.tsx","types/staking-token.ts","components/Checkbox/context.ts","components/Checkbox/Group.tsx","components/Checkbox/Checkbox.tsx","views/staking-token/components/UnusedTokens.tsx","components/staking-token/PoolDetails.tsx","components/staking-token/Harvest.tsx","components/staking-token/UserStaking.tsx","components/staking-token/StakingModal.tsx","components/staking-token/V2StakingModal.tsx","components/staking-token/V1StakingModal.tsx","components/staking-token/ClaimModal.tsx","components/staking-token/StakingAndClaim.tsx","views/staking-token/components/Pool.tsx","views/staking-token/components/GlobalData.tsx","views/staking-token/index.tsx","utils/staking.ts","../packages/utils/src/time.ts"],"sourcesContent":["import { Typography, TypographyProps } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Trans } from \"@lingui/macro\";\n\nexport default function MaxButton(props: TypographyProps) {\n  const theme = useTheme() as Theme;\n\n  return (\n    <Typography\n      {...props}\n      sx={{\n        padding: \"1px 3px\",\n        cursor: \"pointer\",\n        borderRadius: \"2px\",\n        backgroundColor: theme.colors.secondaryMain,\n        color: \"#ffffff\",\n        fontSize: \"12px\",\n        ...(props.sx ?? {}),\n      }}\n    >\n      <Trans>Max</Trans>\n    </Typography>\n  );\n}\n","import { Override, StakingPoolControllerPoolInfo, StakingTokenPoolInfo } from \"@w2e/types\";\nimport type { PublicPoolInfo as V1Pool } from \"candid/swap-v2/SingleSmartChef.did\";\n\nexport type UnusedBalance = Override<StakingPoolControllerPoolInfo, { balance: bigint }>;\n\nexport enum STATE {\n  LIVE = \"LIVE\",\n  UPCOMING = \"UNSTART\",\n  FINISHED = \"FINISHED\",\n}\n\nexport enum STAKING_POOL_VERSION {\n  version1 = \"1.0\",\n  version2 = \"2.0\",\n}\n\nexport type PoolData = StakingTokenPoolInfo | V1Pool;\n\nexport type UserStakingInfo = {\n  amount: bigint;\n  reward: bigint;\n};\n","import { createContext } from \"react\";\n\nexport interface CheckboxContextProps {\n  checked: string[];\n  onChange: (checked: string[]) => void;\n}\n\nexport default createContext<CheckboxContextProps>({} as CheckboxContextProps);\n","import { ReactNode, useEffect, useState } from \"react\";\nimport CheckboxGroupContext from \"./context\";\n\nexport interface CheckboxGroupProps {\n  defaultChecked?: string[];\n  onChange?: (checked: string[]) => void;\n  children: ReactNode;\n}\n\nexport default function CheckboxGroup({ defaultChecked, onChange, children }: CheckboxGroupProps) {\n  const [checked, setChecked] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (defaultChecked && defaultChecked.length) {\n      setChecked(defaultChecked);\n    }\n  }, [defaultChecked]);\n\n  const handleCheckChange = (checked: string[]) => {\n    setChecked(checked);\n    if (onChange) onChange(checked);\n  };\n\n  return (\n    <CheckboxGroupContext.Provider value={{ checked, onChange: handleCheckChange }}>\n      {children}\n    </CheckboxGroupContext.Provider>\n  );\n}\n","import { useContext } from \"react\";\nimport { Box } from \"@mui/material\";\nimport CheckboxGroupContext from \"./context\";\n\nfunction UncheckedIcon() {\n  return (\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"10\" cy=\"10\" r=\"9\" stroke=\"#5669DC\" strokeWidth=\"2\" />\n    </svg>\n  );\n}\n\nfunction CheckedIcon() {\n  return (\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#5669DC\" />\n      <path\n        d=\"M14.2 8.2L9.4 13C9 13.4 8.4 13.4 8 13L5.8 10.8C5.4 10.4 5.4 9.8 5.8 9.4C6.2 9 6.8 9 7.2 9.4L8.7 10.9L12.8 6.8C13.2 6.4 13.8 6.4 14.2 6.8C14.6 7.2 14.6 7.8 14.2 8.2Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n}\n\nexport interface CheckboxProps {\n  value: string;\n  radio?: boolean;\n}\n\nexport default function Checkbox({ value, radio }: CheckboxProps) {\n  const { checked, onChange } = useContext(CheckboxGroupContext);\n\n  const isCheck = checked.includes(value);\n\n  const handleToggle = () => {\n    if (radio) {\n      if (checked.includes(value)) {\n        onChange([]);\n      } else {\n        onChange([value]);\n      }\n      return;\n    }\n\n    if (checked.includes(value)) {\n      const _checked = [...checked];\n      _checked.splice(_checked.indexOf(value), 1);\n      onChange(_checked);\n    } else {\n      onChange([...checked, value]);\n    }\n  };\n\n  return (\n    <Box sx={{ width: \"20px\", height: \"20px\", cursor: \"pointer\" }} component=\"span\" onClick={handleToggle}>\n      {isCheck ? <CheckedIcon /> : <UncheckedIcon />}\n    </Box>\n  );\n}\n","import { useMemo, useState } from \"react\";\nimport SwapModal from \"components/modal/swap\";\nimport { Typography, Box, Grid, Button, CircularProgress, Avatar } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { NoData, LoadingRow } from \"components/index\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { ResultStatus } from \"@w2e/types\";\nimport { t, Trans } from \"@lingui/macro\";\nimport { Theme } from \"@mui/material/styles\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { UnusedBalance } from \"types/staking-token\";\nimport { TokenInfo } from \"types/token\";\nimport { CheckboxGroup, Checkbox } from \"components/Checkbox\";\nimport Identity, { CallbackProps, SubmitLoadingProps } from \"components/Identity/index\";\nimport { useTips, MessageTypes } from \"hooks/useTips\";\nimport { Identity as CallIdentity } from \"types/global\";\nimport { useUserUnusedTokens } from \"hooks/staking-token/index\";\nimport { stakingTokenClaim } from \"@w2e/hooks\";\n\nexport function BalanceItem({\n  token,\n  balance,\n  name,\n  border = true,\n  pool,\n}: {\n  pool: string;\n  border?: boolean;\n  token?: TokenInfo;\n  balance: bigint;\n  name: string | undefined;\n}) {\n  return (\n    <Grid container alignItems=\"center\" sx={{ borderBottom: !border ? \"none\" : \"1px solid #313A5A\", height: \"64px\" }}>\n      <Avatar src={token?.logo} sx={{ width: \"24px\", height: \"24px\", margin: \"0 8px 0 0\" }}>\n        &nbsp;\n      </Avatar>\n      <Typography color=\"text.primary\">{parseTokenAmount(balance, token?.decimals).toFormat()}</Typography>\n      <Grid item xs>\n        <Grid container alignItems=\"center\" justifyContent=\"flex-end\">\n          <Typography color=\"text.primary\" sx={{ margin: \"0 32px 0 0\" }}>\n            {name}\n          </Typography>\n          <Checkbox value={`${pool}_${token?.canisterId}`} radio />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport function BalancesItem({ balance, end }: { end: boolean; balance: UnusedBalance }) {\n  const { result: token0 } = useTokenInfo(balance.stakingToken.address);\n\n  const name = token0 ? `${token0.symbol}` : \"--\";\n\n  return (\n    <BalanceItem\n      pool={balance.canisterId.toString()}\n      token={token0}\n      balance={balance.balance}\n      name={name}\n      border={!end}\n    />\n  );\n}\n\nexport interface WithdrawTokensModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function WithdrawUnusedTokens({ open, onClose }: WithdrawTokensModalProps) {\n  const theme = useTheme() as Theme;\n\n  const [keys, setKeys] = useState<string[]>([]);\n  const [reload, setReloadBalance] = useState(false);\n\n  const { loading, result: balances } = useUserUnusedTokens(reload);\n\n  const [openTip, closeTip] = useTips();\n\n  const _balances = useMemo(() => {\n    if (!balances) return [];\n\n    return balances.filter((balance) => balance.balance !== BigInt(0));\n  }, [balances]);\n\n  const handleCheckChange = (checked: string[]) => {\n    setKeys(checked);\n  };\n\n  const handleClaim = async (identity: CallIdentity, { loading, closeLoading }: SubmitLoadingProps) => {\n    if (loading) return;\n    const loadingKey = openTip(\"Reclaim your tokens\", MessageTypes.loading);\n    const calls: Promise<void>[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const temp = keys[i].split(\"_\");\n      const pool = temp[0];\n\n      const balance = _balances.filter((balance) => balance.canisterId.toString() === pool)[0];\n\n      if (balance) {\n        const amount = balance.balance;\n\n        if (amount !== BigInt(0)) {\n          calls.push(\n            stakingTokenClaim(pool, identity).then(async (result) => {\n              if (result.status === ResultStatus.OK) {\n                openTip(`Withdrew ${balance.stakingTokenSymbol} successfully`, MessageTypes.success);\n              } else {\n                openTip(result.message ?? `Failed to Withdraw ${balance.stakingTokenSymbol}`, MessageTypes.error);\n              }\n            }),\n          );\n        }\n      }\n    }\n    await Promise.all(calls);\n    closeLoading();\n    closeTip(loadingKey);\n    setReloadBalance(!reload);\n  };\n\n  return (\n    <SwapModal open={open} title={t`Reclaim your tokens`} onClose={onClose}>\n      {loading ? (\n        <LoadingRow>\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </LoadingRow>\n      ) : _balances.length > 0 ? (\n        <>\n          <CheckboxGroup onChange={handleCheckChange}>\n            <Box\n              sx={{\n                background: theme.palette.background.level3,\n                borderRadius: \"12px\",\n                border: `1px solid ${theme.palette.background.level4}`,\n                padding: \"0 24px\",\n                maxHeight: \"348px\",\n                overflow: \"auto\",\n              }}\n            >\n              {_balances.map((balance, index) => (\n                <BalancesItem key={index} balance={balance} end={index === _balances.length - 1} />\n              ))}\n            </Box>\n            <Box mt=\"24px\">\n              <Identity onSubmit={handleClaim} fullScreenLoading>\n                {({ submit, loading }: CallbackProps) => (\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    size=\"large\"\n                    disabled={!keys.length || loading}\n                    onClick={submit}\n                    startIcon={loading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n                  >\n                    <Trans>Withdraw</Trans>\n                  </Button>\n                )}\n              </Identity>\n            </Box>\n          </CheckboxGroup>\n        </>\n      ) : (\n        <NoData />\n      )}\n    </SwapModal>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Grid, Box, Collapse, Typography, Link } from \"@mui/material\";\nimport { INFO_URL } from \"constants/index\";\nimport { WRAPPED_ICP, ICP } from \"constants/tokens\";\nimport { useStakingTokenPool } from \"@w2e/hooks\";\nimport { Token } from \"@w2e/swap-sdk\";\nimport BigNumber from \"bignumber.js\";\nimport { useTheme } from \"@mui/styles\";\nimport { usePoolCycles } from \"hooks/staking-token/index\";\nimport { Trans } from \"@lingui/macro\";\nimport Countdown from \"react-countdown\";\nimport { ICRocksLoadIcon } from \"components/Layout/Header/ProfileSection\";\nimport { Theme } from \"@mui/material/styles\";\nimport { STATE, PoolData } from \"types/staking-token\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport { useTokenBalance } from \"hooks/token/useTokenBalance\";\nimport { shorten, timestampFormat, parseTokenAmount, cycleValueFormat } from \"@w2e/utils\";\nimport { getExplorerPrincipalLink } from \"utils/index\";\n\nconst CountdownBox = ({ startTime, endTime }: { startTime: number; endTime: number }) => {\n  const nowTime = parseInt(String(Date.now() / 1000));\n  let expand = false;\n  let date = startTime;\n\n  if (nowTime > endTime) expand = true;\n\n  if (nowTime < startTime) {\n    date = startTime * 1000;\n  } else if (nowTime > startTime && nowTime < endTime) {\n    date = endTime * 1000;\n  } else {\n    date = 0;\n  }\n\n  return expand ? (\n    <Typography color=\"text.primary\">\n      <Trans>End</Trans>\n    </Typography>\n  ) : (\n    <Countdown date={date} />\n  );\n};\n\nexport interface StakingPoolDetailsProps {\n  pool: StakingPoolControllerPoolInfo | undefined | null;\n  state: STATE;\n  poolData: PoolData | undefined;\n  rewardToken: Token | undefined;\n  stakingToken: Token | undefined;\n  rewardTokenPrice: string | number | undefined;\n  stakingTokenPrice: string | number | undefined;\n}\n\nexport default function StakingPoolDetails({\n  pool,\n  state,\n  poolData,\n  rewardToken,\n  rewardTokenPrice,\n  stakingTokenPrice,\n}: StakingPoolDetailsProps) {\n  const theme = useTheme() as Theme;\n\n  const [expanded, setExpanded] = React.useState(false);\n\n  const { result: poolTokenBalance } = useTokenBalance(pool?.stakingToken.address, pool?.canisterId);\n\n  const poolUSDValue = useMemo(() => {\n    if (!pool || !poolTokenBalance || (poolTokenBalance && isNaN(poolTokenBalance.toNumber()))) return \"0\";\n    return parseTokenAmount(poolTokenBalance, pool.stakingTokenDecimals)\n      .multipliedBy(stakingTokenPrice ?? 0)\n      .toNumber();\n  }, [poolTokenBalance, stakingTokenPrice]);\n\n  // const totalStakingDeposit = useMemo(() => {\n  //   if (!poolData || !stakingToken) return 0;\n  //   return parseTokenAmount(poolData.totalDeposit, stakingToken.decimals).toNumber();\n  // }, [poolData?.totalDeposit, stakingToken]);\n\n  // const totalStakingUSDValue = useMemo(() => {\n  //   return new BigNumber(totalStakingDeposit).multipliedBy(stakingTokenPrice ?? 0).toNumber();\n  // }, [totalStakingDeposit, stakingTokenPrice]);\n\n  const { result: stakingTokenPoolInfo } = useStakingTokenPool(pool?.canisterId);\n\n  const totalRewardDeposit = useMemo(() => {\n    if (!rewardToken || !poolData) return 0;\n    return parseTokenAmount(poolData.rewardDebt, rewardToken.decimals).toNumber();\n  }, [poolData?.rewardDebt, rewardToken]);\n\n  const totalRewardUSDValue = useMemo(() => {\n    return new BigNumber(totalRewardDeposit).multipliedBy(rewardTokenPrice ?? 0).toNumber();\n  }, [totalRewardDeposit, rewardTokenPrice]);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleGetToken = () => {\n    if (pool?.stakingToken.address === WRAPPED_ICP.address) {\n      window.open(`/swap/?input=${ICP.address}`, \"_target\");\n    } else {\n      window.open(`/swap/?input=${ICP.address}&output=${pool?.stakingToken.address}`, \"_target\");\n    }\n  };\n\n  const { result: cycles } = usePoolCycles(pool?.canisterId, pool?.version);\n\n  return (\n    <>\n      <Box sx={{ padding: \"0 0 20px 0\", background: theme.palette.background.level1 }}>\n        <Grid container justifyContent=\"center\" onClick={handleExpandClick}>\n          <Typography\n            sx={{\n              fontWeight: \"500\",\n              fontSize: \"14px\",\n              lineHeight: \"24px\",\n              textAlign: \"center\",\n              color: \"#648EFB\",\n              cursor: \"pointer\",\n            }}\n          >\n            {expanded ? \"Hide\" : \"Details\"}\n          </Typography>\n        </Grid>\n      </Box>\n\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <Box\n          style={{ padding: \"24px 24px\", borderTop: \"1px solid #313A5A\", background: theme.palette.background.level1 }}\n        >\n          <Box sx={{ display: \"grid\", gap: \"24px 0\" }}>\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Typography sx={{ cursor: \"pointer\" }} onClick={handleGetToken}>\n                Get {pool?.stakingTokenSymbol}\n                <ICRocksLoadIcon\n                  fontSize=\"24\"\n                  sx={{\n                    position: \"relative\",\n                    top: \"3px\",\n                    cursor: \"pointer\",\n                    marginLeft: \"5px\",\n                    color: theme.colors.secondaryMain,\n                  }}\n                />\n              </Typography>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>\n                  <Trans>Pool Balance</Trans>\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\" style={{ textAlign: \"right\" }}>\n                  {parseTokenAmount(poolTokenBalance ?? 0, pool?.stakingTokenDecimals).toFormat()}{\" \"}\n                  {pool?.stakingTokenSymbol}\n                </Typography>\n                <Typography color=\"text.primary\" style={{ textAlign: \"right\" }}>\n                  ~${new BigNumber(poolUSDValue ?? 0).toFormat(2)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>\n                  <Trans>Total Rewards</Trans>\n                </Typography>\n              </Grid>\n              <Grid item xs>\n                <Typography color=\"text.primary\" style={{ textAlign: \"right\" }}>\n                  {new BigNumber(totalRewardDeposit ?? 0).toFormat()} {pool?.rewardTokenSymbol}\n                </Typography>\n                <Typography color=\"text.primary\" style={{ textAlign: \"right\" }}>\n                  ~${new BigNumber(totalRewardUSDValue ?? 0).toFormat(2)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>\n                  <Trans>Reward Per Second</Trans>\n                </Typography>\n              </Grid>\n              <Grid item xs>\n                <Typography color=\"text.primary\" style={{ textAlign: \"right\" }}>\n                  {stakingTokenPoolInfo && rewardToken\n                    ? parseTokenAmount(\n                      new BigNumber(stakingTokenPoolInfo.rewardPerTime.toString()).multipliedBy(\n                        stakingTokenPoolInfo.BONUS_MULTIPLIER.toString(),\n                      ),\n                      rewardToken.decimals,\n                    ).toFormat()\n                    : \"--\"}\n                  &nbsp;\n                  {pool?.rewardTokenSymbol}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>\n                  <Trans>Starting at</Trans>\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\">\n                  {pool?.startTime ? timestampFormat(Number(pool.startTime) * 1000) : \"--\"}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>{state === STATE.UPCOMING ? <Trans>Left</Trans> : <Trans>End in</Trans>}</Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\">\n                  <CountdownBox\n                    startTime={Number(poolData?.lastRewardTime ?? 0)}\n                    endTime={Number(poolData?.bonusEndTime ?? 0)}\n                  />\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>Created by</Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary.main\">\n                  <Link href={`https://icscan.io/principal/${pool?.creator}`} target=\"_blank\">\n                    {pool?.creator ? shorten(pool?.creator) : \"--\"}\n                  </Link>\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>Canister ID</Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\">\n                  {pool ? (\n                    <Link href={getExplorerPrincipalLink(pool.canisterId)} target=\"_blank\">\n                      {pool?.canisterId ? shorten(pool?.canisterId) : \"--\"}\n                    </Link>\n                  ) : null}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n              <Grid item>\n                <Typography>Cycles left</Typography>\n              </Grid>\n              <Grid item>\n                <Typography color=\"text.primary\">{cycles ? cycleValueFormat(cycles) : \"--\"}</Typography>\n              </Grid>\n            </Grid>\n\n            <Grid container direction=\"row\" justifyContent=\"flex-end\">\n              <Typography color=\"text.primary\">\n                <Link\n                  href={`${INFO_URL}/staking-token/details/${pool?.canisterId}/${pool?.version}/${state}`}\n                  target=\"_blank\"\n                >\n                  Token Pools Info\n                </Link>\n              </Typography>\n            </Grid>\n          </Box>\n        </Box>\n      </Collapse>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Grid, Button, CircularProgress } from \"@mui/material\";\nimport { useTips, TIP_SUCCESS, TIP_ERROR } from \"hooks/useTips\";\nimport { Token } from \"@w2e/swap-sdk\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { ResultStatus } from \"@w2e/types\";\nimport { getLocaleMessage } from \"locales/services\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { t } from \"@lingui/macro\";\nimport { useConnectorStateConnected } from \"store/auth/hooks\";\nimport ConnectWallet from \"components/authentication/ButtonConnector\";\nimport type { ActorIdentity, StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport { harvest } from \"hooks/staking-token/index\";\n\nexport interface ClaimRewardProps {\n  rewardToken: Token | undefined | null;\n  pool: StakingPoolControllerPoolInfo | undefined | null;\n  reward: number;\n}\n\nexport default function ClaimReward({ rewardToken, reward, pool }: ClaimRewardProps) {\n  const [openTip] = useTips();\n  const walletIsConnected = useConnectorStateConnected();\n  const [loading, setLoading] = React.useState(false);\n\n  const handleClaimReward = async (identity: ActorIdentity) => {\n    if (loading || !pool) return;\n\n    setLoading(true);\n\n    const { status, message } = await harvest(pool.canisterId, pool.version, identity);\n\n    if (status === ResultStatus.OK) {\n      openTip(t`Harvest successfully`, TIP_SUCCESS);\n    } else {\n      openTip(getLocaleMessage(message), TIP_ERROR);\n    }\n\n    setLoading(false);\n  };\n\n  const noRewardToken =\n    (!!rewardToken && !!reward && parseTokenAmount(rewardToken.transFee, rewardToken.decimals).isGreaterThan(reward)) ||\n    !rewardToken ||\n    !reward ||\n    reward === 0;\n\n  return (\n    <Grid>\n      {walletIsConnected ? (\n        <Identity onSubmit={handleClaimReward}>\n          {({ submit }: CallbackProps) => (\n            <Button\n              disabled={loading || noRewardToken}\n              fullWidth\n              style={{ height: \"42px\" }}\n              variant=\"contained\"\n              size=\"large\"\n              color=\"primary\"\n              onClick={submit}\n              startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : null}\n            >\n              {t`Harvest`}\n            </Button>\n          )}\n        </Identity>\n      ) : (\n        <ConnectWallet style={{ whiteSpace: \"nowrap\" }} />\n      )}\n    </Grid>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Grid, Box, Typography } from \"@mui/material\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { Token } from \"@w2e/swap-sdk\";\nimport BigNumber from \"bignumber.js\";\nimport CountUp from \"react-countup\";\nimport { Trans } from \"@lingui/macro\";\nimport { useConnectorStateConnected } from \"store/auth/hooks\";\nimport ConnectWallet from \"components/authentication/ButtonConnector\";\nimport { useICPPrice } from \"store/global/hooks\";\nimport { PoolData, UserStakingInfo, STATE } from \"types/staking-token\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport Harvest from \"components/staking-token/Harvest\";\n\nexport interface UserStakingProps {\n  pool: StakingPoolControllerPoolInfo | undefined | null;\n  poolData: PoolData | undefined | null;\n  StakingAndClaim: React.ReactNode;\n  userStakingInfo: UserStakingInfo | undefined | null;\n  rewardToken: Token | undefined | null;\n  stakingToken: Token | undefined | null;\n  rewardTokenPrice: string | number | undefined | null;\n  stakingTokenPrice: string | number | undefined | null;\n  state: STATE;\n}\n\nexport default function UserStaking({\n  pool,\n  poolData,\n  StakingAndClaim,\n  userStakingInfo,\n  rewardToken,\n  stakingToken,\n  rewardTokenPrice,\n  stakingTokenPrice,\n  state,\n}: UserStakingProps) {\n  const ICPPrice = useICPPrice();\n\n  const apr = useMemo(() => {\n    if (poolData?.BONUS_MULTIPLIER && poolData?.rewardPerTime && stakingToken && rewardToken) {\n      const poolInfoPerSecond = Number(poolData.BONUS_MULTIPLIER * poolData.rewardPerTime);\n      const totalDeposit = parseTokenAmount(poolData.totalDeposit, stakingToken.decimals).toNumber();\n      if (ICPPrice && rewardTokenPrice && stakingTokenPrice && rewardToken.decimals && poolInfoPerSecond > 0) {\n        const perSecond = parseTokenAmount(poolInfoPerSecond, rewardToken.decimals).toNumber();\n        // apr={(perSecond*3600*24*365)/ totalDeposit} * 100\n        // const a = ((ICPPrice * rewardTokenPrice ? new BigNumber(rewardTokenPrice).toNumber() : 1 * perSecond * 31536000) / (ICPPrice * totalDeposit * 2)) * 100;\n        // const a = ((perSecond * 3600 * 24 * 365) / totalDeposit) * 100;\n        const a =\n          ((perSecond * 3600 * 24 * 365) / totalDeposit) *\n          100 *\n          new BigNumber(rewardTokenPrice).dividedBy(stakingTokenPrice).toNumber();\n\n        return Number.isFinite(a) ? a : 0;\n      }\n    }\n    return 0;\n  }, [ICPPrice, poolData, rewardToken, rewardTokenPrice, stakingTokenPrice, stakingToken]);\n\n  const stakingAmount = useMemo(() => {\n    return parseTokenAmount(userStakingInfo?.amount ?? 0, stakingToken?.decimals).toNumber();\n  }, [userStakingInfo, stakingToken]);\n\n  const stakingAmountEquet = useMemo(() => {\n    return new BigNumber(stakingAmount).multipliedBy(stakingTokenPrice ?? 0).toNumber();\n  }, [rewardTokenPrice, stakingAmount]);\n\n  const pendingReward = useMemo(() => {\n    if (!rewardToken || !userStakingInfo?.reward) return 0;\n    return parseTokenAmount(userStakingInfo.reward, rewardToken.decimals).toNumber();\n  }, [userStakingInfo, rewardToken]);\n\n  const pendingRewardEquet = useMemo(() => {\n    return new BigNumber(pendingReward).multipliedBy(rewardTokenPrice ?? 0).toNumber();\n  }, [pendingReward, rewardTokenPrice]);\n\n  const walletIsConnected = useConnectorStateConnected();\n\n  return (\n    <Box sx={{ padding: \"24px\" }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Grid container>\n            <Grid item xs={6}>\n              <Box sx={{ marginBottom: \"14px\" }}>\n                <Typography fontSize=\"14px\">\n                  <Trans>APR:</Trans>\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={6}>\n              <Grid container justifyContent=\"flex-end\">\n                {state === STATE.FINISHED ? (\n                  \"--\"\n                ) : (\n                  <CountUp preserveValue end={apr} decimals={2} duration={1} suffix=\"%\" separator=\",\" />\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item container xs={12} direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n          <Grid item container>\n            <Box sx={{ marginBottom: \"14px\" }}>\n              <Typography fontSize=\"14px\">\n                <Trans>{pool?.rewardTokenSymbol} Earned</Trans>\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid\n            item\n            container\n            direction=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n            wrap=\"nowrap\"\n            spacing={2}\n          >\n            <Grid item xs={9}>\n              <Box>\n                <CountUp\n                  style={{ fontSize: 24 }}\n                  preserveValue\n                  end={pendingReward}\n                  decimals={4}\n                  duration={1}\n                  separator=\",\"\n                />\n              </Box>\n              <Box>\n                <CountUp\n                  style={{ fontSize: 14 }}\n                  preserveValue\n                  end={pendingRewardEquet}\n                  decimals={2}\n                  duration={1}\n                  separator=\",\"\n                  prefix=\"~$\"\n                />\n              </Box>\n            </Grid>\n            <Grid item>\n              <Harvest rewardToken={rewardToken} reward={pendingReward} pool={pool} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Box sx={{ marginBottom: \"14px\" }}>\n            <Typography fontSize=\"14px\">\n              <Trans>Your Stake:</Trans>\n            </Typography>\n          </Box>\n          <Grid>\n            <Grid container>\n              <Grid item xs={6}>\n                <Box>\n                  <CountUp\n                    style={{ fontSize: 24 }}\n                    preserveValue\n                    end={stakingAmount}\n                    decimals={4}\n                    duration={1}\n                    separator=\",\"\n                  />\n                </Box>\n                <Box>\n                  <CountUp\n                    style={{ fontSize: 14 }}\n                    preserveValue\n                    end={stakingAmountEquet}\n                    decimals={2}\n                    duration={1}\n                    separator=\",\"\n                    prefix=\"~$\"\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={6}>\n                <Grid container justifyContent=\"flex-end\">\n                  {walletIsConnected ? StakingAndClaim : <ConnectWallet />}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, Typography, Grid, Box, CircularProgress } from \"@mui/material\";\nimport { t, Trans } from \"@lingui/macro\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { useTokenBalance } from \"hooks/token/useTokenBalance\";\nimport { Token } from \"@w2e/swap-sdk\";\nimport { parseTokenAmount, numberToString, formatTokenAmount } from \"@w2e/utils\";\nimport BigNumber from \"bignumber.js\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport MaxButton from \"components/MaxButton\";\nimport type { ActorIdentity, StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport { useToken } from \"hooks/useCurrency\";\nimport { Modal, NumberTextField } from \"components/index\";\nimport { isUseTransfer } from \"utils/token\";\n\nexport interface StakingProps {\n  identity: ActorIdentity;\n  token: Token;\n  amount: string;\n  id: string;\n}\n\nexport interface StakingModalProps {\n  open: boolean;\n  onClose?: () => void;\n  onStakingSuccess?: () => void;\n  pool: StakingPoolControllerPoolInfo;\n  onStaking: (args: StakingProps) => Promise<void>;\n}\n\nexport default function StakingModal({ open, onClose, onStakingSuccess, pool, onStaking }: StakingModalProps) {\n  const principal = useAccountPrincipal();\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState<string | number | undefined>(undefined);\n\n  const { result: _balance } = useTokenBalance(pool.stakingToken.address, principal);\n  const [, token] = useToken(pool.stakingToken.address);\n  const balance = parseTokenAmount(String(_balance ?? 0), token?.decimals);\n\n  const handleSubmit = async (identity: ActorIdentity) => {\n    setLoading(true);\n\n    if (!identity || loading || !token || !principal || !amount) return;\n\n    await onStaking({\n      identity,\n      token,\n      amount: numberToString(formatTokenAmount(amount, token.decimals)),\n      id: pool.canisterId,\n    });\n\n    setLoading(false);\n\n    if (onStakingSuccess) onStakingSuccess();\n    if (onClose) onClose();\n  };\n\n  let errorMessage = \"\";\n  if (amount && balance && balance.isLessThan(new BigNumber(amount))) errorMessage = t`Insufficient balance`;\n  if (amount && token && !parseTokenAmount(token.transFee, token.decimals).isLessThan(amount))\n    errorMessage = t`Amount must be greater than trans fee`;\n  if (!amount || new BigNumber(amount).isEqualTo(0)) errorMessage = t`Enter an amount`;\n  if (\n    amount &&\n    balance &&\n    token &&\n    isUseTransfer(token) &&\n    !formatTokenAmount(amount, token.decimals).isGreaterThan(token.transFee)\n  )\n    errorMessage = t`Amount must be greater than trans fee`;\n\n  const handleMax = () => {\n    if (balance && token) {\n      if (!balance.isLessThan(parseTokenAmount(token.transFee, token.decimals).multipliedBy(3))) {\n        setAmount(balance.minus(parseTokenAmount(token.transFee, token.decimals).multipliedBy(3)).toNumber());\n      } else {\n        setAmount(balance.toNumber());\n      }\n    }\n  };\n\n  return (\n    <Modal open={open} onClose={onClose} title={t`Staking`}>\n      <Grid>\n        <NumberTextField\n          id=\"reward\"\n          name=\"reward\"\n          type=\"text\"\n          style={{ marginBottom: 6 }}\n          value={amount}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => setAmount(event.target.value)}\n          defaultValue={amount}\n          fullWidth\n          autoComplete=\"reward\"\n          numericProps={{\n            decimalScale: Number(token?.decimals ?? 8),\n            allowNegative: false,\n            thousandSeparator: true,\n          }}\n        />\n\n        <Grid container alignItems=\"center\" sx={{ margin: \"10px 0\" }}>\n          <Typography>\n            <Trans>Balance</Trans>: {balance?.toFormat()} {pool.stakingTokenSymbol}\n          </Typography>\n\n          <MaxButton\n            sx={{\n              marginLeft: \"6px\",\n            }}\n            onClick={handleMax}\n          />\n        </Grid>\n\n        <Box mt={2}>\n          <Identity onSubmit={handleSubmit}>\n            {({ submit }: CallbackProps) => (\n              <Button\n                disabled={loading || !new BigNumber(String(balance)).toNumber() || !!errorMessage}\n                variant=\"contained\"\n                fullWidth\n                onClick={submit}\n                size=\"large\"\n                startIcon={loading ? <CircularProgress size={22} color=\"inherit\" /> : null}\n              >\n                {errorMessage || t`Confirm`}\n              </Button>\n            )}\n          </Identity>\n        </Box>\n      </Grid>\n    </Modal>\n  );\n}\n","import { useAccountPrincipal } from \"store/auth/hooks\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport { useStakingToken } from \"hooks/staking-token\";\nimport { useLoadingTip } from \"hooks/useTips\";\nimport { StepViewButton } from \"components/index\";\nimport StakingModal, { StakingProps } from \"components/staking-token/StakingModal\";\n\nexport interface StakingModalProps {\n  open: boolean;\n  onClose?: () => void;\n  onStakingSuccess?: () => void;\n  pool: StakingPoolControllerPoolInfo | undefined;\n}\n\nexport default function V2StakingModal({ open, onClose, onStakingSuccess, pool }: StakingModalProps) {\n  const principal = useAccountPrincipal();\n  const staking = useStakingToken();\n  const [openLoadingTip, closeLoadingTip] = useLoadingTip();\n\n  const handleStaking = async ({ identity, amount, token }: StakingProps) => {\n    if (!identity || !token || !principal || !amount || !pool) return;\n\n    const { call, key } = staking({\n      token,\n      amount,\n      poolId: pool.canisterId,\n    });\n\n    const loadingTipKey = openLoadingTip(`Staking ${token.symbol}`, {\n      extraContent: <StepViewButton step={key} />,\n    });\n\n    const result = await call();\n\n    if (!result) {\n      closeLoadingTip(loadingTipKey);\n      return;\n    }\n\n    closeLoadingTip(loadingTipKey);\n  };\n\n  return pool ? (\n    <StakingModal\n      open={open}\n      onClose={onClose}\n      onStakingSuccess={onStakingSuccess}\n      onStaking={handleStaking}\n      pool={pool}\n    />\n  ) : null;\n}\n","import { useTips, MessageTypes } from \"hooks/useTips\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { stakingV1TokenDeposit } from \"@w2e/hooks\";\nimport { useApprove } from \"hooks/token/useApprove\";\nimport { getLocaleMessage } from \"locales/services\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport StakingModal, { StakingProps } from \"components/staking-token/StakingModal\";\n\nexport interface StakingModalProps {\n  open: boolean;\n  onClose?: () => void;\n  onStakingSuccess?: () => void;\n  pool: StakingPoolControllerPoolInfo | undefined;\n}\n\nexport default function V1StakingModal({ open, onClose, onStakingSuccess, pool }: StakingModalProps) {\n  const [openTip] = useTips();\n\n  const principal = useAccountPrincipal();\n  const approve = useApprove();\n\n  const handleStaking = async ({ identity, amount }: StakingProps) => {\n    if (!pool) return;\n\n    const { status, message } = await approve({\n      canisterId: pool.stakingToken.address,\n      spender: pool.canisterId,\n      value: BigInt(amount),\n      account: principal,\n    });\n\n    if (status === \"ok\") {\n      const { status, message } = await stakingV1TokenDeposit(pool.canisterId, identity, BigInt(amount));\n      openTip(getLocaleMessage(message), status);\n      if (onStakingSuccess) onStakingSuccess();\n      if (onClose) onClose();\n    } else {\n      openTip(getLocaleMessage(message), MessageTypes.error);\n    }\n  };\n\n  return pool ? (\n    <StakingModal\n      open={open}\n      onClose={onClose}\n      onStakingSuccess={onStakingSuccess}\n      pool={pool}\n      onStaking={handleStaking}\n    />\n  ) : null;\n}\n","import React, { useMemo, useState } from \"react\";\nimport { Button, Typography, Grid, Box, CircularProgress } from \"@mui/material\";\nimport { t, Trans } from \"@lingui/macro\";\nimport { Modal, NumberTextField } from \"components/index\";\nimport { BigNumber, parseTokenAmount, formatTokenAmount } from \"@w2e/utils\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport MaxButton from \"components/MaxButton\";\nimport { Identity as CallIdentity } from \"types/global\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { withdraw, useUserStakingInfo } from \"hooks/staking-token/index\";\nimport { useTips } from \"hooks/useTips\";\nimport { useAccount } from \"store/global/hooks\";\nimport { getLocaleMessage } from \"locales/services\";\n\nexport interface ClaimModalProps {\n  open: boolean;\n  onClose?: () => void;\n  pool: StakingPoolControllerPoolInfo;\n  onStakingSuccess?: () => void;\n}\n\nexport default function ClaimModal({ open, onClose, pool, onStakingSuccess }: ClaimModalProps) {\n  const account = useAccount();\n  const [openTip] = useTips();\n\n  const [userInfo] = useUserStakingInfo(pool.canisterId, pool.version, account);\n\n  const userStakingAmount = useMemo(() => userInfo?.amount, [userInfo]);\n\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState<string | number | undefined>(undefined);\n\n  const { result: token } = useTokenInfo(pool.rewardToken.address);\n\n  const handleSubmit = async (identity: CallIdentity) => {\n    if (loading || !amount || !token) return;\n    setLoading(true);\n\n    const { status, message } = await withdraw(\n      pool.canisterId,\n      BigInt(formatTokenAmount(amount, token?.decimals).toString()),\n      pool.version,\n      identity,\n    );\n\n    openTip(getLocaleMessage(message), status);\n\n    if (onStakingSuccess) onStakingSuccess();\n    if (onClose) onClose();\n\n    setLoading(false);\n  };\n\n  let errorMessage = \"\";\n  if (amount && formatTokenAmount(amount, token?.decimals).isGreaterThan(new BigNumber(String(userStakingAmount ?? 0))))\n    errorMessage = t`Insufficient balance`;\n  if (!amount || new BigNumber(amount).isEqualTo(0)) errorMessage = t`Enter an amount`;\n\n  const tokenAmount = parseTokenAmount(String(userStakingAmount ?? 0), token?.decimals);\n\n  const handleMax = () => {\n    if (tokenAmount) {\n      setAmount(tokenAmount.toNumber());\n    }\n  };\n\n  return (\n    <Modal open={open} onClose={onClose} title={t`Withdraw`}>\n      <Grid>\n        <NumberTextField\n          id=\"reward\"\n          name=\"reward\"\n          type=\"text\"\n          style={{ marginBottom: 6 }}\n          value={amount}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => setAmount(event.target.value)}\n          fullWidth\n          autoComplete=\"reward\"\n          numericProps={{\n            decimalScale: Number(token?.decimals ?? 8),\n            allowNegative: false,\n            thousandSeparator: true,\n          }}\n        />\n\n        <Grid container alignItems=\"center\" sx={{ margin: \"10px 0\" }}>\n          <Typography>\n            <Trans>Staked</Trans>: {tokenAmount.toFormat()} {pool.stakingTokenSymbol}\n          </Typography>\n\n          <MaxButton\n            sx={{\n              marginLeft: \"6px\",\n            }}\n            onClick={handleMax}\n          />\n        </Grid>\n\n        <Box mt={2}>\n          <Identity onSubmit={handleSubmit}>\n            {({ submit }: CallbackProps) => (\n              <Button\n                disabled={loading || !Number(userStakingAmount ?? 0) || !!errorMessage}\n                variant=\"contained\"\n                fullWidth\n                type=\"button\"\n                onClick={submit}\n                color=\"primary\"\n                size=\"large\"\n                startIcon={loading ? <CircularProgress size={22} color=\"inherit\" /> : null}\n              >\n                {errorMessage || t`Confirm`}\n              </Button>\n            )}\n          </Identity>\n        </Box>\n      </Grid>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { Grid, Button } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport BigNumber from \"bignumber.js\";\nimport { Theme } from \"@mui/material/styles\";\nimport { STATE, UserStakingInfo } from \"types/staking-token\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport V2StakingModal from \"./V2StakingModal\";\nimport V1StakingModal from \"./V1StakingModal\";\nimport ClaimModal from \"./ClaimModal\";\n\nconst useStyle = makeStyles((theme: Theme) => ({\n  button: {\n    minWidth: \"28px\",\n    width: \"28px\",\n    height: \"28px\",\n    lineHeight: \"100%\",\n    background: \"#29314F\",\n    borderRadius: \"8px\",\n    fontSize: \"28px\",\n    fontWeight: \"normal\",\n    color: theme.palette.mode === \"dark\" ? theme.colors.darkTextSecondary : theme.colors.lightPrimaryMain,\n    \"&.Mui-disabled\": {\n      color: \"#666\",\n    },\n  },\n}));\n\nexport interface OptionStakingProps {\n  pool: StakingPoolControllerPoolInfo | undefined;\n  userStakingInfo?: UserStakingInfo;\n  onStakingSuccess?: () => void;\n  state: STATE;\n}\n\nexport default function OptionStaking({ pool, userStakingInfo, onStakingSuccess, state }: OptionStakingProps) {\n  const [openStakingModal, setOpenStakingModal] = React.useState(false);\n  const [modalType, setOpenModalType] = React.useState<\"Deposit\" | \"Withdraw\">(\"Deposit\");\n\n  const classes = useStyle();\n\n  return (\n    <Grid container direction=\"row\" spacing={3} justifyContent=\"flex-end\">\n      <Grid item>\n        <Button\n          disabled={!new BigNumber(Number(userStakingInfo?.amount ?? 0)).isGreaterThan(0)}\n          className={classes.button}\n          onClick={() => {\n            setOpenModalType(\"Withdraw\");\n            setOpenStakingModal(true);\n          }}\n        >\n          -\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button\n          disabled={state !== STATE.LIVE}\n          className={classes.button}\n          onClick={() => {\n            setOpenModalType(\"Deposit\");\n            setOpenStakingModal(true);\n          }}\n        >\n          +\n        </Button>\n      </Grid>\n      {openStakingModal &&\n        (modalType === \"Deposit\" ? (\n          pool?.version === \"1.0\" ? (\n            <V1StakingModal\n              open={openStakingModal}\n              onClose={() => setOpenStakingModal(false)}\n              onStakingSuccess={onStakingSuccess}\n              pool={pool}\n            />\n          ) : (\n            <V2StakingModal\n              open={openStakingModal}\n              onClose={() => setOpenStakingModal(false)}\n              onStakingSuccess={onStakingSuccess}\n              pool={pool}\n            />\n          )\n        ) : pool ? (\n          <ClaimModal\n            open={openStakingModal}\n            onClose={() => setOpenStakingModal(false)}\n            onStakingSuccess={onStakingSuccess}\n            pool={pool}\n          />\n        ) : null)}\n    </Grid>\n  );\n}\n","import { useEffect } from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport { useAccount } from \"store/global/hooks\";\nimport { useTheme } from \"@mui/styles\";\nimport { useUSDPrice } from \"hooks/useUSDPrice\";\nimport { useToken } from \"hooks/useCurrency\";\nimport { Theme } from \"@mui/material/styles\";\nimport { STATE } from \"types/staking-token\";\nimport upperFirst from \"lodash/upperFirst\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\nimport PoolDetails from \"components/staking-token/PoolDetails\";\nimport UserStaking from \"components/staking-token/UserStaking\";\nimport StakingAndClaim from \"components/staking-token/StakingAndClaim\";\nimport { useStakingPoolData, useUserStakingInfo } from \"hooks/staking-token/index\";\nimport { Token } from \"@w2e/swap-sdk\";\nimport { TokenImage } from \"@w2e/ui\";\n\nexport interface PoolInfoProps {\n  pool: StakingPoolControllerPoolInfo | undefined | null;\n  state: STATE;\n  rewardToken: Token | undefined;\n  stakingToken: Token | undefined;\n}\n\nfunction PoolInfo({ pool, rewardToken, state, stakingToken }: PoolInfoProps) {\n  const theme = useTheme() as Theme;\n\n  return (\n    <Box sx={{ height: \"196px\", background: \"rgba(101, 80, 186, 0.18)\", borderRadius: \"4px 4px 0 0\" }}>\n      <Typography\n        fontSize=\"14px\"\n        sx={{\n          display: \"inline-block\",\n          minWidth: \"77px\",\n          height: \"30px\",\n          padding: \"6px\",\n          background: \"#654DA9\",\n          borderRadius: \"4px 0 4px 0\",\n          textAlign: \"center\",\n          border: \"1px solid #654DA9\",\n          color: theme.palette.mode === \"dark\" ? theme.colors.darkTextPrimary : theme.colors.primaryMain,\n        }}\n        component=\"span\"\n      >\n        {upperFirst(state.toLocaleLowerCase())}\n      </Typography>\n\n      <Box sx={{ margin: \"23px 0 26px 0\", display: \"flex\", justifyContent: \"center\" }}>\n        <Box sx={{ width: \"85px\", height: \"85px\", position: \"relative\" }}>\n          <TokenImage logo={rewardToken?.logo} size=\"85px\" />\n\n          <Box\n            sx={{\n              width: \"44px\",\n              height: \"44px\",\n              position: \"absolute\",\n              bottom: \"-10px\",\n              right: \"-3px\",\n              zIndex: \"2\",\n            }}\n          >\n            <TokenImage logo={stakingToken?.logo} size=\"44px\" />\n          </Box>\n        </Box>\n      </Box>\n\n      <Typography color=\"text.primary\" align=\"center\">\n        Stake {pool?.stakingTokenSymbol} to earn {pool?.rewardTokenSymbol}\n      </Typography>\n    </Box>\n  );\n}\n\nexport interface StakingPoolProps {\n  stakedOnly: boolean;\n  pool: StakingPoolControllerPoolInfo | undefined;\n  state: STATE;\n}\n\nexport default function StakingPool({ stakedOnly, pool, state }: StakingPoolProps) {\n  const account = useAccount();\n  const theme = useTheme() as Theme;\n  const [poolData, updatePoolData] = useStakingPoolData(pool?.canisterId, pool?.version);\n  const [userStakingInfo, updateUserStakingInfo] = useUserStakingInfo(pool?.canisterId, pool?.version, account);\n\n  const [, rewardToken] = useToken(pool?.rewardToken.address);\n  const [, stakingToken] = useToken(pool?.stakingToken.address);\n\n  const rewardTokenPrice = useUSDPrice(rewardToken);\n  const stakingTokenPrice = useUSDPrice(stakingToken);\n\n  useEffect(() => {\n    let timer: number | undefined = window.setInterval(() => {\n      updateUserStakingInfo();\n      updatePoolData();\n    }, 5000);\n\n    return () => {\n      window.clearInterval(timer);\n      timer = undefined;\n    };\n  }, []);\n\n  const resetData = () => {\n    if (pool?.canisterId) {\n      updateUserStakingInfo();\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        width: \"384px\",\n        borderRadius: \"12px\",\n        overflow: \"hidden\",\n        height: \"fit-content\",\n        display: !stakedOnly ? \"block\" : userStakingInfo?.amount ? \"block\" : \"none\",\n        \"@media (max-width: 520px)\": {\n          width: \"340px\",\n        },\n      }}\n      className=\"staking-token-pool-item\"\n    >\n      <Box sx={{ background: theme.palette.background.level1 }}>\n        <PoolInfo state={state} pool={pool} rewardToken={rewardToken} stakingToken={stakingToken} />\n\n        <UserStaking\n          state={state}\n          pool={pool}\n          poolData={poolData}\n          rewardToken={rewardToken}\n          stakingToken={stakingToken}\n          stakingTokenPrice={stakingTokenPrice}\n          rewardTokenPrice={rewardTokenPrice}\n          userStakingInfo={userStakingInfo}\n          StakingAndClaim={\n            <StakingAndClaim userStakingInfo={userStakingInfo} onStakingSuccess={resetData} pool={pool} state={state} />\n          }\n        />\n      </Box>\n\n      <PoolDetails\n        pool={pool}\n        state={state}\n        poolData={poolData}\n        rewardToken={rewardToken}\n        stakingToken={stakingToken}\n        stakingTokenPrice={stakingTokenPrice}\n        rewardTokenPrice={rewardTokenPrice}\n      />\n    </Box>\n  );\n}\n","import { useEffect } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { Box, Grid, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { gridSpacing } from \"constants/theme\";\nimport { useStakingGlobalData } from \"hooks/staking-token/index\";\nimport GlobalBg1 from \"assets/images/staking/1.png\";\nimport GlobalBg2 from \"assets/images/staking/2.png\";\nimport GlobalBg3 from \"assets/images/staking/3.png\";\nimport { Trans } from \"@lingui/macro\";\nimport { useICPPrice } from \"store/global/hooks\";\nimport { formatDollarAmount } from \"@w2e/utils\";\n\nconst useStyle = makeStyles(() => ({\n  item: {\n    height: \"145px\",\n    background: \"rgba(80, 95, 186, 0.34)\",\n    border: \"1px solid rgba(255, 255, 255, 0.04)\",\n    borderRadius: \"12px\",\n    padding: \"29px 25px\",\n    \"&.tvl\": {\n      background: `url(${GlobalBg1}) no-repeat center / cover`,\n    },\n    \"&.transactions\": {\n      background: `url(${GlobalBg2}) no-repeat center / cover`,\n    },\n    \"&.reward\": {\n      background: `url(${GlobalBg3}) no-repeat center / cover`,\n    },\n  },\n  itemTitle: {\n    paddingBottom: \"18px\",\n  },\n}));\n\nexport default function GlobalData() {\n  const ICPPrice = useICPPrice();\n  const classes = useStyle();\n  const [globalData, updateGlobalData] = useStakingGlobalData();\n\n  useEffect(() => {\n    let timer: number | undefined = window.setInterval(() => {\n      updateGlobalData();\n    }, 5000);\n\n    return () => {\n      if (timer !== null) clearInterval(timer);\n      timer = undefined;\n    };\n  }, []);\n\n  return (\n    <Box>\n      <Grid container spacing={gridSpacing}>\n        <Grid item xs={12} md={6}>\n          <Grid container className={`tvl ${classes.item}`} direction=\"column\" justifyContent=\"center\">\n            <Grid item className={classes.itemTitle}>\n              <Grid container>\n                <Typography color=\"text.primary\" fontSize=\"14px\">\n                  <Trans>TVL</Trans>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Typography color=\"text.primary\" fontSize=\"24px\">\n                {formatDollarAmount(new BigNumber(globalData?.stakingAmount ?? 0).times(ICPPrice ?? 0).toNumber())}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Grid container className={`${classes.item} reward`} direction=\"column\" justifyContent=\"center\">\n            <Grid item className={classes.itemTitle}>\n              <Grid container>\n                <Typography color=\"text.primary\" fontSize=\"14px\" sx={{ display: \"inline-block\" }}>\n                  <Trans>Total Earned Value</Trans>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Typography color=\"text.primary\" fontSize=\"24px\">\n                {formatDollarAmount(new BigNumber(globalData?.rewardAmount ?? 0).times(ICPPrice ?? 0).toNumber())}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import React, { useMemo, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Grid, Box, Typography } from \"@mui/material\";\nimport { NoData, MainCard, StaticLoading, TextButton } from \"components/index\";\nimport Switch from \"components/switch\";\nimport { Trans, t } from \"@lingui/macro\";\nimport { useStakingTokenPools, useStakingPoolInfoFromController, useParsedQueryString } from \"@w2e/hooks\";\nimport { STATE } from \"types/staking-token\";\nimport { getStakingTokenPoolState } from \"utils/staking\";\nimport UnusedTokens from \"./components/UnusedTokens\";\nimport Pool from \"./components/Pool\";\nimport GlobalData from \"./components/GlobalData\";\n\nexport type Page = {\n  name: string;\n  key: STATE;\n};\n\nexport const Pages: Page[] = [\n  {\n    key: STATE.LIVE,\n    name: t`Live`,\n  },\n  {\n    key: STATE.UPCOMING,\n    name: t`Unstarted`,\n  },\n  {\n    key: STATE.FINISHED,\n    name: t`Finished`,\n  },\n];\n\nexport const getStateValue = (state: STATE) => {\n  switch (state) {\n    case STATE.LIVE:\n      return BigInt(2);\n    case STATE.UPCOMING:\n      return BigInt(1);\n    case STATE.FINISHED:\n      return BigInt(3);\n    default:\n      return undefined;\n  }\n};\n\nfunction SinglePool() {\n  const { poolId } = useParsedQueryString() as { poolId: string };\n\n  const { result: poolInfo } = useStakingPoolInfoFromController(poolId);\n\n  const state = getStakingTokenPoolState(poolInfo);\n\n  return (\n    <>\n      <MainCard>\n        <Box\n          sx={{\n            position: \"relative\",\n            minHeight: \"440px\",\n          }}\n        >\n          <Box sx={{ display: \"grid\", justifyContent: \"center\" }}>\n            <Pool stakedOnly={false} pool={poolInfo} state={state} />\n          </Box>\n        </Box>\n      </MainCard>\n    </>\n  );\n}\n\nfunction Pools() {\n  const history = useHistory();\n\n  const { filter: _filter } = useParsedQueryString() as { filter: string; poolId: string };\n\n  const filter = useMemo(() => {\n    return (_filter ?? STATE.LIVE) as STATE;\n  }, [_filter]);\n\n  const state = useMemo(() => getStateValue((filter ?? STATE.LIVE) as STATE), [filter]);\n\n  const { result, loading } = useStakingTokenPools(state, 0, 100);\n\n  // when filter is FINISHED, sort pools by stakingToken symbol\n  const pools = useMemo(() => {\n    if (result?.content) {\n      if (!!filter && filter === STATE.FINISHED) {\n        return result?.content.sort((a, b) => {\n          if (a.stakingTokenSymbol < b.stakingTokenSymbol) return -1;\n          if (a.stakingTokenSymbol > b.stakingTokenSymbol) return 1;\n          return 0;\n        });\n      }\n\n      return result?.content;\n    }\n\n    return undefined;\n  }, [result, filter]);\n\n  const [stakedOnly, setStakedOnly] = React.useState(false);\n  const [showNoData, setShowNoData] = React.useState(false);\n  const [unused, setUnused] = useState(false);\n\n  const handleStakedOnly = (checked: boolean) => {\n    setStakedOnly(checked);\n\n    if (checked) {\n      const poolItems = document.querySelectorAll(\".staking-token-pool-item\");\n      let showNoData = true;\n\n      setTimeout(() => {\n        poolItems.forEach((item) => {\n          if (item.classList.toString().indexOf(\"block\") !== -1) {\n            showNoData = false;\n          }\n        });\n        setShowNoData(showNoData);\n      }, 50);\n    } else if (pools?.length) {\n      setShowNoData(false);\n    } else {\n      setShowNoData(true);\n    }\n  };\n\n  const handleLoad = (value: Page) => {\n    history.push(`/staking-token?filter=${value.key}`);\n  };\n\n  const handleWithdrawUnusedTokens = () => {\n    setUnused(true);\n  };\n\n  return (\n    <>\n      <MainCard>\n        <Grid container direction=\"row\">\n          <Grid item>\n            <Box sx={{ display: \"flex\", gap: \"0 20px\" }}>\n              {Pages.map((ele) => (\n                <Typography\n                  key={ele.key}\n                  variant=\"h3\"\n                  color={filter === ele.key ? \"textPrimary\" : \"textTertiary\"}\n                  sx={{\n                    cursor: \"pointer\",\n                    textTransform: \"capitalize\",\n                    \"@media (max-width:640px)\": {\n                      fontSize: \"16px\",\n                    },\n                  }}\n                  onClick={() => handleLoad(ele)}\n                >\n                  {ele.name}\n                </Typography>\n              ))}\n            </Box>\n          </Grid>\n          <Grid item alignItems=\"center\" style={{ marginLeft: \"auto\" }}>\n            <Box sx={{ display: \"flex\", alignItems: \"center\", gap: \"0 10px\" }}>\n              <TextButton onClick={handleWithdrawUnusedTokens}>\n                <Trans>Unused tokens</Trans>\n              </TextButton>\n              <Typography component=\"span\">\n                <Trans>Staked only</Trans>\n              </Typography>\n              <Switch checked={stakedOnly} onChange={(event: any) => handleStakedOnly(event.target.checked)} />\n            </Box>\n          </Grid>\n        </Grid>\n\n        <Box\n          sx={{\n            position: \"relative\",\n            minHeight: \"440px\",\n            margin: \"20px 0 0 0\",\n          }}\n        >\n          {!loading ? (\n            <Box\n              sx={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                gap: \"24px 24px\",\n                justifyContent: \"center\",\n              }}\n            >\n              {pools?.map((ele, index) => (\n                <Pool key={`${ele.canisterId}-${index}`} stakedOnly={stakedOnly} pool={ele} state={filter} />\n              ))}\n            </Box>\n          ) : null}\n          {(showNoData || !pools?.length) && !loading && <NoData />}\n          {loading ? <StaticLoading loading /> : null}\n        </Box>\n      </MainCard>\n\n      {unused ? <UnusedTokens open={unused} onClose={() => setUnused(false)} /> : null}\n    </>\n  );\n}\n\nexport default function StakingTokens() {\n  const { poolId } = useParsedQueryString() as { poolId: string };\n\n  return (\n    <>\n      <GlobalData />\n      <Box mt=\"16px\">{poolId ? <SinglePool /> : <Pools />}</Box>\n    </>\n  );\n}\n","import { STATE } from \"types/staking-token\";\nimport type { StakingPoolControllerPoolInfo } from \"@w2e/types\";\n\nexport enum POOL_STATE {\n  LIVE = \"Live\",\n  CLOSURE = \"Closure\",\n  UNSTARTED = \"Unstarted\",\n  FINISHED = \"Finished\",\n}\n\nexport function getStakingTokenPoolState(pool: StakingPoolControllerPoolInfo | undefined | null): STATE {\n  if (!pool) return STATE.LIVE;\n\n  const now = BigInt(new Date().getTime());\n  const end = pool.bonusEndTime * BigInt(1000);\n  const start = pool.startTime * BigInt(1000);\n\n  if (now < start) return STATE.UPCOMING;\n  if (now > end) return STATE.FINISHED;\n\n  return STATE.LIVE;\n}\n","import dayjs from \"dayjs\";\nimport { SECONDS_IN_DAY } from \"@w2e/constants\";\n\nexport function nanosecond2Millisecond(time: string | number | bigint) {\n  return Number(BigInt(time) / BigInt(1000000));\n}\n\nexport function millisecond2Nanosecond(time: string | number | bigint) {\n  return Number(BigInt(time) * BigInt(1000000));\n}\n\nexport function timestampFormat(timestamp: bigint | string | number, format = \"YYYY-MM-DD HH:mm:ss\"): string {\n  if (!timestamp) return \"\";\n\n  const newTimestamp = Number(String(timestamp).substr(0, 13));\n  return dayjs(newTimestamp).format(format);\n}\n\nexport const secondsToDays = (seconds: number): number => seconds / SECONDS_IN_DAY;\nexport const daysToSeconds = (days: number): number => Math.round(days * SECONDS_IN_DAY);\n"],"names":["MaxButton","props","_props$sx","theme","useTheme","_jsx","Typography","sx","padding","cursor","borderRadius","backgroundColor","colors","secondaryMain","color","fontSize","children","Trans","id","STATE","createContext","CheckboxGroup","_ref","defaultChecked","onChange","checked","setChecked","useState","useEffect","length","CheckboxGroupContext","Provider","value","UncheckedIcon","width","height","viewBox","fill","xmlns","cx","cy","r","stroke","strokeWidth","CheckedIcon","_jsxs","d","Checkbox","radio","useContext","isCheck","includes","Box","component","onClick","handleToggle","_checked","splice","indexOf","BalanceItem","token","balance","name","border","pool","Grid","container","alignItems","borderBottom","Avatar","src","logo","margin","parseTokenAmount","decimals","toFormat","item","xs","justifyContent","concat","canisterId","BalancesItem","_ref2","end","result","token0","useTokenInfo","stakingToken","address","symbol","toString","WithdrawUnusedTokens","_ref3","open","onClose","keys","setKeys","reload","setReloadBalance","loading","balances","useUserUnusedTokens","openTip","closeTip","useTips","_balances","useMemo","filter","BigInt","SwapModal","title","i18n","_","LoadingRow","_Fragment","background","palette","level3","level4","maxHeight","overflow","map","index","mt","Identity","onSubmit","async","identity","_ref4","closeLoading","loadingKey","MessageTypes","calls","i","split","push","stakingTokenClaim","then","_result$message","status","ResultStatus","OK","stakingTokenSymbol","success","message","error","Promise","all","fullScreenLoading","_ref5","submit","Button","variant","fullWidth","size","disabled","startIcon","CircularProgress","NoData","CountdownBox","startTime","endTime","nowTime","parseInt","String","Date","now","expand","date","Countdown","StakingPoolDetails","_poolData$lastRewardT","_poolData$bonusEndTim","state","poolData","rewardToken","rewardTokenPrice","stakingTokenPrice","expanded","setExpanded","React","poolTokenBalance","useTokenBalance","poolUSDValue","isNaN","toNumber","stakingTokenDecimals","multipliedBy","stakingTokenPoolInfo","useStakingTokenPool","totalRewardDeposit","rewardDebt","totalRewardUSDValue","BigNumber","cycles","usePoolCycles","version","level1","handleExpandClick","fontWeight","lineHeight","textAlign","Collapse","in","timeout","unmountOnExit","style","borderTop","display","gap","direction","handleGetToken","WRAPPED_ICP","window","ICP","ICRocksLoadIcon","position","top","marginLeft","rewardTokenSymbol","rewardPerTime","BONUS_MULTIPLIER","timestampFormat","Number","UPCOMING","lastRewardTime","bonusEndTime","Link","href","creator","target","shorten","getExplorerPrincipalLink","cycleValueFormat","INFO_URL","ClaimReward","reward","walletIsConnected","useConnectorStateConnected","setLoading","noRewardToken","transFee","isGreaterThan","harvest","TIP_SUCCESS","getLocaleMessage","TIP_ERROR","ConnectWallet","whiteSpace","UserStaking","StakingAndClaim","userStakingInfo","ICPPrice","useICPPrice","apr","poolInfoPerSecond","totalDeposit","a","dividedBy","isFinite","stakingAmount","_userStakingInfo$amou","amount","stakingAmountEquet","pendingReward","pendingRewardEquet","spacing","marginBottom","FINISHED","CountUp","preserveValue","duration","suffix","separator","values","0","wrap","prefix","Harvest","StakingModal","_token$decimals","onStakingSuccess","onStaking","principal","useAccountPrincipal","setAmount","undefined","_balance","useToken","errorMessage","isLessThan","isEqualTo","isUseTransfer","formatTokenAmount","Modal","NumberTextField","type","event","defaultValue","autoComplete","numericProps","decimalScale","allowNegative","thousandSeparator","handleMax","minus","numberToString","V2StakingModal","staking","useStakingToken","openLoadingTip","closeLoadingTip","useLoadingTip","call","key","poolId","loadingTipKey","extraContent","StepViewButton","step","V1StakingModal","approve","useApprove","spender","account","stakingV1TokenDeposit","ClaimModal","useAccount","userInfo","useUserStakingInfo","userStakingAmount","tokenAmount","withdraw","useStyle","makeStyles","button","minWidth","mode","darkTextSecondary","lightPrimaryMain","OptionStaking","openStakingModal","setOpenStakingModal","modalType","setOpenModalType","classes","className","LIVE","PoolInfo","darkTextPrimary","primaryMain","upperFirst","toLocaleLowerCase","TokenImage","bottom","right","zIndex","align","StakingPool","stakedOnly","updatePoolData","useStakingPoolData","updateUserStakingInfo","useUSDPrice","timer","setInterval","clearInterval","resetData","PoolDetails","GlobalBg1","GlobalBg2","GlobalBg3","itemTitle","paddingBottom","GlobalData","_globalData$stakingAm","_globalData$rewardAmo","globalData","updateGlobalData","useStakingGlobalData","gridSpacing","md","formatDollarAmount","times","rewardAmount","Pages","getStateValue","SinglePool","useParsedQueryString","poolInfo","useStakingPoolInfoFromController","getTime","getStakingTokenPoolState","MainCard","minHeight","Pool","Pools","history","useHistory","_filter","useStakingTokenPools","pools","content","sort","b","setStakedOnly","showNoData","setShowNoData","unused","setUnused","ele","textTransform","handleLoad","TextButton","handleWithdrawUnusedTokens","Switch","poolItems","document","querySelectorAll","setTimeout","forEach","classList","handleStakedOnly","flexWrap","StaticLoading","UnusedTokens","StakingTokens","nanosecond2Millisecond","time","millisecond2Nanosecond","timestamp","format","arguments","newTimestamp","substr","dayjs"],"sourceRoot":""}