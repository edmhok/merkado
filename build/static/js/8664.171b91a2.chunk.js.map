{"version":3,"file":"static/js/8664.171b91a2.chunk.js","mappings":"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","sources":["components/ConnectWallet.tsx","views/token-claim/index.tsx"],"sourcesContent":["import { Grid, Box, Typography, Button } from \"@mui/material\";\nimport { MainCard } from \"components/index\";\nimport NoData from \"components/no-data\";\nimport { useWalletConnectorManager } from \"store/auth/hooks\";\nimport { Trans } from \"@lingui/macro\";\n\nexport default function ConnectWallet() {\n  const [, walletManager] = useWalletConnectorManager();\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Box sx={{ maxWidth: \"1400px\", width: \"100%\" }}>\n        <MainCard level={3}>\n          <Grid container alignItems=\"center\" flexDirection=\"column\" sx={{ height: \"250px\" }}>\n            <NoData />\n            <Typography color=\"text.primary\">\n              <Trans>Connect wallet to view</Trans>\n            </Typography>\n            <Button\n              variant=\"contained\"\n              onClick={() => walletManager(true)}\n              sx={{ width: \"100%\", maxWidth: \"522px\", marginTop: \"23px\" }}\n              size=\"large\"\n            >\n              <Trans>Connect Wallet</Trans>\n            </Button>\n          </Grid>\n        </MainCard>\n      </Box>\n    </Grid>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Grid, Box, Typography, Avatar, CircularProgress, Button } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { t, Trans } from \"@lingui/macro\";\nimport { Theme } from \"@mui/material/styles\";\nimport { TextButton, Wrapper, LoadingRow, ViewMore, NoData } from \"components/index\";\nimport { useUserClaimEvents, getUserClaimEvents, claimToken, useUserClaimEventTransactions } from \"@w2e/hooks\";\nimport { type ActorIdentity, ResultStatus, type ClaimEventInfo } from \"@w2e/types\";\nimport { useAccountPrincipalString, useConnectorStateConnected } from \"store/auth/hooks\";\nimport { pageArgsFormat, parseTokenAmount } from \"@w2e/utils\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport Identity, { SubmitLoadingProps, CallbackProps } from \"components/Identity\";\nimport { useTips, MessageTypes } from \"hooks/useTips\";\nimport { getLocaleMessage } from \"locales/services\";\nimport ConnectWallet from \"components/ConnectWallet\";\n\nexport function TokenClaimItem({ ele }: { ele: ClaimEventInfo }) {\n  const theme = useTheme() as Theme;\n  const { result: tokenInfo } = useTokenInfo(ele.tokenCid);\n\n  const [manuallyClaimed, setManuallyClaimed] = useState(false);\n\n  const [openTip, closeTip] = useTips();\n\n  const handleClaim = async (identity: ActorIdentity, { loading, closeLoading }: SubmitLoadingProps) => {\n    if (!identity || loading) return;\n\n    const loadingKey = openTip(t`Claiming ${ele.claimEventName}`, MessageTypes.loading);\n\n    const { status, message } = await claimToken(ele.claimEventId, ele.claimCanisterId, identity);\n\n    if (status === ResultStatus.OK) {\n      setManuallyClaimed(true);\n    }\n\n    openTip(status === ResultStatus.OK ? t`Claimed successfully` : getLocaleMessage(message), status);\n\n    closeTip(loadingKey);\n\n    closeLoading();\n  };\n\n  const principalString = useAccountPrincipalString();\n\n  const { result: userClaimTransactions, loading: claimTransactionLoading } = useUserClaimEventTransactions(\n    principalString,\n    ele.claimEventId,\n    undefined,\n    0,\n    10,\n  );\n\n  const userClaimAmount = (userClaimTransactions?.content ?? []).filter(\n    (transaction) => transaction.claimAmount > BigInt(0),\n  )[0]?.claimAmount;\n\n  const claimed =\n    (userClaimTransactions?.content ?? []).filter((transaction) => transaction.claimStatus === BigInt(1)).length > 0;\n\n  return (\n    <Box\n      sx={{\n        background: theme.palette.background.level1,\n        borderRadius: \"12px\",\n        padding: \"24px\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Box>\n        <Typography>{ele.claimEventName}</Typography>\n        <Box sx={{ margin: \"8px 0 0 0\", display: \"flex\", alignItems: \"center\" }}>\n          <Avatar src={tokenInfo?.logo ?? \"\"} sx={{ width: \"20px\", height: \"20px\" }}>\n            &nbsp;\n          </Avatar>\n          <Typography sx={{ color: \"#fff\", margin: \"0 0 0 8px\", fontSize: \"24px\", fontWeight: 500 }}>\n            {userClaimAmount ? parseTokenAmount(userClaimAmount, tokenInfo?.decimals).toFormat() : \"--\"}\n          </Typography>\n        </Box>\n      </Box>\n      <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n        <Identity onSubmit={handleClaim}>\n          {({ submit, loading }: CallbackProps) => (\n            <Button\n              variant=\"contained\"\n              onClick={submit}\n              disabled={loading || claimed || manuallyClaimed || claimTransactionLoading}\n              startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : null}\n            >\n              {claimTransactionLoading ? (\n                <CircularProgress size={20} color=\"inherit\" />\n              ) : claimed || manuallyClaimed ? (\n                <Trans>Claimed</Trans>\n              ) : (\n                <Trans>Claim</Trans>\n              )}\n            </Button>\n          )}\n        </Identity>\n      </Box>\n    </Box>\n  );\n}\n\nexport default function TokenClaim() {\n  const principalString = useAccountPrincipalString();\n\n  const pageSize = 5;\n\n  const [page, setPage] = useState(1);\n  const [offset] = pageArgsFormat(1, pageSize);\n  const { result: _userClaimEvents, loading } = useUserClaimEvents(principalString, offset, pageSize);\n\n  const [userClaimEvents, setUserClaimEvents] = useState<ClaimEventInfo[]>([]);\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  useEffect(() => {\n    if (_userClaimEvents?.content) {\n      setUserClaimEvents(_userClaimEvents.content);\n    }\n  }, [_userClaimEvents]);\n\n  const handleMore = async () => {\n    if (!principalString) return;\n\n    setPage(page + 1);\n    const [start] = pageArgsFormat(page + 1, pageSize);\n\n    setLoadingMore(true);\n    const _userClaimEvents = await getUserClaimEvents(principalString, start, pageSize);\n\n    if (_userClaimEvents?.content) {\n      setUserClaimEvents([...userClaimEvents, ..._userClaimEvents.content]);\n    }\n\n    setLoadingMore(false);\n  };\n\n  const isConnected = useConnectorStateConnected();\n\n  return (\n    <Wrapper>\n      {isConnected ? (\n        <Box sx={{ paddingTop: \"40px\", maxWidth: \"800px\", width: \"100%\", margin: \" 0 auto\" }}>\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography color=\"text.primary\" fontWeight={500} fontSize=\"24px\">\n              <Trans>Claim Your Tokens</Trans>\n            </Typography>\n            <TextButton sx={{ fontSize: \"16px\", fontWeight: 500 }} to={`/token-claim/transactions/${principalString}`}>\n              <Trans>Your records</Trans> &gt;\n            </TextButton>\n          </Grid>\n\n          <Box mt=\"16px\" sx={{ display: \"grid\", gridTemplateRows: \"1fr\", gap: \"16px 0\" }}>\n            {loading ? (\n              <LoadingRow>\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n              </LoadingRow>\n            ) : (\n              userClaimEvents.map((ele) => {\n                return <TokenClaimItem key={ele.claimEventId} ele={ele} />;\n              })\n            )}\n\n            {!loading && userClaimEvents.length === 0 ? <NoData /> : null}\n\n            {!loading && Number(_userClaimEvents?.totalElements ?? 0) !== userClaimEvents.length ? (\n              <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n                <ViewMore loading={loadingMore} onClick={handleMore} />\n              </Box>\n            ) : null}\n          </Box>\n        </Box>\n      ) : (\n        <ConnectWallet />\n      )}\n    </Wrapper>\n  );\n}\n"],"names":["ConnectWallet","walletManager","useWalletConnectorManager","_jsx","Grid","container","justifyContent","children","Box","sx","maxWidth","width","MainCard","level","_jsxs","alignItems","flexDirection","height","NoData","Typography","color","Trans","id","Button","variant","onClick","marginTop","size","TokenClaimItem","_ref","_filter$","_userClaimTransaction","_userClaimTransaction2","_tokenInfo$logo","ele","theme","useTheme","result","tokenInfo","useTokenInfo","tokenCid","manuallyClaimed","setManuallyClaimed","useState","openTip","closeTip","useTips","principalString","useAccountPrincipalString","userClaimTransactions","loading","claimTransactionLoading","useUserClaimEventTransactions","claimEventId","undefined","userClaimAmount","content","filter","transaction","claimAmount","BigInt","claimed","claimStatus","length","background","palette","level1","borderRadius","padding","display","claimEventName","margin","Avatar","src","logo","fontSize","fontWeight","parseTokenAmount","decimals","toFormat","Identity","onSubmit","async","identity","_ref2","closeLoading","loadingKey","i18n","_","values","0","MessageTypes","status","message","claimToken","claimCanisterId","ResultStatus","OK","getLocaleMessage","_ref3","submit","disabled","startIcon","CircularProgress","TokenClaim","_userClaimEvents$tota","page","setPage","offset","pageArgsFormat","_userClaimEvents","useUserClaimEvents","userClaimEvents","setUserClaimEvents","loadingMore","setLoadingMore","useEffect","isConnected","useConnectorStateConnected","Wrapper","paddingTop","TextButton","to","concat","mt","gridTemplateRows","gap","LoadingRow","map","Number","totalElements","ViewMore","start","getUserClaimEvents"],"sourceRoot":""}