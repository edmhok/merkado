{"version":3,"file":"static/js/892.7aadc7c2.chunk.js","mappings":"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","sources":["assets/images/nft/verify.svg","components/NFT/VerifyNFT.tsx","components/NFT/market/NFTBuyReview.tsx","components/NFT/market/Carousel1.tsx","views/nft/index.tsx"],"sourcesContent":["var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgVerify(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.26589 0.47486C4.43544 0.139713 4.82194 -0.0243476 5.1808 0.0865051L7.70392 0.8659C7.85645 0.913017 8.01985 0.911591 8.17153 0.86182L10.6807 0.0385081C11.0375 -0.0785906 11.4268 0.0786986 11.6022 0.410836L12.8352 2.74607C12.9097 2.88724 13.0263 3.00177 13.1687 3.07383L15.5251 4.26589C15.8603 4.43544 16.0243 4.82194 15.9135 5.1808L15.1341 7.70392C15.087 7.85645 15.0884 8.01985 15.1382 8.17153L15.9615 10.6807C16.0786 11.0375 15.9213 11.4268 15.5892 11.6022L13.2539 12.8352C13.1128 12.9097 12.9982 13.0263 12.9262 13.1687L11.7341 15.5251C11.5646 15.8603 11.1781 16.0243 10.8192 15.9135L8.29608 15.1341C8.14355 15.087 7.98015 15.0884 7.82847 15.1382L5.31934 15.9615C4.96246 16.0786 4.57316 15.9213 4.39779 15.5892L3.16479 13.2539C3.09025 13.1128 2.9737 12.9982 2.83125 12.9262L0.47486 11.7341C0.139713 11.5646 -0.0243478 11.1781 0.0865048 10.8192L0.8659 8.29608C0.913016 8.14355 0.911591 7.98015 0.86182 7.82847L0.0385081 5.31934C-0.0785906 4.96246 0.0786988 4.57316 0.410836 4.39779L2.74607 3.16479C2.88724 3.09025 3.00177 2.9737 3.07383 2.83125L4.26589 0.47486Z\",\n    fill: \"#4954F6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.51172 7.99303L7.34618 9.8275L11.0151 6.61719\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgVerify);\nexport default __webpack_public_path__ + \"static/media/verify.2ec148b8e5850f17ee9fec763f965822.svg\";\nexport { ForwardRef as ReactComponent };","import { Box, Grid, Typography } from \"@mui/material\";\nimport { isICPSwapOfficial } from \"utils/index\";\nimport VerifyImage from \"assets/images/nft/verify.svg\";\nimport { shorten } from \"@w2e/utils\";\n\nexport interface LabelProps {\n  minter?: string;\n  secondaryColor?: boolean;\n  fontSize?: string;\n  textSX?: any;\n}\n\nfunction Label({ minter, secondaryColor, fontSize = \"12px\", textSX }: LabelProps) {\n  const value = isICPSwapOfficial(minter) ? \"ICPSwap\" : minter;\n\n  return (\n    <Typography color=\"text.primary\" fontSize={fontSize} sx={{ ...(textSX ?? {}) }}>\n      By{\" \"}\n      {secondaryColor ? (\n        <Typography color=\"secondary\" fontSize={fontSize} component=\"span\" sx={{ ...(textSX ?? {}) }}>\n          {shorten(value ?? \"\", 3)}\n        </Typography>\n      ) : (\n        shorten(value ?? \"\", 3)\n      )}\n    </Typography>\n  );\n}\n\nexport default function VerifyNFT({\n  minter,\n  sx,\n  justifyContent,\n  secondaryColor,\n  fontSize,\n  textSX,\n}: {\n  minter: string | undefined;\n  justifyContent?: string;\n  sx?: any;\n  secondaryColor?: boolean;\n  fontSize?: string;\n  textSX?: any;\n}) {\n  return isICPSwapOfficial(minter) ? (\n    <Grid container alignItems=\"center\" justifyContent={justifyContent || \"flex-start\"}>\n      <Label fontSize={fontSize} secondaryColor={secondaryColor} minter={minter} textSX={textSX} />\n      <Box\n        sx={{\n          width: \"14px\",\n          height: \"14px\",\n          marginLeft: \"4px\",\n          ...(sx || {}),\n        }}\n      >\n        <img width=\"100%\" height=\"100%\" src={VerifyImage} alt=\"\" />\n      </Box>\n    </Grid>\n  ) : (\n    <Grid container alignItems=\"center\" justifyContent={justifyContent || \"flex-start\"}>\n      <Label fontSize={fontSize} secondaryColor={secondaryColor} minter={minter} textSX={textSX} />\n    </Grid>\n  );\n}\n","import { Grid, Typography, CircularProgress, useTheme, Box } from \"@mui/material\";\nimport Modal from \"components/modal/index\";\nimport { t, Trans } from \"@lingui/macro\";\nimport Identity, { CallbackProps, SubmitLoadingProps } from \"components/Identity\";\nimport { Theme } from \"@mui/material/styles\";\nimport { TradeOrder } from \"types/nft\";\nimport { type NFTTokenMetadata, type ActorIdentity, ResultStatus } from \"@w2e/types\";\nimport { useSuccessTip, useErrorTip } from \"hooks/useTips\";\nimport { useNFTBuyCallback } from \"hooks/nft/trade\";\nimport { useApprove } from \"hooks/token/useApprove\";\nimport {\n  getCanisterId,\n  CANISTER_NAMES,\n  NFTTradeTokenCanisterId,\n  WRAPPED_ICP_TOKEN_INFO,\n  NFTTradeFee,\n} from \"constants/index\";\nimport { parseTokenAmount, numberToString, formatDollarAmount } from \"@w2e/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { useICPAmountUSDValue, useAccount } from \"store/global/hooks\";\nimport WICPPriceFormat from \"components/NFT/WICPPriceFormat\";\nimport LazyImage from \"components/LazyImage\";\nimport { getLocaleMessage } from \"locales/services\";\nimport { useNFTByMetadata } from \"hooks/nft/useNFTMetadata\";\nimport { useNFTMetadata as useNFTMetadataCall } from \"hooks/nft/useNFTCalls\";\nimport VerifyNFT from \"components/NFT/VerifyNFT\";\nimport { useTokenBalance } from \"hooks/token/useTokenBalance\";\nimport { TextButton } from \"components/index\";\nimport Button from \"components/authentication/ButtonConnector\";\nimport FileImage from \"../FileImage\";\n\nexport default function NFTBuyReview({\n  order,\n  open,\n  onClose,\n  onTradeSuccess,\n}: {\n  order: TradeOrder | undefined | null;\n  open: boolean;\n  onClose: () => void;\n  onTradeSuccess?: () => void;\n}) {\n  const theme = useTheme() as Theme;\n\n  const account = useAccount();\n  const [openErrorTip] = useErrorTip();\n  const [openSuccessTip] = useSuccessTip();\n\n  const approve = useApprove();\n  const buy = useNFTBuyCallback();\n\n  const { result } = useNFTMetadataCall(order?.nftCid, order?.tokenIndex);\n  const _metadata = result ?? ({} as NFTTokenMetadata);\n\n  const nft = useNFTByMetadata(_metadata);\n\n  const userPay = new BigNumber(order?.price ? String(order.price) : 0)\n    .plus(new BigNumber(String(WRAPPED_ICP_TOKEN_INFO.transFee)).multipliedBy(3))\n    .toNumber();\n\n  const handleBuyNFT = async (identity: ActorIdentity, { loading, closeLoading }: SubmitLoadingProps) => {\n    if (loading) return;\n\n    const TradeCanisterId = getCanisterId(CANISTER_NAMES.NFTTrade);\n\n    const { status: approveStatus, message: approveMessage } = await approve({\n      canisterId: NFTTradeTokenCanisterId,\n      spender: TradeCanisterId,\n      account,\n      value: numberToString(parseTokenAmount(userPay, WRAPPED_ICP_TOKEN_INFO.decimals)),\n    });\n\n    if (approveStatus === \"err\") {\n      openErrorTip(approveMessage);\n      closeLoading();\n      return;\n    }\n\n    const { status, message } = await buy(identity, order?.nftCid ?? \"\", order?.tokenIndex ?? 0);\n\n    if (status === ResultStatus.ERROR) {\n      openErrorTip(getLocaleMessage(message) ?? \"Transaction failed\");\n    } else {\n      openSuccessTip(t`Traded successfully`);\n      if (onTradeSuccess) onTradeSuccess();\n    }\n\n    closeLoading();\n  };\n\n  const USDValue = useICPAmountUSDValue(order?.price);\n\n  // 3 times transaction fee\n  const userTransFee = parseTokenAmount(WRAPPED_ICP_TOKEN_INFO.transFee, WRAPPED_ICP_TOKEN_INFO.decimals).multipliedBy(\n    3,\n  );\n\n  const { result: tradeTokenBalance } = useTokenBalance(NFTTradeTokenCanisterId, account);\n\n  return (\n    <Modal open={open} onClose={onClose} title={t`Confirm Buying`} background={theme.palette.background.level2}>\n      <Box\n        sx={{\n          borderRadius: \"12px\",\n          border: \"1px solid #202020\",\n          background: theme.palette.background.level4,\n          padding: \"12px\",\n        }}\n      >\n        <Grid\n          container\n          sx={{\n            \"@media (max-width: 640px)\": {\n              flexDirection: \"column\",\n            },\n          }}\n        >\n          <Box\n            sx={{\n              minWidth: \"140px\",\n              \"@media (max-width: 640px)\": {\n                width: \"140px\",\n              },\n            }}\n          >\n            <Grid\n              container\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              sx={{\n                position: \"relative\",\n                background: theme.palette.background.level1,\n                borderRadius: \"8px\",\n                width: \"100%\",\n                height: \"100%\",\n                padding: \"5px\",\n              }}\n            >\n              <LazyImage\n                src={nft?.filePath}\n                showDefault={nft?.fileType !== \"image\"}\n                CustomImage={\n                  nft?.fileType !== \"image\" && !!nft?.fileType ? <FileImage fileType={nft?.fileType ?? \"\"} /> : null\n                }\n              />\n            </Grid>\n          </Box>\n\n          <Grid\n            item\n            xs\n            sx={{\n              height: \"120px\",\n              marginLeft: \"20px\",\n              overflow: \"hidden\",\n              \"@media (max-width: 640px)\": {\n                marginLeft: \"10px\",\n                height: \"auto\",\n                overflow: \"initial\",\n              },\n            }}\n          >\n            <Box sx={{ overflow: \"hidden\" }}>\n              <Box mt=\"10px\" sx={{ whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                <Typography color=\"text.primary\" component=\"span\">\n                  {order?.name}\n                </Typography>\n                <Typography color=\"text.primary\" component=\"span\" sx={{ marginLeft: \"10px\" }}>\n                  #{String(order?.tokenIndex)}\n                </Typography>\n              </Box>\n              <Box mt=\"10px\">\n                <VerifyNFT minter={order?.minter} secondaryColor />\n              </Box>\n              <Grid\n                container\n                alignItems=\"center\"\n                sx={{\n                  marginTop: \"40px\",\n                  \"@media (max-width: 640px)\": {\n                    marginTop: \"10px\",\n                  },\n                }}\n              >\n                <Box>\n                  <WICPPriceFormat imgSize=\"20px\" price={order?.price} color=\"text.primary\" />\n                </Box>\n                {USDValue ? (\n                  <Typography ml=\"8px\" mt=\"3px\">\n                    ({formatDollarAmount(USDValue?.toNumber())})\n                  </Typography>\n                ) : null}\n              </Grid>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt=\"30px\">\n        <Grid container>\n          <Grid item xs>\n            <Typography>\n              <Trans>Transaction Fee</Trans>\n            </Typography>\n          </Grid>\n          <Typography color=\"text.primary\">{new BigNumber(NFTTradeFee).multipliedBy(100).toFixed(2)}%</Typography>\n        </Grid>\n        <Grid container mt=\"20px\">\n          <Grid item xs>\n            <Typography>\n              <Trans>Creator Royalty</Trans>\n            </Typography>\n          </Grid>\n          <Typography color=\"text.primary\">\n            {new BigNumber(String(order?.royalties)).dividedBy(100).toFixed(2)}%\n          </Typography>\n        </Grid>\n        <Grid container mt=\"20px\">\n          <Grid item xs>\n            <Typography>\n              <Trans>Transfer Fee</Trans>\n            </Typography>\n          </Grid>\n          <Grid item>\n            <WICPPriceFormat price={userTransFee.toFormat()} fontSize=\"14px\" />\n          </Grid>\n        </Grid>\n        <Grid container mt=\"20px\">\n          <Grid item xs>\n            <Typography>\n              <Trans>Pay (All fees included)</Trans>\n            </Typography>\n          </Grid>\n          <Grid item>\n            <WICPPriceFormat imgSize=\"18px\" price={userPay} />\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt={3}>\n        <Identity onSubmit={handleBuyNFT} fullScreenLoading>\n          {({ submit, loading }: CallbackProps) => (\n            <Button\n              variant=\"contained\"\n              onClick={submit}\n              disabled={loading}\n              fullWidth\n              size=\"large\"\n              startIcon={loading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n            >\n              <Trans>Confirm</Trans>\n            </Button>\n          )}\n        </Identity>\n      </Box>\n      <Grid container sx={{ position: \"relative\" }} mt=\"12px\" justifyContent=\"flex-start\">\n        <Typography color=\"text.primary\" sx={{ \"@media (max-width: 640px)\": { fontSize: \"12px\" } }}>\n          <Trans>Balance:</Trans>{\" \"}\n          {tradeTokenBalance\n            ? parseTokenAmount(tradeTokenBalance.toString(), WRAPPED_ICP_TOKEN_INFO.decimals).toFormat()\n            : 0}{\" \"}\n          ICP\n        </Typography>\n        <Box sx={{ position: \"absolute\", right: \"0\", top: \"0\" }}>\n          <TextButton to=\"/swap/v2/wrap\" sx={{ fontWeight: \"500\", \"@media (max-width: 640px)\": { fontSize: \"12px\" } }}>\n            Get ICP\n          </TextButton>\n        </Box>\n      </Grid>\n    </Modal>\n  );\n}\n","import { useHistory } from \"react-router-dom\";\nimport { Box, Button, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Trans } from \"@lingui/macro\";\nimport CollectionBg from \"assets/images/nft/collection_bg.png\";\n\nconst useStyles = makeStyles(() => {\n  return {\n    container: {\n      position: \"absolute\",\n      left: \"0\",\n      top: \"50%\",\n      width: \"100%\",\n      overflow: \"hidden\",\n      zIndex: 2,\n      transform: \"translate(0, -50%)\",\n    },\n\n    viewAll: {\n      marginTop: \"40px\",\n      width: \"190px\",\n      height: \"48px\",\n      borderRadius: \"8px\",\n      cursor: \"pointer\",\n    },\n  };\n});\n\nexport default function MarketCarousel() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleLoadCollections = () => {\n    history.push(`/marketplace/collections`);\n  };\n\n  return (\n    <Box mt=\"30px\" sx={{ width: \"100%\", height: \"320px\", position: \"relative\" }}>\n      <Box className={classes.container}>\n        <Typography color=\"text.primary\" fontSize=\"22px\" fontWeight=\"500\">\n          <Trans>Create-and-Trade Your NFTs Freely on the</Trans>\n        </Typography>\n\n        <Typography color=\"text.primary\" fontSize=\"42px\" fontWeight=\"700\" sx={{ marginTop: \"16px\" }}>\n          <Trans>Marketplace</Trans>\n        </Typography>\n\n        <Button variant=\"contained\" className={classes.viewAll} onClick={handleLoadCollections}>\n          <Trans>View All</Trans>\n        </Button>\n      </Box>\n\n      <Box sx={{ width: \"100%\", maxWidth: \"470px\", height: \"320px\", position: \"absolute\", right: \"0\", top: \"0\" }}>\n        <img width=\"100%\" height=\"100%\" src={CollectionBg} alt=\"\" />\n      </Box>\n    </Box>\n  );\n}\n","import { useState } from \"react\";\nimport MarketWrapper, { Pages, MarketPageConfig } from \"components/NFT/market/MarketWrapper\";\nimport MarketCarousel from \"components/NFT/market/Carousel1\";\n\nexport default function NFTMarketplace() {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [sortBy, setSortBy] = useState<null | string>(\"time\");\n  const [pageConfig, setPageConfig] = useState<MarketPageConfig>(Pages[0]);\n\n  const handlePageChange = (page: MarketPageConfig) => {\n    setPageConfig(page);\n  };\n\n  const getComponent = () => {\n    const Component = pageConfig.component;\n    return <Component searchValue={searchValue} sortBy={sortBy} />;\n  };\n\n  return (\n    <MarketWrapper\n      defaultSortBy={sortBy}\n      onSearchValueChange={setSearchValue}\n      onSortByChange={setSortBy}\n      onPageChange={handlePageChange}\n      title={<MarketCarousel />}\n    >\n      {getComponent()}\n    </MarketWrapper>\n  );\n}\n"],"names":["Label","_ref","minter","secondaryColor","fontSize","textSX","value","isICPSwapOfficial","_jsxs","Typography","color","sx","children","_jsx","component","shorten","VerifyNFT","_ref2","justifyContent","Grid","container","alignItems","Box","width","height","marginLeft","src","VerifyImage","alt","NFTBuyReview","_nft$fileType","order","open","onClose","onTradeSuccess","theme","useTheme","account","useAccount","openErrorTip","useErrorTip","openSuccessTip","useSuccessTip","approve","useApprove","buy","useNFTBuyCallback","result","useNFTMetadataCall","nftCid","tokenIndex","_metadata","nft","useNFTByMetadata","userPay","BigNumber","price","String","plus","WRAPPED_ICP_TOKEN_INFO","transFee","multipliedBy","toNumber","USDValue","useICPAmountUSDValue","userTransFee","parseTokenAmount","decimals","tradeTokenBalance","useTokenBalance","NFTTradeTokenCanisterId","Modal","title","i18n","_","id","background","palette","level2","borderRadius","border","level4","padding","flexDirection","minWidth","position","level1","LazyImage","filePath","showDefault","fileType","CustomImage","FileImage","item","xs","overflow","mt","whiteSpace","textOverflow","name","marginTop","WICPPriceFormat","imgSize","ml","formatDollarAmount","Trans","NFTTradeFee","toFixed","royalties","dividedBy","toFormat","Identity","onSubmit","async","identity","_order$nftCid","_order$tokenIndex","loading","closeLoading","TradeCanisterId","getCanisterId","CANISTER_NAMES","NFTTrade","status","approveStatus","message","approveMessage","canisterId","spender","numberToString","_getLocaleMessage","ResultStatus","ERROR","getLocaleMessage","fullScreenLoading","_ref3","submit","Button","variant","onClick","disabled","fullWidth","size","startIcon","CircularProgress","toString","right","top","TextButton","to","fontWeight","useStyles","makeStyles","left","zIndex","transform","viewAll","cursor","MarketCarousel","classes","history","useHistory","className","handleLoadCollections","push","maxWidth","CollectionBg","NFTMarketplace","searchValue","setSearchValue","useState","sortBy","setSortBy","pageConfig","setPageConfig","Pages","MarketWrapper","defaultSortBy","onSearchValueChange","onSortByChange","onPageChange","page","getComponent","Component"],"sourceRoot":""}