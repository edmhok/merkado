{"version":3,"file":"static/js/2099.ff6d8b74.chunk.js","mappings":"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","sources":["views/staking-token/create.tsx"],"sourcesContent":["// @ts-nocheck\nimport { useEffect, useState } from \"react\";\nimport { Typography, Grid, Box } from \"@mui/material\";\nimport { MainCard, Wrapper, TextFieldNumberComponent, FilledTextField } from \"components/index\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { MessageTypes, useTips } from \"hooks/useTips\";\nimport { t } from \"@lingui/macro\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { numberToString } from \"@w2e/utils\";\nimport BigNumber from \"bignumber.js\";\nimport Button from \"components/authentication/ButtonConnector\";\nimport { createStakingTokenPool } from \"@w2e/hooks\";\nimport { type ActorIdentity, ResultStatus } from \"@w2e/types\";\nimport { TOKEN_STANDARD } from \"@w2e/types\";\nimport { standardCheck } from \"utils/token/standardCheck\";\nimport { getTokenInfo } from \"hooks/token/calls\";\nimport { timeParser } from \"utils/index\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DateTimePicker } from \"@mui/x-date-pickers/DateTimePicker\";\nimport dayjs from \"dayjs\";\nimport { useUpdateTokenStandard } from \"store/token/cache/hooks\";\nimport { TokenInfo } from \"types/token\";\n\nexport const TokenStandards = [\n  { label: \"EXT\", value: TOKEN_STANDARD.EXT },\n  { label: \"DIP20\", value: TOKEN_STANDARD.DIP20 },\n  { label: \"DIP20-WICP\", value: TOKEN_STANDARD.DIP20_WICP },\n  { label: \"DIP20-XTC\", value: TOKEN_STANDARD.DIP20_XTC },\n  { label: \"ICRC-1\", value: TOKEN_STANDARD.ICRC1 },\n  { label: \"ICRC-2\", value: TOKEN_STANDARD.ICRC2 },\n  { label: \"ICP\", value: TOKEN_STANDARD.ICP },\n];\n\ntype Values = {\n  name: string;\n  rewardStandard: string;\n  rewardToken: string;\n  rewardTokenDecimals: number;\n  rewardTokenSymbol: string;\n  rewardTokenFee: number | bigint;\n  startDateTime: number;\n  endDateTime: number;\n  rewardPerTime: number;\n  stakingToken: string;\n  stakingTokenDecimals: number;\n  stakingTokenSymbol: string;\n  stakingStandard: string;\n  stakingTokenFee: number | bigint;\n  outputPerSecond: number;\n  BONUS_MULTIPLIER: number;\n};\n\nexport default function CreateStakingTokenPool() {\n  const principal = useAccountPrincipal();\n  const updateTokenStandard = useUpdateTokenStandard();\n\n  const [values, setValues] = useState<Values>({\n    BONUS_MULTIPLIER: 1,\n  } as Values);\n\n  const [openTip] = useTips();\n\n  const [loading, setLoading] = useState(false);\n\n  const [rewardTokenInfo, setRewardTokenInfo] = useState<TokenInfo | undefined>(undefined);\n\n  const handleFieldChange = (value: string | number, field: string) => {\n    setValues({ ...values, [field]: value });\n  };\n\n  useEffect(() => {\n    const call = async () => {\n      if (values.rewardToken && values.rewardStandard) {\n        const { valid: rewardTokenValid } = await standardCheck(\n          values.rewardToken,\n          values.rewardStandard as TOKEN_STANDARD,\n        );\n\n        if (!rewardTokenValid) {\n          openTip(\"reward token standard is incorrect\", MessageTypes.error);\n          setLoading(false);\n          return;\n        }\n\n        updateTokenStandard({\n          canisterId: values.rewardToken,\n          standard: values.rewardStandard as TOKEN_STANDARD,\n        });\n\n        const rewardTokenInfo = await getTokenInfo(values.rewardToken);\n\n        setRewardTokenInfo(rewardTokenInfo);\n      }\n    };\n\n    call();\n  }, [values.rewardToken, values.rewardStandard]);\n\n  const handleCreateEvent = async (identity: ActorIdentity) => {\n    if (!identity || loading || !principal) return;\n    setLoading(true);\n\n    const { valid: rewardTokenValid } = await standardCheck(\n      values.rewardToken,\n      values.rewardStandard as TOKEN_STANDARD,\n    );\n\n    if (!rewardTokenValid) {\n      openTip(\"reward token standard is incorrect\", MessageTypes.error);\n      setLoading(false);\n      return;\n    }\n\n    updateTokenStandard({\n      canisterId: values.rewardToken,\n      standard: values.rewardStandard as TOKEN_STANDARD,\n    });\n\n    const rewardTokenInfo = await getTokenInfo(values.rewardToken);\n\n    if (!rewardTokenInfo) {\n      openTip(\"can't got reward token info, please try again\", MessageTypes.error);\n      setLoading(false);\n      return;\n    }\n\n    const { valid: stakingTokenValid } = await standardCheck(\n      values.stakingToken,\n      values.stakingStandard as TOKEN_STANDARD,\n    );\n\n    if (!stakingTokenValid) {\n      openTip(\"staking token standard is incorrect\", MessageTypes.error);\n      setLoading(false);\n      return;\n    }\n\n    updateTokenStandard({\n      canisterId: values.stakingToken,\n      standard: values.stakingStandard as TOKEN_STANDARD,\n    });\n\n    const stakingTokenInfo = await getTokenInfo(values.stakingToken);\n\n    if (!stakingTokenInfo) {\n      openTip(\"can't got staking token info, please try again\", MessageTypes.error);\n      setLoading(false);\n      return;\n    }\n\n    const amount = new BigNumber(values.outputPerSecond)\n      .multipliedBy(10 ** rewardTokenInfo.decimals)\n      .dividedBy(values.BONUS_MULTIPLIER);\n\n    if (amount.isLessThan(1) || amount.toString().includes(\".\")) {\n      openTip(\"Wrong amount per second\", MessageTypes.error);\n      setLoading(false);\n      return;\n    }\n\n    const { status, message } = await createStakingTokenPool(\n      {\n        name: values.name,\n\n        stakingTokenSymbol: stakingTokenInfo.symbol,\n        stakingToken: { address: stakingTokenInfo.canisterId, standard: values.stakingStandard },\n        stakingTokenFee: stakingTokenInfo.transFee,\n        stakingTokenDecimals: BigInt(stakingTokenInfo.decimals),\n\n        rewardTokenSymbol: rewardTokenInfo.symbol,\n        rewardToken: { address: rewardTokenInfo.canisterId, standard: values.rewardStandard },\n        rewardTokenFee: rewardTokenInfo.transFee,\n        rewardTokenDecimals: BigInt(rewardTokenInfo.decimals),\n\n        startTime: BigInt(values.startDateTime) / BigInt(1000),\n        rewardPerTime: BigInt(\n          numberToString(\n            new BigNumber(values.outputPerSecond)\n              .multipliedBy(10 ** rewardTokenInfo.decimals)\n              .dividedBy(values.BONUS_MULTIPLIER),\n          ),\n        ),\n\n        bonusEndTime: BigInt(values.endDateTime) / BigInt(1000),\n        BONUS_MULTIPLIER: BigInt(values.BONUS_MULTIPLIER),\n      },\n      identity,\n    );\n\n    if (status === ResultStatus.OK) {\n      openTip(`create success pool:${message}`, MessageTypes.success);\n      setValues({\n        BONUS_MULTIPLIER: 1000,\n      } as Values);\n    } else {\n      openTip(message ?? \"Failed to create token pool\", MessageTypes.error);\n    }\n\n    setLoading(false);\n  };\n\n  let errorMsg = \"\";\n  if (!values.name) errorMsg = t`Enter the name`;\n  if (!values.rewardStandard) errorMsg = t`Enter the reward token standard`;\n  if (!values.rewardToken) errorMsg = t`Enter the reward token`;\n  if (!values.startDateTime) errorMsg = t`Enter the start time`;\n  if (!values.endDateTime) errorMsg = t`Enter the bonus end time`;\n  if (!values.outputPerSecond) errorMsg = t`Enter the output per second`;\n  if (!values.stakingToken) errorMsg = t`Enter the staking Token`;\n  if (!values.stakingStandard) errorMsg = t`Enter the staking token standard`;\n  if (!values.BONUS_MULTIPLIER) errorMsg = t`Enter the bonus multiplier`;\n\n  return (\n    <Wrapper>\n      <MainCard>\n        <Grid container justifyContent=\"center\">\n          <Box sx={{ maxWidth: \"474px\", width: \"100%\", display: \"grid\", gap: \"20px 0\" }}>\n            <Box>\n              <FilledTextField\n                label={t`Token pool's name`}\n                placeholder={t`Enter token pool's name`}\n                onChange={(value) => handleFieldChange(value, \"name\")}\n                value={values.name}\n              />\n            </Box>\n\n            <Box>\n              <FilledTextField\n                label={t`Reward token id`}\n                placeholder={t`Enter reward token id`}\n                onChange={(value) => handleFieldChange(value, \"rewardToken\")}\n                value={values.rewardToken}\n              />\n            </Box>\n\n            <Box>\n              <FilledTextField\n                select\n                label={t`Reward token standard`}\n                menus={TokenStandards}\n                placeholder={t`Select reward token standard`}\n                onChange={(value) => handleFieldChange(value, \"rewardStandard\")}\n                value={values.rewardStandard}\n              />\n            </Box>\n\n            <Box>\n              <FilledTextField\n                label={t`Staking token id`}\n                placeholder={t`Enter staking token id`}\n                onChange={(value) => handleFieldChange(value, \"stakingToken\")}\n                value={values.stakingToken}\n              />\n            </Box>\n\n            <Box>\n              <FilledTextField\n                label={t`Staking token standard`}\n                select\n                menus={TokenStandards}\n                placeholder={t`Select staking token standard`}\n                onChange={(value) => handleFieldChange(value, \"stakingStandard\")}\n                value={values.stakingStandard}\n              />\n            </Box>\n\n            <Box>\n              <Typography color=\"text.primary\">Start/End Time</Typography>\n              <Box mt=\"12px\">\n                <Grid container justifyContent=\"space-between\">\n                  <Grid\n                    item\n                    sx={{\n                      width: \"48%\",\n                    }}\n                  >\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DateTimePicker\n                        renderInput={(params: any) => (\n                          <FilledTextField\n                            fullWidth\n                            {...params}\n                            InputProps={{\n                              ...(params?.InputProps ?? {}),\n                              disableUnderline: true,\n                            }}\n                            helperText=\"\"\n                          />\n                        )}\n                        value={values.startDateTime ? dayjs(values.startDateTime) : null}\n                        onChange={(newValue: any) => {\n                          handleFieldChange(\n                            timeParser(new Date(newValue.toDate()).getTime()).getTime(),\n                            \"startDateTime\",\n                          );\n                        }}\n                        minDateTime={dayjs(new Date())}\n                        maxDateTime={values.endDateTime ? dayjs(new Date(values.endDateTime)) : undefined}\n                      />\n                    </LocalizationProvider>\n                  </Grid>\n                  <Grid\n                    item\n                    sx={{\n                      width: \"48%\",\n                    }}\n                  >\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <DateTimePicker\n                        renderInput={(params: any) => (\n                          <FilledTextField\n                            fullWidth\n                            {...params}\n                            InputProps={{\n                              ...(params?.InputProps ?? {}),\n                              disableUnderline: true,\n                            }}\n                            helperText=\"\"\n                          />\n                        )}\n                        value={values.endDateTime ? dayjs(values.endDateTime) : null}\n                        onChange={(newValue: any) => {\n                          handleFieldChange(timeParser(new Date(newValue.toDate()).getTime()).getTime(), \"endDateTime\");\n                        }}\n                        minDateTime={values.startDateTime ? dayjs(values.startDateTime) : dayjs(new Date())}\n                      />\n                    </LocalizationProvider>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n\n            <Box>\n              <FilledTextField\n                label={t`Output Per Second`}\n                placeholder={t`Enter output per second`}\n                onChange={(value) => handleFieldChange(value, \"outputPerSecond\")}\n                value={values.outputPerSecond}\n                InputProps={{\n                  disableUnderline: true,\n                  inputComponent: TextFieldNumberComponent,\n                  inputProps: {\n                    thousandSeparator: true,\n                    decimalScale: rewardTokenInfo?.decimals ?? 8,\n                    allowNegative: false,\n                    maxLength: 100,\n                    value: values.outputPerSecond,\n                  },\n                }}\n              />\n            </Box>\n\n            <Box>\n              <FilledTextField\n                label={t`Bonus multiplier`}\n                placeholder={t`Enter bonus multiplier`}\n                onChange={(value) => handleFieldChange(value, \"BONUS_MULTIPLIER\")}\n                value={values.BONUS_MULTIPLIER}\n              />\n            </Box>\n\n            <Box mt={4}>\n              <Identity\n                onSubmit={async (identity) => {\n                  await handleCreateEvent(identity);\n                }}\n              >\n                {({ submit }: CallbackProps) => (\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    size=\"large\"\n                    onClick={submit}\n                    disabled={Boolean(errorMsg) || loading}\n                    loading={loading}\n                  >\n                    {errorMsg || t`Create token pool`}\n                  </Button>\n                )}\n              </Identity>\n            </Box>\n          </Box>\n        </Grid>\n      </MainCard>\n    </Wrapper>\n  );\n}\n"],"names":["TokenStandards","label","value","TOKEN_STANDARD","EXT","DIP20","DIP20_WICP","DIP20_XTC","ICRC1","ICRC2","ICP","CreateStakingTokenPool","_rewardTokenInfo$deci","principal","useAccountPrincipal","updateTokenStandard","useUpdateTokenStandard","values","setValues","useState","BONUS_MULTIPLIER","openTip","useTips","loading","setLoading","rewardTokenInfo","setRewardTokenInfo","undefined","handleFieldChange","field","useEffect","async","rewardToken","rewardStandard","valid","rewardTokenValid","standardCheck","MessageTypes","error","canisterId","standard","getTokenInfo","call","errorMsg","name","i18n","_","id","startDateTime","endDateTime","outputPerSecond","stakingToken","stakingStandard","_jsx","Wrapper","children","MainCard","Grid","container","justifyContent","_jsxs","Box","sx","maxWidth","width","display","gap","FilledTextField","placeholder","onChange","select","menus","Typography","color","mt","item","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","renderInput","params","_params$InputProps","fullWidth","InputProps","disableUnderline","helperText","dayjs","newValue","timeParser","Date","toDate","getTime","minDateTime","maxDateTime","_params$InputProps2","inputComponent","TextFieldNumberComponent","inputProps","thousandSeparator","decimalScale","decimals","allowNegative","maxLength","Identity","onSubmit","identity","stakingTokenValid","stakingTokenInfo","amount","BigNumber","multipliedBy","dividedBy","isLessThan","toString","includes","status","message","createStakingTokenPool","stakingTokenSymbol","symbol","address","stakingTokenFee","transFee","stakingTokenDecimals","BigInt","rewardTokenSymbol","rewardTokenFee","rewardTokenDecimals","startTime","rewardPerTime","numberToString","bonusEndTime","ResultStatus","OK","concat","success","handleCreateEvent","_ref","submit","Button","variant","size","onClick","disabled","Boolean"],"sourceRoot":""}