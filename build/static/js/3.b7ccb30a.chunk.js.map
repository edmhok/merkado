{"version":3,"file":"static/js/3.b7ccb30a.chunk.js","mappings":"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","sources":["store/customization/hooks.ts","../packages/hooks/src/swap/useUserSwapUnusedBalance.ts","views/swap-liquidity-v3/Reclaim.tsx","../packages/hooks/src/token/useTokenBalance.ts"],"sourcesContent":["import { useAppDispatch, useAppSelector } from \"store/hooks\";\nimport { useCallback, useMemo } from \"react\";\nimport { updateHideUnavailableClaim } from \"./actions\";\n\nexport function useHideUnavailableClaimManager() {\n  const dispatch = useAppDispatch();\n  const hideUnavailableClaim = useAppSelector((state) => state.customization.hideUnavailableClaim);\n\n  const callback = useCallback(\n    (hide: boolean) => {\n      dispatch(updateHideUnavailableClaim(hide));\n    },\n    [dispatch],\n  );\n\n  return useMemo(\n    () => ({\n      hideUnavailableClaim,\n      updateHideUnavailableClaim: callback,\n    }),\n    [callback, hideUnavailableClaim],\n  );\n}\n","/* eslint-disable no-console */\nimport { useEffect, useMemo, useState } from \"react\";\nimport type { SwapPoolData, UserSwapPoolsBalance } from \"@w2e/types\";\nimport { SubAccount } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport { useSwapPools, getUserUnusedBalance, _getSwapPoolAllBalance } from \"./calls\";\nimport { getTokenBalance } from \"../token/index\";\n\nconst CALL_LIMITED = 20;\n\nlet un_deposit_fetch_index = -1;\n\nexport function useUserUnDepositBalance(\n  principal: string,\n  _pools: SwapPoolData[] | undefined,\n  selectedTokenId?: string,\n  reload?: boolean,\n) {\n  const [loading, setLoading] = useState(false);\n  const [balances, setBalances] = useState<(UserSwapPoolsBalance | undefined)[]>([]);\n\n  const pools = useMemo(() => {\n    if (!selectedTokenId) return _pools;\n    return _pools?.filter((pool) => pool.token0.address === selectedTokenId || pool.token1.address === selectedTokenId);\n  }, [_pools, selectedTokenId]);\n\n  useEffect(() => {\n    un_deposit_fetch_index++;\n  }, [selectedTokenId]);\n\n  const _fetch = async (pool: SwapPoolData, fetch_index: number) => {\n    if (!principal) return undefined;\n\n    const sub = SubAccount.fromPrincipal(Principal.fromText(principal)).toUint8Array();\n\n    const call = async (token: { address: string; standard: string }) => {\n      let result: bigint | undefined;\n\n      try {\n        if (fetch_index !== un_deposit_fetch_index) {\n          console.log(\"abort\");\n        } else {\n          const _result = token.standard.includes(\"DIP20\")\n            ? BigInt(0)\n            : await getTokenBalance({\n                canisterId: token.address,\n                address: pool.canisterId,\n                sub,\n              });\n          result = _result;\n        }\n      } catch (err) {\n        console.error(err);\n      }\n\n      return result;\n    };\n\n    const result = await Promise.all([call(pool.token0), call(pool.token1)]);\n\n    return {\n      ...pool,\n      type: \"unDeposit\",\n      balance0: result[0] ?? BigInt(0),\n      balance1: result[1] ?? BigInt(0),\n    } as UserSwapPoolsBalance;\n  };\n\n  useEffect(() => {\n    const call = async (new_index: number) => {\n      if (!pools) return;\n\n      const calls: (() => Promise<UserSwapPoolsBalance | undefined>)[][] = [[]];\n\n      for (let i = 0; i < pools.length; i++) {\n        if (i % CALL_LIMITED === 0 && i !== 0) {\n          calls.push([]);\n        }\n\n        const pool = pools[i];\n\n        calls[calls.length - 1].push(async () => await _fetch(pool, new_index));\n      }\n\n      let allResult: (UserSwapPoolsBalance | undefined)[] = [];\n\n      for (let i = 0; i < calls.length; i++) {\n        const _calls = calls[i].map(async (call) => await call());\n        const result = await Promise.all(_calls);\n        allResult = allResult.concat(result);\n      }\n\n      if (new_index === un_deposit_fetch_index) {\n        setBalances(allResult);\n        setLoading(false);\n      }\n    };\n\n    if (pools && principal) {\n      const new_index = un_deposit_fetch_index;\n      setBalances([]);\n      setLoading(true);\n      call(new_index);\n    }\n  }, [pools, reload, principal]);\n\n  return useMemo(() => {\n    const _balances = !selectedTokenId\n      ? balances\n      : (balances.filter((e) => !!e) as UserSwapPoolsBalance[]).map((e) => {\n          return {\n            ...e,\n            balance0: e.token0.address === selectedTokenId ? e.balance0 : BigInt(0),\n            balance1: e.token1.address === selectedTokenId ? e.balance1 : BigInt(0),\n          };\n        });\n\n    return { loading, balances: _balances };\n  }, [loading, balances, selectedTokenId]);\n}\n\nlet unused_fetch_index = -1;\n\nexport function useUserUnUsedBalance(\n  principal: string | undefined,\n  _pools: SwapPoolData[] | undefined,\n  selectedTokenId?: string,\n  reload?: boolean,\n) {\n  const [loading, setLoading] = useState(false);\n  const [balances, setBalances] = useState<(UserSwapPoolsBalance | undefined)[]>([]);\n\n  const pools = useMemo(() => {\n    if (!selectedTokenId) return _pools;\n    return _pools?.filter((pool) => pool.token0.address === selectedTokenId || pool.token1.address === selectedTokenId);\n  }, [_pools, selectedTokenId]);\n\n  const poolIds = useMemo(() => {\n    return pools?.map((pool) => pool.canisterId.toString());\n  }, [pools]);\n\n  useEffect(() => {\n    unused_fetch_index++;\n  }, [selectedTokenId]);\n\n  const _fetch = async (poolId: string, fetch_index: number) => {\n    if (!principal) return undefined;\n\n    try {\n      if (fetch_index !== unused_fetch_index) {\n        console.log(\"abort\");\n        return undefined;\n      }\n\n      const _result = await getUserUnusedBalance(poolId, Principal.fromText(principal));\n      if (!_result) return undefined;\n\n      const pool = pools?.filter((pool) => pool.canisterId.toString() === poolId)[0];\n      if (!pool) return undefined;\n\n      return { ...pool, type: \"unUsed\", ..._result } as UserSwapPoolsBalance;\n    } catch (err) {\n      console.error(err);\n    }\n\n    return undefined;\n  };\n\n  useEffect(() => {\n    const call = async (new_index: number) => {\n      if (!poolIds) return;\n\n      const calls: (() => Promise<UserSwapPoolsBalance | undefined>)[][] = [[]];\n\n      for (let i = 0; i < poolIds.length; i++) {\n        if (i % CALL_LIMITED === 0 && i !== 0) {\n          calls.push([]);\n        }\n\n        const pool = poolIds[i];\n\n        calls[calls.length - 1].push(async () => await _fetch(pool, new_index));\n      }\n\n      let allResult: (UserSwapPoolsBalance | undefined)[] = [];\n\n      for (let i = 0; i < calls.length; i++) {\n        const _calls = calls[i].map(async (call) => await call());\n        const result = await Promise.all(_calls);\n        allResult = allResult.concat(result);\n      }\n\n      if (new_index === unused_fetch_index) {\n        setBalances(allResult);\n        setLoading(false);\n      }\n    };\n\n    if (poolIds && principal) {\n      const new_index = unused_fetch_index;\n\n      setBalances([]);\n      setLoading(true);\n      call(new_index);\n    }\n  }, [poolIds, reload, principal]);\n\n  return useMemo(() => {\n    const _balances = !selectedTokenId\n      ? balances\n      : (balances.filter((e) => !!e) as UserSwapPoolsBalance[]).map((e) => {\n          return {\n            ...e,\n            balance0: e.token0.address === selectedTokenId ? e.balance0 : BigInt(0),\n            balance1: e.token1.address === selectedTokenId ? e.balance1 : BigInt(0),\n          };\n        });\n\n    return { loading, balances: _balances };\n  }, [loading, balances, selectedTokenId]);\n}\n\nexport function useUserSwapPoolBalances(principal: string | undefined, selectedTokenId?: string, reload?: boolean) {\n  const { result: pools } = useSwapPools();\n\n  const { loading: unDepositBalanceLoading, balances: unDepositBalances } = useUserUnDepositBalance(\n    principal,\n    pools,\n    selectedTokenId,\n    reload,\n  );\n  const { loading: unUsedBalanceLoading, balances: unUsedBalances } = useUserUnUsedBalance(\n    principal,\n    pools,\n    selectedTokenId,\n    reload,\n  );\n\n  return useMemo(\n    () => ({\n      loading: unUsedBalanceLoading || unDepositBalanceLoading,\n      pools,\n      balances: unUsedBalances.concat(unDepositBalances).filter((balances) => !!balances) as UserSwapPoolsBalance[],\n    }),\n    [pools, unUsedBalanceLoading, unUsedBalances, unDepositBalanceLoading, unDepositBalances],\n  );\n}\n","import { useState, useMemo, useEffect } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Typography, Box, Grid, Button, CircularProgress, Avatar, Checkbox } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { NoData, LoadingRow, Wrapper, Breadcrumbs, SwapTooltip, SelectToken } from \"components/index\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { ResultStatus } from \"@w2e/types\";\nimport { Trans } from \"@lingui/macro\";\nimport { useUserSwapPoolBalances } from \"@w2e/hooks\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { TokenInfo } from \"types/token\";\nimport { useTips, MessageTypes } from \"hooks/useTips\";\nimport { withdraw, deposit } from \"hooks/swap/v3Calls\";\n// import { useHistory } from \"react-router-dom\";\nimport { useHideUnavailableClaimManager } from \"store/customization/hooks\";\nimport { useAccountPrincipalString } from \"store/auth/hooks\";\nimport { ICP } from \"constants/tokens\";\n\ninterface BalanceItemProps {\n  poolId: string;\n  border?: boolean;\n  token: TokenInfo;\n  name: string | undefined;\n  type: \"unDeposit\" | \"unUsed\";\n  balance: bigint;\n  updateUnavailableKeys: (key: number) => void;\n  updateClaimedKey: (key: number) => void;\n  claimedKey: number;\n  claimedKeys: number[];\n}\n\nexport function BalanceItem({\n  token,\n  balance,\n  name,\n  poolId,\n  type,\n  updateUnavailableKeys,\n  updateClaimedKey,\n  claimedKey,\n  claimedKeys,\n}: BalanceItemProps) {\n  const theme = useTheme() as Theme;\n  const { hideUnavailableClaim } = useHideUnavailableClaimManager();\n\n  const [openTip, closeTip] = useTips();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const unavailableClaim = type === \"unDeposit\" ? balance < token.transFee * BigInt(2) : balance < token.transFee;\n\n  const isClaimed = useMemo(() => {\n    return claimedKeys.includes(claimedKey);\n  }, [claimedKeys, claimedKey]);\n\n  useEffect(() => {\n    if (unavailableClaim === true) {\n      updateUnavailableKeys(claimedKey);\n    }\n  }, [unavailableClaim, claimedKey]);\n\n  const handleClaim = async () => {\n    if (loading || unavailableClaim) return;\n\n    setLoading(true);\n\n    const loadingKey = openTip(\n      `Reclaim your ${parseTokenAmount(balance, token.decimals).toFormat()} ${token.symbol}`,\n      MessageTypes.loading,\n    );\n\n    const amount = balance;\n\n    if (amount !== BigInt(0)) {\n      if (type === \"unDeposit\") {\n        const result = await deposit(true, poolId, token.canisterId, amount, token.transFee);\n\n        if (result.status === ResultStatus.OK) {\n          const result = await withdraw(true, poolId, token.canisterId, token.transFee, amount - token.transFee);\n          if (result.status === ResultStatus.OK) {\n            openTip(`Withdrew ${name} ${token.symbol} successfully`, MessageTypes.success);\n            updateClaimedKey(claimedKey);\n          } else {\n            openTip(`Failed to Withdraw ${name} ${token.symbol}: ${result.message}`, MessageTypes.error);\n          }\n        } else {\n          openTip(`Failed to Withdraw: ${result.message ?? \"\"}`, MessageTypes.error);\n        }\n      } else {\n        const result = await withdraw(true, poolId, token.canisterId, token.transFee, amount);\n\n        if (result.status === ResultStatus.OK) {\n          openTip(`Withdrew ${name} ${token?.symbol} successfully`, MessageTypes.success);\n          updateClaimedKey(claimedKey);\n        } else {\n          openTip(result.message ? result.message : `Failed to Withdraw ${name} ${token.symbol}`, MessageTypes.error);\n        }\n      }\n    }\n\n    closeTip(loadingKey);\n\n    setLoading(false);\n  };\n\n  return (\n    <Grid\n      container\n      alignItems=\"center\"\n      sx={{\n        padding: \"24px\",\n        borderRadius: \"12px\",\n        background: theme.palette.background.level1,\n        margin: \"16px 0 0 0\",\n        ...((hideUnavailableClaim && unavailableClaim) || isClaimed ? { display: \"none\" } : {}),\n        \"@media(max-width: 640px)\": {\n          padding: \"12px\",\n        },\n      }}\n    >\n      <Avatar\n        src={token.logo}\n        sx={{\n          width: \"32px\",\n          height: \"32px\",\n          margin: \"0 12px 0 0\",\n          \"@media(max-width: 640px)\": {\n            width: \"24px\",\n            height: \"24px\",\n          },\n        }}\n      >\n        &nbsp;\n      </Avatar>\n\n      <Box sx={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <Box>\n          <Typography\n            color=\"text.primary\"\n            sx={{\n              fontSize: \"24px\",\n              fontWeight: 600,\n              \"@media(max-width: 640px)\": {\n                fontSize: \"16px\",\n              },\n            }}\n          >\n            {parseTokenAmount(balance, token.decimals).toFormat()} {token.symbol}\n          </Typography>\n          <Typography sx={{ margin: \"4px 0 0 0\" }}>{name}</Typography>\n          <Typography sx={{ margin: \"4px 0 0 0\" }}>{poolId}</Typography>\n        </Box>\n\n        <Box sx={{ display: \"flex\", alignItems: \"center\", gap: \"0 10px\" }}>\n          {unavailableClaim ? (\n            <SwapTooltip tips=\"Claim amount is below the transaction fee, making it unclaimable.\" iconSize=\"24px\" />\n          ) : null}\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"medium\"\n            disabled={loading || unavailableClaim}\n            onClick={handleClaim}\n            startIcon={loading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n          >\n            <Trans>Reclaim</Trans>\n          </Button>\n        </Box>\n      </Box>\n    </Grid>\n  );\n}\n\ninterface BalancesItemProps {\n  balance: Balance;\n  updateUnavailableKeys: (key: number) => void;\n  updateClaimedKey: (key: number) => void;\n  claimedKey: number;\n  claimedKeys: number[];\n}\n\nexport function BalancesItem({\n  balance,\n  updateUnavailableKeys,\n  updateClaimedKey,\n  claimedKey,\n  claimedKeys,\n}: BalancesItemProps) {\n  const { result: token0 } = useTokenInfo(balance.token0);\n  const { result: token1 } = useTokenInfo(balance.token1);\n\n  const token = useMemo(() => {\n    if (!token0 || !token1) return undefined;\n    return balance.token === token0.canisterId ? token0 : token1;\n  }, [token0, token1, balance]);\n\n  const name = token0 && token1 ? `${token0.symbol}/${token1.symbol}` : \"--\";\n\n  return token ? (\n    <BalanceItem\n      claimedKey={claimedKey}\n      poolId={balance.poolId}\n      token={token}\n      name={name}\n      balance={balance.balance}\n      type={balance.type}\n      updateUnavailableKeys={updateUnavailableKeys}\n      updateClaimedKey={updateClaimedKey}\n      claimedKeys={claimedKeys}\n    />\n  ) : null;\n}\n\ntype Balance = {\n  token: string;\n  token0: string;\n  token1: string;\n  poolId: string;\n  balance: bigint;\n  type: \"unDeposit\" | \"unUsed\";\n};\n\nexport default function SwapReclaim() {\n  const principal = useAccountPrincipalString();\n  const [selectedTokenId, setSelectedTokenId] = useState<string>(ICP.address);\n\n  const { pools, loading, balances } = useUserSwapPoolBalances(principal, selectedTokenId);\n  const [unavailableClaimKeys, setUnavailableClaimKeys] = useState<number[]>([]);\n  const [claimedKeys, setClaimedKeys] = useState<number[]>([]);\n\n  const _balances = useMemo(() => {\n    if (!balances) return [];\n\n    return balances\n      .filter((balance) => balance.balance0 !== BigInt(0) || balance.balance1 !== BigInt(0))\n      .reduce((prev, curr) => {\n        const arr = [...prev];\n        const poolId = curr.canisterId.toString();\n\n        if (curr.balance0 !== BigInt(0))\n          arr.push({\n            token: curr.token0.address,\n            balance: curr.balance0,\n            poolId,\n            type: curr.type,\n            token0: curr.token0.address,\n            token1: curr.token1.address,\n          } as Balance);\n        if (curr.balance1 !== BigInt(0))\n          arr.push({\n            token: curr.token1.address,\n            balance: curr.balance1,\n            poolId,\n            type: curr.type,\n            token0: curr.token0.address,\n            token1: curr.token1.address,\n          } as Balance);\n\n        return arr;\n      }, [] as Balance[]);\n  }, [pools, balances]);\n\n  const totalClaimedNumbers = useMemo(() => {\n    return _balances.length;\n  }, [_balances]);\n\n  const { hideUnavailableClaim, updateHideUnavailableClaim } = useHideUnavailableClaimManager();\n\n  // const handleFindToken = () => {\n  //   history.push(\"/swap/find-mis-transferred-token\");\n  // };\n\n  const handleToggleUnclaim = () => {\n    updateHideUnavailableClaim(!hideUnavailableClaim);\n  };\n\n  const handleUpdateUnavailableKeys = (key: number) => {\n    setUnavailableClaimKeys((prevState) => [...new Set([...prevState, key])]);\n  };\n\n  const handleUpdateClaimedKey = (index: number) => {\n    setClaimedKeys((prevState) => [...prevState, index]);\n  };\n\n  const unavailableClaimNumbers = useMemo(() => {\n    return unavailableClaimKeys.length;\n  }, [unavailableClaimKeys]);\n\n  const no_data = useMemo(() => {\n    if (totalClaimedNumbers === 0) return true;\n    if (unavailableClaimNumbers === totalClaimedNumbers) return hideUnavailableClaim;\n    if (unavailableClaimNumbers === 0) return claimedKeys.length === totalClaimedNumbers;\n    return unavailableClaimNumbers + claimedKeys.length === totalClaimedNumbers && hideUnavailableClaim;\n  }, [claimedKeys, unavailableClaimNumbers, totalClaimedNumbers, hideUnavailableClaim]);\n\n  const handleTokenChange = (tokenId: string) => {\n    setSelectedTokenId(tokenId);\n  };\n\n  return (\n    <Wrapper>\n      <Box sx={{ margin: \"10px 0 0 0\" }}>\n        <Breadcrumbs\n          prevLink=\"/swap\"\n          prevLabel={<Trans>Swap</Trans>}\n          currentLabel={<Trans>Reclaim Your Tokens</Trans>}\n        />\n      </Box>\n\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", margin: \"40px 0 0 0\" }}>\n        <Box sx={{ width: \"800px\" }}>\n          <Typography sx={{ fontSize: \"24px\", fontWeight: 500 }} color=\"text.primary\">\n            <Trans>Reclaim Your Tokens</Trans>\n          </Typography>\n\n          <Typography sx={{ margin: \"10px 0 0 0\" }}>\n            <Trans>\n              For your funds' safety on ICPSwap and to make it more convenient for you to reclaim your tokens, we've\n              implemented the 'Reclaim Your Tokens feature. You can use this feature in case of issues during swaps,\n              liquidity withdrawals/additions, fee claims, or transaction failures due to significant slippage. It\n              allows you to retrieve and reclaim your tokens when issues occur!\n            </Trans>\n          </Typography>\n\n          <Typography sx={{ margin: \"20px 0 0 0\" }}>\n            <Trans>\n              When might issues occur: Such as network latency or stutter, page refreshing during the Swap, excessive\n              slippage, significant token price fluctuations, and so on.\n            </Trans>\n          </Typography>\n\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              margin: \"32px 0 0 0\",\n              alignItems: \"center\",\n              \"@media(max-width: 640px)\": {\n                flexDirection: \"column\",\n                gap: \"20px 0\",\n                alignItems: \"flex-start\",\n              },\n            }}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"0 10px\",\n                \"@media(max-width: 640px)\": {\n                  alignItems: \"center\",\n                },\n              }}\n            >\n              <Typography color=\"text.primary\">\n                <Trans>Select Token</Trans>\n              </Typography>\n\n              <Box sx={{ minWidth: \"200px\" }}>\n                <SelectToken search value={selectedTokenId} border onTokenChange={handleTokenChange} />\n              </Box>\n            </Box>\n\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                \"@media(max-width: 640px)\": {\n                  justifyContent: \"flex-end\",\n                  width: \"100%\",\n                },\n              }}\n            >\n              <Box\n                sx={{ display: \"flex\", gap: \"0 5px\", alignItems: \"center\", cursor: \"pointer\", width: \"fit-content\" }}\n                onClick={handleToggleUnclaim}\n              >\n                <Checkbox\n                  checked={hideUnavailableClaim}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n                    updateHideUnavailableClaim(checked);\n                  }}\n                />\n\n                <Typography sx={{ userSelect: \"none\" }}>\n                  <Trans>Hide unclaimable tokens.</Trans>\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n\n          {selectedTokenId === ICP.address ? (\n            <Box sx={{ margin: \"10px 0 0 0\", display: \"flex\", gap: \"0 5px\", alignItems: \"center\" }}>\n              <Typography>\n                <Trans>\n                  Selecting ICP may require querying all trading pairs associated with it, leading to longer wait times.\n                  This process could take approximately 2-3 minutes. Please be patient.\n                </Trans>\n              </Typography>\n            </Box>\n          ) : null}\n\n          {/* <Box sx={{ margin: \"30px 0 0 0\", display: \"flex\", gap: \"0 5px\", alignItems: \"center\" }}>\n            <Typography color=\"text.orangeWarning\">\n              <Trans>If you still haven’t been able to reclaim your tokens, please click</Trans>\n            </Typography>\n\n            <Button variant=\"outlined\" size=\"small\" onClick={handleFindToken}>\n              <Trans>Retrieve Your Tokens</Trans>\n            </Button>\n          </Box> */}\n\n          <Box sx={{ margin: \"20px 0 0 0\" }}>\n            {loading ? (\n              <LoadingRow>\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n              </LoadingRow>\n            ) : no_data ? (\n              <NoData />\n            ) : (\n              <Box\n                sx={{\n                  overflow: \"auto\",\n                  margin: \"-16px 0 0 0\",\n                }}\n              >\n                {_balances.map((balance, index) => (\n                  <BalancesItem\n                    key={index}\n                    balance={balance}\n                    claimedKey={index}\n                    updateUnavailableKeys={handleUpdateUnavailableKeys}\n                    updateClaimedKey={handleUpdateClaimedKey}\n                    claimedKeys={claimedKeys}\n                  />\n                ))}\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </Wrapper>\n  );\n}\n","import { useCallback } from \"react\";\nimport { isPrincipal, isValidPrincipal } from \"@w2e/utils\";\nimport { tokenAdapter } from \"@w2e/token-adapter\";\nimport { Principal } from \"@dfinity/principal\";\nimport BigNumber from \"bignumber.js\";\nimport { useLatestDataCall } from \"../useCallData\";\n\nexport interface GetTokenBalanceArgs {\n  canisterId: string;\n  address: string | Principal;\n  sub?: Uint8Array;\n}\n\nexport async function getTokenBalance({ canisterId, address, sub }: GetTokenBalanceArgs) {\n  const result = await tokenAdapter.balance({\n    canisterId,\n    params: {\n      user: isPrincipal(address)\n        ? { principal: address }\n        : isValidPrincipal(address)\n        ? {\n            principal: Principal.fromText(address),\n          }\n        : { address },\n      token: \"\",\n      subaccount: sub ? [...sub] : undefined,\n    },\n  });\n\n  return result.data;\n}\n\nexport interface UserTokenBalanceArgs {\n  canisterId: string | undefined;\n  address: string | Principal | undefined;\n  sub?: Uint8Array;\n  reload?: boolean | number;\n}\n\nexport function useTokenBalance({ canisterId, address, sub, reload }: UserTokenBalanceArgs) {\n  return useLatestDataCall(\n    useCallback(async () => {\n      if (!address || !canisterId) return undefined;\n      const balance = await getTokenBalance({ canisterId, sub, address });\n      return balance === undefined ? undefined : new BigNumber(balance.toString());\n    }, [address, canisterId, sub]),\n    reload,\n  );\n}\n"],"names":["useHideUnavailableClaimManager","dispatch","useAppDispatch","hideUnavailableClaim","useAppSelector","state","customization","callback","useCallback","hide","updateHideUnavailableClaim","useMemo","CALL_LIMITED","un_deposit_fetch_index","unused_fetch_index","useUserSwapPoolBalances","principal","selectedTokenId","reload","result","pools","useSwapPools","loading","unDepositBalanceLoading","balances","unDepositBalances","_pools","setLoading","useState","setBalances","filter","pool","token0","address","token1","useEffect","_fetch","fetch_index","__awaiter","sub","SubAccount","fromPrincipal","Principal","fromText","toUint8Array","call","token","console","log","standard","includes","BigInt","getTokenBalance","canisterId","err","error","Promise","all","Object","assign","type","balance0","_a","balance1","_b","new_index","calls","i","length","push","allResult","_calls","map","concat","_balances","e","useUserUnDepositBalance","unUsedBalanceLoading","unUsedBalances","poolIds","toString","poolId","_result","getUserUnusedBalance","useUserUnUsedBalance","BalanceItem","_ref","balance","name","updateUnavailableKeys","updateClaimedKey","claimedKey","claimedKeys","theme","useTheme","openTip","closeTip","useTips","unavailableClaim","transFee","isClaimed","_jsxs","Grid","container","alignItems","sx","padding","borderRadius","background","palette","level1","margin","display","children","_jsx","Avatar","src","logo","width","height","Box","flex","justifyContent","Typography","color","fontSize","fontWeight","parseTokenAmount","decimals","toFormat","symbol","gap","SwapTooltip","tips","iconSize","Button","variant","fullWidth","size","disabled","onClick","async","loadingKey","MessageTypes","amount","deposit","status","ResultStatus","OK","withdraw","success","message","_result$message","startIcon","CircularProgress","Trans","id","BalancesItem","_ref2","useTokenInfo","SwapReclaim","useAccountPrincipalString","setSelectedTokenId","ICP","unavailableClaimKeys","setUnavailableClaimKeys","setClaimedKeys","reduce","prev","curr","arr","totalClaimedNumbers","handleUpdateUnavailableKeys","key","prevState","Set","handleUpdateClaimedKey","index","unavailableClaimNumbers","no_data","Wrapper","Breadcrumbs","prevLink","prevLabel","currentLabel","flexDirection","minWidth","SelectToken","search","value","border","onTokenChange","tokenId","cursor","handleToggleUnclaim","Checkbox","checked","onChange","event","userSelect","LoadingRow","NoData","overflow","P","resolve","reject","fulfilled","step","generator","next","rejected","throw","done","then","apply","thisArg","_arguments","arguments","tokenAdapter","isPrincipal","subaccount","undefined","data","useTokenBalance","BigNumber"],"sourceRoot":""}