{"version":3,"file":"static/js/1947.e67c34df.chunk.js","mappings":"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","sources":["assets/images/nft/verify.svg","components/NFT/VerifyNFT.tsx","hooks/nft/useNFTCalls.ts","components/NFT/CollectionAvatar.tsx","views/nft/MarketplaceCollections.tsx"],"sourcesContent":["var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgVerify(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.26589 0.47486C4.43544 0.139713 4.82194 -0.0243476 5.1808 0.0865051L7.70392 0.8659C7.85645 0.913017 8.01985 0.911591 8.17153 0.86182L10.6807 0.0385081C11.0375 -0.0785906 11.4268 0.0786986 11.6022 0.410836L12.8352 2.74607C12.9097 2.88724 13.0263 3.00177 13.1687 3.07383L15.5251 4.26589C15.8603 4.43544 16.0243 4.82194 15.9135 5.1808L15.1341 7.70392C15.087 7.85645 15.0884 8.01985 15.1382 8.17153L15.9615 10.6807C16.0786 11.0375 15.9213 11.4268 15.5892 11.6022L13.2539 12.8352C13.1128 12.9097 12.9982 13.0263 12.9262 13.1687L11.7341 15.5251C11.5646 15.8603 11.1781 16.0243 10.8192 15.9135L8.29608 15.1341C8.14355 15.087 7.98015 15.0884 7.82847 15.1382L5.31934 15.9615C4.96246 16.0786 4.57316 15.9213 4.39779 15.5892L3.16479 13.2539C3.09025 13.1128 2.9737 12.9982 2.83125 12.9262L0.47486 11.7341C0.139713 11.5646 -0.0243478 11.1781 0.0865048 10.8192L0.8659 8.29608C0.913016 8.14355 0.911591 7.98015 0.86182 7.82847L0.0385081 5.31934C-0.0785906 4.96246 0.0786988 4.57316 0.410836 4.39779L2.74607 3.16479C2.88724 3.09025 3.00177 2.9737 3.07383 2.83125L4.26589 0.47486Z\",\n    fill: \"#4954F6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.51172 7.99303L7.34618 9.8275L11.0151 6.61719\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgVerify);\nexport default __webpack_public_path__ + \"static/media/verify.2ec148b8e5850f17ee9fec763f965822.svg\";\nexport { ForwardRef as ReactComponent };","import { Box, Grid, Typography } from \"@mui/material\";\nimport { isICPSwapOfficial } from \"utils/index\";\nimport VerifyImage from \"assets/images/nft/verify.svg\";\nimport { shorten } from \"@w2e/utils\";\n\nexport interface LabelProps {\n  minter?: string;\n  secondaryColor?: boolean;\n  fontSize?: string;\n  textSX?: any;\n}\n\nfunction Label({ minter, secondaryColor, fontSize = \"12px\", textSX }: LabelProps) {\n  const value = isICPSwapOfficial(minter) ? \"ICPSwap\" : minter;\n\n  return (\n    <Typography color=\"text.primary\" fontSize={fontSize} sx={{ ...(textSX ?? {}) }}>\n      By{\" \"}\n      {secondaryColor ? (\n        <Typography color=\"secondary\" fontSize={fontSize} component=\"span\" sx={{ ...(textSX ?? {}) }}>\n          {shorten(value ?? \"\", 3)}\n        </Typography>\n      ) : (\n        shorten(value ?? \"\", 3)\n      )}\n    </Typography>\n  );\n}\n\nexport default function VerifyNFT({\n  minter,\n  sx,\n  justifyContent,\n  secondaryColor,\n  fontSize,\n  textSX,\n}: {\n  minter: string | undefined;\n  justifyContent?: string;\n  sx?: any;\n  secondaryColor?: boolean;\n  fontSize?: string;\n  textSX?: any;\n}) {\n  return isICPSwapOfficial(minter) ? (\n    <Grid container alignItems=\"center\" justifyContent={justifyContent || \"flex-start\"}>\n      <Label fontSize={fontSize} secondaryColor={secondaryColor} minter={minter} textSX={textSX} />\n      <Box\n        sx={{\n          width: \"14px\",\n          height: \"14px\",\n          marginLeft: \"4px\",\n          ...(sx || {}),\n        }}\n      >\n        <img width=\"100%\" height=\"100%\" src={VerifyImage} alt=\"\" />\n      </Box>\n    </Grid>\n  ) : (\n    <Grid container alignItems=\"center\" justifyContent={justifyContent || \"flex-start\"}>\n      <Label fontSize={fontSize} secondaryColor={secondaryColor} minter={minter} textSX={textSX} />\n    </Grid>\n  );\n}\n","import { useCallback } from \"react\";\nimport { PaginationResult, Identity } from \"types/index\";\nimport type {\n  NFTTokenMetadata,\n  NFTTransaction,\n  NFTCanisterInfo,\n  NFTTransferArgs,\n  NFTControllerArgs,\n  NFTBatchMintArgs,\n  NFTControllerInfo,\n  StatusResult,\n} from \"@w2e/types\";\nimport { OLD_CANISTER_IDS } from \"constants/nft\";\nimport { resultFormat, principalToAccount, isAvailablePageArgs } from \"@w2e/utils\";\nimport { swapNFT, NFTCanisterController, NFTCanister } from \"@w2e/actor\";\nimport { useCallsData } from \"@w2e/hooks\";\nimport { Principal } from \"@dfinity/principal\";\nimport { v2SwapNFT } from \"actor/swapV2\";\n\nexport async function approveForAll(identity: Identity, spenderCanisterId: string) {\n  const spender = principalToAccount(spenderCanisterId);\n  const result = await (await swapNFT(identity)).approveForAll({ spender: { address: spender }, approved: true });\n  return resultFormat(result);\n}\n\nexport async function allowanceAll(account: string, spenderCanisterId: string) {\n  const spender = principalToAccount(spenderCanisterId);\n  return resultFormat<boolean>(await (await swapNFT()).isApproveForAll(account, spender)).data;\n}\n\nexport async function v2ApproveAll(identity: Identity, spenderCanisterId: string) {\n  const spender = principalToAccount(spenderCanisterId);\n  const result = await (await v2SwapNFT(identity)).approveForAll({ spender: { address: spender }, approved: true });\n  return resultFormat(result);\n}\n\nexport async function v2AllowanceAll(account: string, spenderCanisterId: string) {\n  const spender = principalToAccount(spenderCanisterId);\n  return resultFormat<boolean>(await (await v2SwapNFT()).isApproveForAll(account, spender)).data;\n}\n\nexport async function findTokenListByPool(principal: Principal, pool: string, offset: number, limit: number) {\n  return resultFormat<PaginationResult<NFTTokenMetadata>>(\n    await (await swapNFT()).findTokenListByPool(pool, BigInt(offset), BigInt(limit)),\n  ).data;\n}\n\nexport function useUserNFTs(user: Principal | undefined, offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!user || !isAvailablePageArgs(offset, limit)) return undefined;\n\n      return resultFormat<PaginationResult<NFTTokenMetadata>>(\n        await (await swapNFT()).findTokenList({ principal: user }, BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [user]),\n  );\n}\n\nexport async function findV2TokenListByPool(\n  account: string,\n  searchCondition: { k: string; v: string }[],\n  offset: number,\n  limit: number,\n) {\n  return resultFormat<PaginationResult<NFTTokenMetadata>>(\n    await (await v2SwapNFT()).findMatchNFTLists({ address: account }, searchCondition, BigInt(offset), BigInt(limit)),\n  ).data;\n}\n\nexport async function getSwapNFTTokenURI(tokenId: bigint | number) {\n  const { data } = resultFormat<string>(await (await swapNFT()).tokenURI(BigInt(tokenId)));\n  return JSON.parse(data ?? \"\") as { image: string; [key: string]: any };\n}\n\nexport function useMintNFTCallback(): (\n  canisterId: string,\n  identity: Identity,\n  params: NFTBatchMintArgs,\n) => Promise<StatusResult<bigint>> {\n  return useCallback(async (canisterId, identity, params) => {\n    if (params.count && BigInt(params.count) > 1) {\n      return resultFormat<bigint>(await (await NFTCanister(canisterId, identity)).mint_batch(params));\n    }\n\n    return resultFormat<bigint>(\n      await (\n        await NFTCanister(canisterId, identity)\n      ).mint({\n        ...params,\n      }),\n    );\n  }, []);\n}\n\nexport function useNFTMetadata(\n  canisterId: string | undefined | null,\n  tokenId: number | bigint | null | undefined,\n  reload?: any,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || (!tokenId && tokenId !== 0)) return undefined;\n      return resultFormat<NFTTokenMetadata>(await (await NFTCanister(canisterId)).icsMetadata(Number(tokenId))).data;\n    }, [tokenId]),\n    reload,\n  );\n}\n\nexport function useNFTTransaction(\n  canisterId: string,\n  tokenIdentifier: string | null | undefined,\n  offset: number,\n  limit: number,\n  reload?: boolean,\n) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !tokenIdentifier || !isAvailablePageArgs(offset, limit)) return undefined;\n      return resultFormat<PaginationResult<NFTTransaction>>(\n        await (await NFTCanister(canisterId)).findTxRecord(tokenIdentifier, BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [canisterId, tokenIdentifier, offset, limit]),\n    reload,\n  );\n}\n\nexport function useUserNFTTransactions(canisterId: string, account: string, offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !account || !isAvailablePageArgs(offset, limit)) return undefined;\n\n      return resultFormat<PaginationResult<NFTTransaction>>(\n        await (await NFTCanister(canisterId)).findTokenTxRecord({ address: account }, BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [account, offset, limit]),\n  );\n}\n\nexport function useNFTTransferCallback(): (\n  canisterId: string,\n  identity: Identity,\n  params: NFTTransferArgs,\n) => Promise<StatusResult<boolean>> {\n  return useCallback(\n    async (canisterId, identity, params) =>\n      resultFormat<boolean>(await (await NFTCanister(canisterId, identity)).transfer(params)),\n    [],\n  );\n}\n\nexport function useCanisterCycles(canisterId: string) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return resultFormat<bigint>(await (await NFTCanister(canisterId)).cycleBalance()).data;\n    }, [canisterId]),\n  );\n}\n\nexport function useCanisterUserNFTCount(canisterId: string, account: string, reload?: boolean | number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !account) return undefined;\n      return resultFormat<bigint>(await (await NFTCanister(canisterId)).ownerNFTCount({ address: account })).data;\n    }, [canisterId, account]),\n    reload,\n  );\n}\n\nexport function useNFTCanisterList(offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!isAvailablePageArgs(offset, limit)) return undefined;\n      return resultFormat<PaginationResult<NFTControllerInfo>>(\n        await (await NFTCanisterController()).findCanister(BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [offset, limit]),\n  );\n}\n\nexport function useUserCanisterList(account: string, offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!isAvailablePageArgs(offset, limit)) return undefined;\n      return resultFormat<PaginationResult<NFTControllerInfo>>(\n        await (await NFTCanisterController()).findUserCanister(account, BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [offset, limit]),\n  );\n}\n\nexport async function createCanister(values: NFTControllerArgs): Promise<StatusResult<string>> {\n  return resultFormat<string>(await (await NFTCanisterController(true)).create(values));\n}\n\nexport async function setCanisterLogo(canisterId: string, logo: string) {\n  return resultFormat<boolean>(await (await NFTCanister(canisterId, true)).setLogo(logo));\n}\n\nexport async function setCanisterLogoInController(canisterId: string, logo: string) {\n  return resultFormat<boolean>(await (await NFTCanisterController(true)).setLogo(logo, canisterId));\n}\n\nexport function useCanisterMetadata(canisterId: string) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      if (OLD_CANISTER_IDS.includes(canisterId))\n        return resultFormat<NFTControllerInfo>(await (await NFTCanisterController()).canisterInfo(canisterId)).data;\n      return resultFormat<NFTCanisterInfo>(await (await NFTCanister(canisterId)).canisterInfo()).data;\n    }, [canisterId]),\n  );\n}\n\nexport async function getCanisterLogo(canisterId: string) {\n  // The there canisters doesn't has info method in canister\n  if (OLD_CANISTER_IDS.includes(canisterId))\n    return resultFormat<NFTControllerInfo>(await (await NFTCanisterController()).canisterInfo(canisterId)).data?.image;\n  return resultFormat<NFTCanisterInfo>(await (await NFTCanister(canisterId)).canisterInfo()).data?.image;\n}\n\nexport function useCanisterLogo(canisterId: string) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId) return undefined;\n      return await getCanisterLogo(canisterId);\n    }, [canisterId]),\n  );\n}\n\nexport function useCanisterNFTList(canisterId: string, account: string, offset: number, limit: number) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!canisterId || !account || !isAvailablePageArgs(offset, limit)) return undefined;\n\n      return resultFormat<PaginationResult<NFTTokenMetadata>>(\n        await (await NFTCanister(canisterId)).findTokenList({ address: account }, BigInt(offset), BigInt(limit)),\n      ).data;\n    }, [canisterId, account, offset, limit]),\n  );\n}\n\nexport function useNFTMintInfo() {\n  return useCallsData(\n    useCallback(async () => {\n      return resultFormat<[bigint, bigint, string, string]>(await (await NFTCanisterController()).feeInfo()).data;\n    }, []),\n  );\n}\n\nexport async function getSwapNFTStat() {\n  return resultFormat<[bigint, bigint]>(await (await swapNFT()).getNftStat()).data;\n}\n","import { Box, Grid, Avatar } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport type { NFTControllerInfo } from \"@w2e/types\";\nimport VerifyNFT from \"components/NFT/VerifyNFT\";\n\nconst useStyles = makeStyles(() => {\n  return {\n    avatarWrapper: {\n      borderRadius: \"12px\",\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\",\n    },\n\n    bg: {\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center center\",\n      borderRadius: \"inherit\",\n      width: \"100%\",\n      height: \"100%\",\n      filter: \"blur(30px)\",\n      \"-webkit-mask\": \"linear-gradient(0deg, rgb(53, 56, 64) 0%, rgba(53, 56, 64, 0.4) 100%)\",\n      overflow: \"hidden\",\n    },\n\n    avatarBox: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n\n    avatar: {\n      width: \"94px\",\n      height: \"94px\",\n      border: \"3px solid #ffffff\",\n      borderRadius: \"50%\",\n    },\n  };\n});\n\nexport default function CollectionAvatar({ metadata }: { metadata: NFTControllerInfo | undefined | null }) {\n  const classes = useStyles();\n\n  return (\n    <Box className={`${classes.avatarWrapper} avatarWrapper`}>\n      <Box className={classes.bg} sx={{ fontSize: \"28px\", backgroundImage: `url(${metadata?.image})` }} />\n\n      <Box className={classes.avatarBox}>\n        <Avatar className={classes.avatar} src={metadata?.image ?? \"\"}>\n          &nbsp;\n        </Avatar>\n\n        <Grid container justifyContent=\"center\" mt=\"20px\">\n          <VerifyNFT\n            minter={metadata?.creator}\n            justifyContent=\"center\"\n            fontSize=\"14px\"\n            textSX={{\n              textShadow: \"0px 3px 4px rgba(0, 0, 0, 0.1)\",\n            }}\n          />\n        </Grid>\n      </Box>\n    </Box>\n  );\n}\n","import { useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Box, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Breadcrumbs, MainCard } from \"components/index\";\nimport { useNFTCanisterList, useCanisterMetadata } from \"hooks/nft/useNFTCalls\";\nimport { Theme } from \"@mui/material/styles\";\nimport Wrapper from \"components/Wrapper\";\nimport { Trans } from \"@lingui/macro\";\nimport type { NFTControllerInfo } from \"@w2e/types\";\nimport Loading from \"components/Loading/Static\";\nimport CollectionAvatar from \"components/NFT/CollectionAvatar\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return {\n    collectionsWrapper: {\n      position: \"relative\",\n      display: \"grid\",\n      gridGap: \"20px 20px\",\n      gridTemplateColumns: \"1fr 1fr 1fr\",\n      width: \"fit-content\",\n      \"@media (max-width:479px)\": {\n        position: \"static\",\n        right: \"0\",\n        gridGap: \"20px 20px\",\n        gridTemplateColumns: \"1fr\",\n        width: \"auto\",\n      },\n      \"@media (min-width:480px) and (max-width:719px)\": {\n        position: \"static\",\n        right: \"0\",\n        gridGap: \"20px 20px\",\n        gridTemplateColumns: \"1fr 1fr\",\n        width: \"auto\",\n      },\n      \"@media (min-width:720px) and (max-width:1060px)\": {\n        position: \"static\",\n        right: \"0\",\n        gridGap: \"20px 20px\",\n        gridTemplateColumns: \"1fr 1fr 1fr\",\n        width: \"auto\",\n      },\n      \"@media (min-width:1060px) \": {\n        position: \"static\",\n        right: \"0\",\n        gridGap: \"20px 20px\",\n        gridTemplateColumns: \"repeat(4, 1fr)\",\n        width: \"auto\",\n      },\n    },\n\n    collectionWrapper: {\n      background: theme.palette.background.level4,\n      padding: \"8px 8px 20px 8px\",\n      border: \"1px solid #2F3C6D\",\n      borderRadius: \"12px\",\n      cursor: \"pointer\",\n    },\n\n    avatar: {\n      width: \"100px\",\n      height: \"100px\",\n    },\n  };\n});\n\nexport function CollectionCard({ collection }: { collection: NFTControllerInfo }) {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const { result: metadata } = useCanisterMetadata(collection.cid);\n\n  const handleCollectionClick = () => {\n    history.push(`/marketplace/NFT/${collection.cid}`);\n  };\n\n  return (\n    <Box className={classes.collectionWrapper} onClick={handleCollectionClick}>\n      <Box\n        sx={{\n          height: \"194px\",\n          borderRadius: \"12px\",\n        }}\n      >\n        <CollectionAvatar metadata={metadata} />\n      </Box>\n\n      <Box mt=\"40px\">\n        <Typography\n          color=\"text.primary\"\n          fontSize=\"18px\"\n          fontWeight=\"600\"\n          align=\"center\"\n          sx={{\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          {collection.name}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nconst filteredNFTs = [\n  \"rppv3-yqaaa-aaaan-qcx4q-cai\",\n  \"46dg2-ciaaa-aaaan-qa3dq-cai\",\n  \"v4jsw-5aaaa-aaaan-qaoha-cai\",\n  \"ey3ct-4aaaa-aaaak-aaueq-cai\",\n  \"e7xmv-vyaaa-aaaag-qahha-cai\",\n  \"ewuhj-dqaaa-aaaag-qahgq-cai\",\n];\n\nexport default function MarketplaceCollections() {\n  const classes = useStyles();\n  const { result, loading } = useNFTCanisterList(0, 1000);\n\n  const collections = useMemo(() => {\n    return result?.content.filter((e) => !filteredNFTs.includes(e.cid)) ?? [];\n  }, [result]);\n\n  return (\n    <Wrapper>\n      <Breadcrumbs\n        prevLink=\"/marketplace/NFT\"\n        prevLabel={<Trans>Marketplace</Trans>}\n        currentLabel={<Trans>Collections</Trans>}\n      />\n\n      <Box sx={{ margin: \"60px 0 40px 0\" }}>\n        <Typography color=\"text.primary\" fontWeight=\"700\" fontSize=\"30px\">\n          <Trans>Collections</Trans>\n        </Typography>\n      </Box>\n\n      <MainCard>\n        <Box className={classes.collectionsWrapper}>\n          {collections.map((collection, index) => (\n            <Box\n              key={`${collection.cid}-${index}`}\n              sx={{\n                overflow: \"hidden\",\n              }}\n            >\n              <CollectionCard collection={collection} />\n            </Box>\n          ))}\n        </Box>\n\n        {loading ? <Loading loading={loading} /> : null}\n      </MainCard>\n    </Wrapper>\n  );\n}\n"],"names":["Label","_ref","minter","secondaryColor","fontSize","textSX","value","isICPSwapOfficial","_jsxs","Typography","color","sx","children","_jsx","component","shorten","VerifyNFT","_ref2","justifyContent","Grid","container","alignItems","Box","width","height","marginLeft","src","VerifyImage","alt","useMintNFTCallback","useCallback","async","canisterId","identity","params","count","BigInt","resultFormat","NFTCanister","mint_batch","mint","useNFTMetadata","tokenId","reload","useCallsData","icsMetadata","Number","data","useNFTTransaction","tokenIdentifier","offset","limit","isAvailablePageArgs","findTxRecord","useUserNFTTransactions","account","findTokenTxRecord","address","useNFTTransferCallback","transfer","useCanisterCycles","cycleBalance","useCanisterUserNFTCount","ownerNFTCount","useNFTCanisterList","NFTCanisterController","findCanister","useUserCanisterList","findUserCanister","createCanister","values","create","setCanisterLogo","logo","setLogo","setCanisterLogoInController","useCanisterMetadata","OLD_CANISTER_IDS","includes","canisterInfo","useCanisterLogo","_resultFormat$data","_resultFormat$data2","image","getCanisterLogo","useCanisterNFTList","findTokenList","useNFTMintInfo","feeInfo","getSwapNFTStat","swapNFT","getNftStat","useStyles","makeStyles","avatarWrapper","borderRadius","position","bg","backgroundSize","backgroundPosition","filter","overflow","avatarBox","top","left","transform","avatar","border","CollectionAvatar","_metadata$image","metadata","classes","className","concat","backgroundImage","Avatar","mt","creator","textShadow","theme","collectionsWrapper","display","gridGap","gridTemplateColumns","right","collectionWrapper","background","palette","level4","padding","cursor","CollectionCard","collection","history","useHistory","result","cid","onClick","handleCollectionClick","push","fontWeight","align","textOverflow","whiteSpace","name","filteredNFTs","MarketplaceCollections","loading","collections","useMemo","_result$content$filte","content","e","Wrapper","Breadcrumbs","prevLink","prevLabel","Trans","id","currentLabel","margin","MainCard","map","index","Loading"],"sourceRoot":""}