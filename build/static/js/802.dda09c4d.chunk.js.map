{"version":3,"file":"static/js/802.dda09c4d.chunk.js","mappings":"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","sources":["views/swap-liquidity-v3/MisTransferTokens.tsx","hooks/swap/useUserMisTransferredTokens.ts","../packages/hooks/src/token/useTokenBalance.ts"],"sourcesContent":["import { useState, useMemo } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Typography, Box, Grid, Button, CircularProgress, Avatar } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { NoData, LoadingRow, Wrapper, Breadcrumbs, SelectToken } from \"components/index\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { TOKEN_STANDARD, ResultStatus, type AllTokenOfSwapTokenInfo } from \"@w2e/types\";\nimport { Trans } from \"@lingui/macro\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { TokenInfo } from \"types/token\";\nimport Identity, { CallbackProps, SubmitLoadingProps } from \"components/Identity/index\";\nimport { useTips, MessageTypes } from \"hooks/useTips\";\nimport { Identity as CallIdentity } from \"types/global\";\nimport { ICP } from \"constants/index\";\nimport {\n  useUserMisTransferredTokens,\n  MisTransferredResult,\n  withdrawMisTransferredToken,\n} from \"hooks/swap/useUserMisTransferredTokens\";\n\ninterface BalanceItemProps {\n  pool: string;\n  border?: boolean;\n  token: TokenInfo;\n  name: string | undefined;\n  data: MisTransferredResult;\n  balance: bigint;\n  onClaimSuccess?: (symbol: string) => void;\n  symbol: string;\n}\n\nexport function BalanceItem({ token, symbol, balance, name, pool, data, onClaimSuccess }: BalanceItemProps) {\n  const theme = useTheme() as Theme;\n\n  const [openTip, closeTip] = useTips();\n\n  const handleClaim = async (identity: CallIdentity, { loading }: SubmitLoadingProps) => {\n    if (loading) return;\n\n    const loadingKey = openTip(\n      `Reclaim your ${parseTokenAmount(balance, token.decimals).toFormat()} ${token.symbol}`,\n      MessageTypes.loading,\n    );\n\n    if (data) {\n      const result = await withdrawMisTransferredToken(pool, token.canisterId, \"ICRC1\");\n\n      if (result.status === ResultStatus.OK) {\n        openTip(`Retrieve ${name} ${token?.symbol} successfully`, MessageTypes.success);\n        if (onClaimSuccess) onClaimSuccess(symbol);\n      } else {\n        openTip(result.message ?? `Failed to retrieve ${name} ${token.symbol}`, MessageTypes.error);\n      }\n    }\n\n    closeTip(loadingKey);\n  };\n\n  return (\n    <Grid\n      container\n      alignItems=\"center\"\n      sx={{ padding: \"24px\", borderRadius: \"12px\", background: theme.palette.background.level1, margin: \"16px 0 0 0\" }}\n    >\n      <Avatar src={token.logo} sx={{ width: \"32px\", height: \"32px\", margin: \"0 12px 0 0\" }}>\n        &nbsp;\n      </Avatar>\n\n      <Box sx={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <Box>\n          <Typography color=\"text.primary\" sx={{ fontSize: \"24px\", fontWeight: 600 }}>\n            {parseTokenAmount(balance, token.decimals).toFormat()} {token.symbol}\n          </Typography>\n          <Typography sx={{ margin: \"4px 0 0 0\" }}>{name}</Typography>\n        </Box>\n\n        <Box>\n          <Identity onSubmit={handleClaim}>\n            {({ submit, loading }: CallbackProps) => (\n              <Button\n                variant=\"contained\"\n                fullWidth\n                size=\"medium\"\n                disabled={loading}\n                onClick={submit}\n                startIcon={loading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n              >\n                <Trans>Retrieve</Trans>\n              </Button>\n            )}\n          </Identity>\n        </Box>\n      </Box>\n    </Grid>\n  );\n}\n\nexport function BalancesItem({ balance }: { end: boolean; balance: MisTransferredResult }) {\n  const { result: token } = useTokenInfo(balance.tokenAddress);\n  const { result: token0 } = useTokenInfo(balance.token0Address);\n  const { result: token1 } = useTokenInfo(balance.token1Address);\n\n  const name = token0 && token1 ? `${token0.symbol}/${token1.symbol}` : \"--\";\n\n  const [claimedSymbol, setClaimedSymbol] = useState<string[]>([]);\n\n  const handleClaimedSuccess = (symbol: string) => {\n    setClaimedSymbol([...new Set([...claimedSymbol, symbol])]);\n  };\n\n  const symbol = `${balance.poolId}_${balance.tokenAddress}`;\n\n  return token && !claimedSymbol.includes(symbol) ? (\n    <BalanceItem\n      pool={balance.poolId}\n      token={token}\n      name={name}\n      balance={balance.balance}\n      data={balance}\n      onClaimSuccess={handleClaimedSuccess}\n      symbol={symbol}\n    />\n  ) : null;\n}\n\nexport default function SwapFindMisTransferTokens() {\n  const [selectedTokenId, setSelectedTokenId] = useState<string>(ICP.address);\n\n  const { result, loading } = useUserMisTransferredTokens({ tokenId: selectedTokenId });\n\n  const misTransferredTokens = useMemo(() => {\n    if (!result) return [];\n    return result\n      .filter((ele) => ele.balance !== BigInt(0))\n      .filter((ele) => ele.tokenAddress !== ele.token0Address && ele.tokenAddress !== ele.token1Address);\n  }, [result]);\n\n  const handleTokenChange = (tokenId: string) => {\n    setSelectedTokenId(tokenId);\n  };\n\n  return (\n    <Wrapper>\n      <Box sx={{ margin: \"10px 0 0 0\" }}>\n        <Breadcrumbs\n          prevLink=\"/swap\"\n          prevLabel={<Trans>Swap</Trans>}\n          currentLabel={<Trans>Retrieve Your Tokens</Trans>}\n        />\n      </Box>\n\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", margin: \"40px 0 0 0\" }}>\n        <Box sx={{ width: \"800px\" }}>\n          <Typography sx={{ fontSize: \"24px\", fontWeight: 500 }} color=\"text.primary\">\n            <Trans>Retrieve Your Tokens</Trans>\n          </Typography>\n\n          <Typography sx={{ margin: \"10px 0 0 0\" }}>\n            <Trans>\n              This function is designed to help you retrieve tokens that you may have accidentally sent to ICPSwap's\n              swap pool canisters. It automatically searches for tokens that may have been misplaced in the Swap Pools\n              and assists in transferring them back to you. First, select the token type you wish to retrieve, and then\n              click on ' Retrieve ' after it complete searching.\n            </Trans>\n          </Typography>\n\n          <Box sx={{ display: \"flex\", alignItems: \"center\", gap: \"0 10px\", margin: \"32px 0 0 0\" }}>\n            <Typography color=\"text.primary\">\n              <Trans>Select Token</Trans>\n            </Typography>\n\n            <Box sx={{ minWidth: \"106px\" }}>\n              <SelectToken\n                value={selectedTokenId}\n                border\n                onTokenChange={handleTokenChange}\n                filter={(tokenInfo: AllTokenOfSwapTokenInfo) =>\n                  tokenInfo.standard !== TOKEN_STANDARD.ICRC1 && tokenInfo.standard !== TOKEN_STANDARD.ICRC2\n                }\n              />\n            </Box>\n          </Box>\n\n          <Box sx={{ margin: \"20px 0 0 0\" }}>\n            {loading ? (\n              <LoadingRow>\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n              </LoadingRow>\n            ) : misTransferredTokens.length > 0 ? (\n              <Box\n                sx={{\n                  overflow: \"auto\",\n                  margin: \"-16px 0 0 0\",\n                }}\n              >\n                {misTransferredTokens.map((balance, index) => (\n                  <BalancesItem key={index} balance={balance} end={index === misTransferredTokens.length - 1} />\n                ))}\n              </Box>\n            ) : (\n              <NoData />\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </Wrapper>\n  );\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport { getTokenBalance, useSwapPools } from \"@w2e/hooks\";\nimport { swapPool } from \"@w2e/actor\";\nimport { resultFormat } from \"@w2e/utils\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { SubAccount } from \"@dfinity/ledger-icp\";\n\nexport interface useUserMisTransferredTokensArgs {\n  tokenId: string | undefined;\n}\n\nexport type MisTransferredResult = {\n  poolId: string;\n  balance: bigint;\n  tokenAddress: string;\n  token0Address: string;\n  token1Address: string;\n};\n\nexport function useUserMisTransferredTokens({ tokenId }: useUserMisTransferredTokensArgs) {\n  const [loading, setLoading] = useState(true);\n  const [misTransferred, setMisTransferred] = useState<MisTransferredResult[]>([]);\n\n  const { result: allSwapPools } = useSwapPools();\n  const principal = useAccountPrincipal();\n\n  useEffect(() => {\n    async function call() {\n      if (tokenId && principal && !!allSwapPools && allSwapPools.length > 0) {\n        setLoading(true);\n\n        const result = await Promise.all(\n          allSwapPools.map(async (pool) => {\n            const sub = SubAccount.fromPrincipal(principal).toUint8Array();\n            return await getTokenBalance({ canisterId: tokenId, address: pool.canisterId.toString(), sub });\n          }),\n        );\n\n        setMisTransferred(\n          result.map((ele, index) => {\n            const pool = allSwapPools[index];\n            const poolId = pool.canisterId.toString();\n\n            return {\n              poolId,\n              balance: ele ?? BigInt(0),\n              tokenAddress: tokenId,\n              token0Address: pool.token0.address,\n              token1Address: pool.token1.address,\n            };\n          }),\n        );\n        setLoading(false);\n      }\n    }\n\n    call();\n  }, [allSwapPools, tokenId, principal]);\n\n  return useMemo(() => ({ loading, result: misTransferred }), [loading, misTransferred]);\n}\n\nexport async function withdrawMisTransferredToken(poolId: string, tokenId: string, standard: string) {\n  return resultFormat<bigint>(\n    await (\n      await swapPool(poolId, true)\n    ).withdrawMistransferBalance({\n      address: tokenId,\n      standard,\n    }),\n  );\n}\n","import { useCallback } from \"react\";\nimport { isPrincipal, isValidPrincipal } from \"@w2e/utils\";\nimport { tokenAdapter } from \"@w2e/token-adapter\";\nimport { Principal } from \"@dfinity/principal\";\nimport BigNumber from \"bignumber.js\";\nimport { useLatestDataCall } from \"../useCallData\";\n\nexport interface GetTokenBalanceArgs {\n  canisterId: string;\n  address: string | Principal;\n  sub?: Uint8Array;\n}\n\nexport async function getTokenBalance({ canisterId, address, sub }: GetTokenBalanceArgs) {\n  const result = await tokenAdapter.balance({\n    canisterId,\n    params: {\n      user: isPrincipal(address)\n        ? { principal: address }\n        : isValidPrincipal(address)\n        ? {\n            principal: Principal.fromText(address),\n          }\n        : { address },\n      token: \"\",\n      subaccount: sub ? [...sub] : undefined,\n    },\n  });\n\n  return result.data;\n}\n\nexport interface UserTokenBalanceArgs {\n  canisterId: string | undefined;\n  address: string | Principal | undefined;\n  sub?: Uint8Array;\n  reload?: boolean | number;\n}\n\nexport function useTokenBalance({ canisterId, address, sub, reload }: UserTokenBalanceArgs) {\n  return useLatestDataCall(\n    useCallback(async () => {\n      if (!address || !canisterId) return undefined;\n      const balance = await getTokenBalance({ canisterId, sub, address });\n      return balance === undefined ? undefined : new BigNumber(balance.toString());\n    }, [address, canisterId, sub]),\n    reload,\n  );\n}\n"],"names":["BalanceItem","_ref","token","symbol","balance","name","pool","data","onClaimSuccess","theme","useTheme","openTip","closeTip","useTips","_jsxs","Grid","container","alignItems","sx","padding","borderRadius","background","palette","level1","margin","children","_jsx","Avatar","src","logo","width","height","Box","display","flex","justifyContent","Typography","color","fontSize","fontWeight","parseTokenAmount","decimals","toFormat","Identity","onSubmit","async","identity","_ref2","loading","loadingKey","concat","MessageTypes","result","poolId","tokenId","standard","resultFormat","swapPool","withdrawMistransferBalance","address","withdrawMisTransferredToken","canisterId","_result$message","status","ResultStatus","OK","success","message","error","_ref3","submit","Button","variant","fullWidth","size","disabled","onClick","startIcon","CircularProgress","Trans","id","BalancesItem","_ref4","useTokenInfo","tokenAddress","token0","token0Address","token1","token1Address","claimedSymbol","setClaimedSymbol","useState","includes","Set","SwapFindMisTransferTokens","selectedTokenId","setSelectedTokenId","ICP","setLoading","misTransferred","setMisTransferred","allSwapPools","useSwapPools","principal","useAccountPrincipal","useEffect","length","Promise","all","map","sub","SubAccount","fromPrincipal","toUint8Array","getTokenBalance","toString","ele","index","BigInt","call","useMemo","useUserMisTransferredTokens","misTransferredTokens","filter","Wrapper","Breadcrumbs","prevLink","prevLabel","currentLabel","gap","minWidth","SelectToken","value","border","onTokenChange","tokenInfo","TOKEN_STANDARD","ICRC1","ICRC2","LoadingRow","overflow","end","NoData","P","resolve","reject","fulfilled","step","generator","next","e","rejected","throw","done","then","apply","thisArg","_arguments","_a","arguments","tokenAdapter","isPrincipal","Principal","fromText","subaccount","undefined","useTokenBalance","reload","useCallback","__awaiter","BigNumber"],"sourceRoot":""}