{"version":3,"file":"static/js/2048.69817617.chunk.js","mappings":"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","sources":["views/token-claim/EventSelector.tsx","views/token-claim/Config.tsx","views/token-claim/create.tsx","../packages/utils/src/isValidAccount.ts"],"sourcesContent":["import { FilledTextField } from \"components/index\";\nimport { t } from \"@lingui/macro\";\nimport { useClaimEvents } from \"@w2e/hooks\";\n\nexport default function EventSelector({\n  onChange,\n  value,\n}: {\n  value: string | undefined;\n  onChange?: (eventId: string) => void;\n}) {\n  const { result: claimEvents } = useClaimEvents(0, 10000);\n\n  const menus = claimEvents?.content.map((ele) => {\n    return {\n      label: ele.claimEventName,\n      value: ele.claimEventId,\n    };\n  });\n\n  return (\n    <FilledTextField\n      select\n      menus={menus}\n      placeholder={t`Select claim event`}\n      onChange={(value: string) => {\n        if (onChange) onChange(value);\n      }}\n      value={value}\n    />\n  );\n}\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from \"react\";\nimport { Typography, Box, Input } from \"@mui/material\";\nimport { FilledTextField } from \"components/index\";\nimport { MessageTypes, useTips } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { formatTokenAmount, isValidAccount, numberToString, isValidPrincipal } from \"@w2e/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { ResultStatus, type ActorIdentity, type StatusResult } from \"@w2e/types\";\nimport Button from \"components/authentication/ButtonConnector\";\nimport { useEvent, setClaimEventReady, setClaimEventState, setClaimEventData } from \"@w2e/hooks\";\nimport { read, utils } from \"xlsx\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { Principal } from \"@dfinity/principal\";\nimport EventSelector from \"./EventSelector\";\n\ntype UserClaimItem = {\n  address: string;\n  amount: number;\n};\n\ntype ExcelClaimItem = {\n  address: string;\n  amount: number;\n  __rowNum__: number;\n};\n\nexport default function EventConfig() {\n  const [eventId, setEventId] = useState(\"\");\n  const [stateValue, setStateValue] = useState(\"\");\n  const [openTip] = useTips();\n\n  const [userClaims, setUserClaims] = useState<UserClaimItem[]>([]);\n  const [inValidUserClaims, setInvalidUserClaims] = useState<ExcelClaimItem[]>([]);\n\n  const { result: event } = useEvent(eventId);\n\n  const { result: tokenInfo } = useTokenInfo(event?.tokenCid);\n\n  const [importLoading, setImportLoading] = useState(false);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files ? event.target.files[0] : null;\n    if (!file) return;\n\n    setImportLoading(true);\n\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n\n    reader.onload = (e: any) => {\n      const data = e.target.result;\n\n      const xlsx = read(data, {\n        type: \"binary\",\n      });\n\n      const userClaims: UserClaimItem[] = [];\n      const inValidUserClaims: ExcelClaimItem[] = [];\n\n      for (let i = 0; i < xlsx.SheetNames.length; i++) {\n        const sheetData = utils.sheet_to_json<ExcelClaimItem>(xlsx.Sheets[xlsx.SheetNames[i]]);\n\n        for (let i = 0; i < sheetData.length; i++) {\n          const { address } = sheetData[i];\n          const { amount } = sheetData[i];\n\n          if (!address || amount === undefined) {\n            openTip(t`Incorrect file content`, MessageTypes.error);\n            break;\n          }\n\n          if (\n            (isValidAccount(address) || isValidPrincipal(address)) &&\n            !new BigNumber(amount).isNaN() &&\n            new BigNumber(amount).isGreaterThan(0)\n          ) {\n            userClaims.push(sheetData[i]);\n          } else {\n            inValidUserClaims.push(sheetData[i]);\n          }\n        }\n      }\n\n      setUserClaims(userClaims);\n      setInvalidUserClaims(inValidUserClaims);\n\n      setImportLoading(false);\n\n      // reset input value\n      event.target.value = \"\";\n    };\n  };\n\n  const ExcelTotalAmount = tokenInfo\n    ? userClaims.reduce((prev, curr) => {\n      return prev.plus(new BigNumber(curr.amount).toFixed(tokenInfo.decimals, BigNumber.ROUND_DOWN));\n    }, new BigNumber(0))\n    : new BigNumber(0);\n\n  const States = [\n    { label: \"Live\", value: \"live\" },\n    { label: \"Closed\", value: \"closed\" },\n  ];\n\n  const handleSetReady = async (identity: ActorIdentity) => {\n    const { status: status2, message: message2 } = await setClaimEventReady(eventId, identity);\n    openTip(status2 === ResultStatus.OK ? \"Set event ready successfully\" : message2, status2);\n  };\n\n  const handleSetState = async (identity: ActorIdentity) => {\n    const { status: status3, message: message3 } = await setClaimEventState(eventId, stateValue === \"live\", identity);\n    openTip(status3 === ResultStatus.OK ? \"Set event state successfully\" : message3, status3);\n  };\n\n  const handleImportUserData = async (identity: ActorIdentity) => {\n    if (!identity || !tokenInfo) return;\n\n    const _userClaims = userClaims.map((ele) => ({\n      user: isValidPrincipal(ele.address) ? { principal: Principal.fromText(ele.address) } : { address: ele.address },\n      quota: BigInt(\n        numberToString(\n          formatTokenAmount(\n            new BigNumber(ele.amount).toFixed(tokenInfo.decimals, BigNumber.ROUND_DOWN),\n            tokenInfo.decimals,\n          ),\n        ),\n      ),\n    }));\n\n    const promises: Promise<StatusResult<boolean>>[] = [];\n\n    for (let i = 0; i < _userClaims.length; i += 20000) {\n      const userClaims = _userClaims.slice(i, i + 20000);\n      promises.push(setClaimEventData(eventId, userClaims, identity));\n    }\n\n    await Promise.all(promises)\n      .then((result) => {\n        result.forEach((res) => {\n          openTip(res.status === ResultStatus.OK ? t`Set event user data successfully` : res.message, res.status);\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  return (\n    <>\n      <Box mt=\"30px\" />\n\n      <hr />\n\n      <Box mt=\"30px\" sx={{ display: \"flex\", flexDirection: \"column\", gap: \"20px 0\" }}>\n        <Box sx={{ width: \"600px\" }}>\n          <EventSelector value={eventId} onChange={(eventId: string) => setEventId(eventId)} />\n        </Box>\n\n        <Box sx={{ width: \"100px\" }}>\n          <Box sx={{ display: \"grid\", gridTemplateColumns: \"100px 200px\", gap: \"0 20px\" }}>\n            <Typography color=\"text.primary\">Set Ready:</Typography>\n            <Identity onSubmit={handleSetReady}>\n              {({ submit, loading }: CallbackProps) => {\n                return (\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    disabled={!eventId || loading}\n                    onClick={submit}\n                    loading={loading}\n                  >\n                    {eventId ? \"Ready\" : \"Select an event\"}\n                  </Button>\n                );\n              }}\n            </Identity>\n          </Box>\n        </Box>\n\n        <Box sx={{ display: \"grid\", gridTemplateColumns: \"100px 600px 200px\", gap: \"0 20px\" }}>\n          <Typography color=\"text.primary\">Set State:</Typography>\n\n          <FilledTextField\n            select\n            menus={States}\n            placeholder={t`Select claim event`}\n            onChange={(value: string) => setStateValue(value)}\n            value={stateValue}\n          />\n\n          <Identity onSubmit={handleSetState}>\n            {({ submit, loading }: CallbackProps) => (\n              <Button variant=\"contained\" fullWidth disabled={!eventId} onClick={submit} loading={loading}>\n                {eventId ? \"Set State\" : \"Select an event\"}\n              </Button>\n            )}\n          </Identity>\n        </Box>\n\n        <Box sx={{ display: \"grid\", gridTemplateColumns: \"120px 400px 200px 1fr\", gap: \"0 20px\" }}>\n          <Typography color=\"text.primary\">Set User Data:</Typography>\n\n          <Box sx={{ position: \"relative\" }}>\n            <Input\n              type=\"file\"\n              inputProps={{\n                accept: \".xlsx, .xls\",\n              }}\n              sx={{\n                position: \"absolute\",\n                width: \"100%\",\n                height: \"42px\",\n                top: 0,\n                left: 0,\n                opacity: 0,\n                zIndex: 2,\n                cursor: \"pointer\",\n                \"& input\": {\n                  width: \"100%\",\n                  height: \"100%\",\n                  padding: \"0\",\n                  cursor: \"pointer\",\n                },\n                \"&::before\": {\n                  display: \"none\",\n                },\n              }}\n              onChange={handleFileChange}\n            />\n            <Button variant=\"outlined\" fullWidth size=\"large\" loading={importLoading}>\n              <Trans>Import Data</Trans>\n            </Button>\n          </Box>\n\n          <Identity onSubmit={handleImportUserData}>\n            {({ submit, loading }: CallbackProps) => (\n              <Button variant=\"contained\" fullWidth disabled={!eventId} onClick={submit} loading={loading}>\n                {eventId ? \"Set user data\" : \"Select an event\"}\n              </Button>\n            )}\n          </Identity>\n\n          {!!userClaims.length || !!inValidUserClaims.length ? (\n            <Box sx={{ display: \"flex\", gap: \"0 10px\" }}>\n              <Typography component=\"span\" fontSize=\"12px\">\n                {userClaims.length} valid accounts (TotalAmount: {ExcelTotalAmount.toFormat()})\n              </Typography>\n\n              {inValidUserClaims?.length ? (\n                <Typography\n                  component=\"span\"\n                  fontSize=\"12px\"\n                  sx={{\n                    marginLeft: \"5px\",\n                  }}\n                >\n                  {inValidUserClaims.length} invalid accounts(Row{\" \"}\n                  {inValidUserClaims.map((ele, index) => `${index !== 0 ? \", \" : \"\"}${ele.__rowNum__ + 1}`)})\n                </Typography>\n              ) : null}\n            </Box>\n          ) : null}\n        </Box>\n      </Box>\n    </>\n  );\n}\n","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Typography, Grid, Box, Input } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { FilledTextField, TextFieldNumberComponent, Wrapper, MainCard } from \"components/index\";\nimport { MessageTypes, useTips } from \"hooks/useTips\";\nimport { Trans, t } from \"@lingui/macro\";\nimport Identity, { CallbackProps } from \"components/Identity\";\nimport { Theme } from \"@mui/material/styles\";\nimport { formatTokenAmount, isValidAccount, numberToString, isValidPrincipal } from \"@w2e/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { ResultStatus, type ActorIdentity, type StatusResult } from \"@w2e/types\";\nimport Button from \"components/authentication/ButtonConnector\";\nimport { createClaimEvent, setClaimEventData, setClaimEventReady, setClaimEventState } from \"@w2e/hooks\";\nimport { TOKEN_STANDARD } from \"@w2e/types\";\nimport { read, utils } from \"xlsx\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { Principal } from \"@dfinity/principal\";\nimport { standardCheck } from \"utils/token/standardCheck\";\nimport { useUpdateTokenStandard } from \"store/token/cache/hooks\";\nimport Config from \"./Config\";\n\nexport const TokenStandards = [\n  { label: \"EXT\", value: TOKEN_STANDARD.EXT },\n  { label: \"DIP20\", value: TOKEN_STANDARD.DIP20 },\n  { label: \"ICRC1\", value: TOKEN_STANDARD.ICRC1 },\n  { label: \"ICRC2\", value: TOKEN_STANDARD.ICRC2 },\n  { label: \"DIP20_WICP\", value: TOKEN_STANDARD.DIP20_WICP },\n  { label: \"DIP20_XTC\", value: TOKEN_STANDARD.DIP20_XTC },\n  { label: \"ICP\", value: TOKEN_STANDARD.ICP },\n];\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return {\n    breadcrumbs: {\n      padding: \"0 0 25px 16px\",\n      \"& a\": {\n        textDecoration: \"none\",\n        \"&:hover\": {\n          textDecoration: \"underline\",\n        },\n      },\n    },\n    nftDesc: {\n      color: theme.palette.primary[`400`],\n    },\n    mintInfoBox: {\n      display: \"grid\",\n      gap: \"30px 0\",\n      gridTemplateColumns: \"1fr\",\n      gridAutoFlow: \"row\",\n    },\n    uploadImage: {\n      height: \"180px\",\n    },\n  };\n});\n\ntype Values = {\n  name: string;\n  id: string;\n  standard: TOKEN_STANDARD;\n  tokenAmount: number;\n  storageId: string;\n  userAmount: number;\n};\n\ntype UserClaimItem = {\n  address: string;\n  amount: number;\n};\n\ntype ExcelClaimItem = {\n  address: string;\n  amount: number;\n  __rowNum__: number;\n};\n\nexport default function CreateTokenClaim() {\n  const classes = useStyles();\n  const history = useHistory();\n  const principal = useAccountPrincipal();\n  const [values, setValues] = useState<Values>({ standard: TOKEN_STANDARD.EXT } as Values);\n  const [openTip] = useTips();\n  const [loading, setLoading] = useState(false);\n\n  const [userClaims, setUserClaims] = useState<UserClaimItem[]>([]);\n\n  const [inValidUserClaims, setInvalidUserClaims] = useState<ExcelClaimItem[]>([]);\n\n  const updateTokenStandard = useUpdateTokenStandard();\n\n  const [tokenId, setTokenId] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    async function call() {\n      const { valid } = await standardCheck(values.id, values.standard as TOKEN_STANDARD);\n\n      if (!valid) {\n        openTip(\"Token standard is not correct\", MessageTypes.error);\n        return;\n      }\n\n      updateTokenStandard({ canisterId: values.id, standard: values.standard as TOKEN_STANDARD });\n\n      setTokenId(values.id);\n    }\n\n    if (values.standard && values.id) {\n      call();\n    }\n  }, [values.standard, values.id]);\n\n  const { result: tokenInfo } = useTokenInfo(tokenId);\n\n  const handleFieldChange = (value: string, field: string) => {\n    setValues({ ...values, [field]: value });\n  };\n\n  const [importLoading, setImportLoading] = useState(false);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files ? event.target.files[0] : null;\n    if (!file) return;\n\n    setImportLoading(true);\n\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n\n    reader.onload = (e: any) => {\n      const data = e.target.result;\n\n      const xlsx = read(data, {\n        type: \"binary\",\n      });\n\n      const userClaims: UserClaimItem[] = [];\n      const inValidUserClaims: ExcelClaimItem[] = [];\n\n      for (let i = 0; i < xlsx.SheetNames.length; i++) {\n        const sheetData = utils.sheet_to_json<ExcelClaimItem>(xlsx.Sheets[xlsx.SheetNames[i]]);\n\n        for (let i = 0; i < sheetData.length; i++) {\n          const { address } = sheetData[i];\n          const { amount } = sheetData[i];\n\n          if (!address || amount === undefined) {\n            openTip(t`Incorrect file content`, MessageTypes.error);\n            break;\n          }\n\n          if (\n            (isValidAccount(address) || isValidPrincipal(address)) &&\n            !new BigNumber(amount).isNaN() &&\n            new BigNumber(amount).isGreaterThan(0)\n          ) {\n            userClaims.push(sheetData[i]);\n          } else {\n            inValidUserClaims.push(sheetData[i]);\n          }\n        }\n      }\n\n      setUserClaims(userClaims);\n      setInvalidUserClaims(inValidUserClaims);\n\n      setImportLoading(false);\n\n      // reset input value\n      event.target.value = \"\";\n    };\n  };\n\n  const handleCreateClaimEvent = async (identity: ActorIdentity) => {\n    if (!identity || loading || !tokenInfo || !principal) return;\n    setLoading(true);\n\n    const { status, message, data } = await createClaimEvent(\n      {\n        tokenName: tokenInfo.name,\n        tokenSymbol: tokenInfo.symbol,\n        tokenDecimals: tokenInfo.decimals,\n        tokenCid: tokenInfo.canisterId,\n        tokenStandard: values.standard,\n        totalUserAmount: BigInt(values.userAmount),\n        totalTokenAmount: BigInt(numberToString(formatTokenAmount(values.tokenAmount, tokenInfo.decimals))),\n        claimedTokenAmount: BigInt(0),\n        claimEventId: \"1\",\n        claimEventName: values.name,\n        claimEventStatus: BigInt(0),\n        claimEventCreator: principal,\n        claimCanisterId: \"\",\n        claimedUserAmount: BigInt(0),\n      },\n      identity,\n    );\n\n    openTip(status === ResultStatus.OK ? \"Created successfully\" : message, status);\n\n    if (data) {\n      const _userClaims = userClaims.map((ele) => ({\n        user: isValidPrincipal(ele.address) ? { principal: Principal.fromText(ele.address) } : { address: ele.address },\n        quota: BigInt(\n          numberToString(\n            formatTokenAmount(\n              new BigNumber(ele.amount).toFixed(tokenInfo.decimals, BigNumber.ROUND_DOWN),\n              tokenInfo.decimals,\n            ),\n          ),\n        ),\n      }));\n\n      const promises: Promise<StatusResult<boolean>>[] = [];\n\n      for (let i = 0; i < _userClaims.length; i += 20000) {\n        const userClaims = _userClaims.slice(i, i + 20000);\n        promises.push(setClaimEventData(data, userClaims, identity));\n      }\n\n      await Promise.all(promises)\n        .then((result) => {\n          result.forEach((res) => {\n            openTip(res.status === ResultStatus.OK ? \"Set event user data successfully\" : res.message, res.status);\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n\n      const { status: status2, message: message2 } = await setClaimEventReady(data, identity);\n      openTip(status2 === ResultStatus.OK ? \"Set event ready successfully\" : message2, status2);\n      const { status: status3, message: message3 } = await setClaimEventState(data, true, identity);\n      openTip(status3 === ResultStatus.OK ? \"Set event state successfully\" : message3, status3);\n    }\n\n    if (status === ResultStatus.OK) {\n      history.push(\"/token-claim\");\n    }\n\n    setLoading(false);\n  };\n\n  const ExcelTotalAmount = tokenInfo\n    ? userClaims.reduce((prev, curr) => {\n      return prev.plus(new BigNumber(curr.amount).toFixed(tokenInfo.decimals, BigNumber.ROUND_DOWN));\n    }, new BigNumber(0))\n    : new BigNumber(0);\n\n  let errorMsg = \"\";\n  if (!values.userAmount) errorMsg = t`Enter the claimed token amount`;\n  if (!values.tokenAmount) errorMsg = t`Enter user amount`;\n  if (!values.standard) errorMsg = t`Select the token standard`;\n  if (!values.id) errorMsg = t`Enter the token canister id`;\n  if (!values.name) errorMsg = t`Enter the claim event name`;\n\n  return (\n    <Wrapper>\n      <MainCard>\n        <Grid container justifyContent=\"center\">\n          <Box sx={{ maxWidth: \"474px\", width: \"100%\" }}>\n            <Grid mt=\"30px\" container className={classes.mintInfoBox}>\n              <FilledTextField\n                placeholder={t`Enter claim event name`}\n                onChange={(value) => handleFieldChange(value, \"name\")}\n                value={values.name}\n              />\n\n              <FilledTextField\n                placeholder=\"Enter the token canister id\"\n                value={values.id}\n                onChange={(value) => handleFieldChange(value, \"id\")}\n              />\n\n              <FilledTextField\n                select\n                menus={TokenStandards}\n                placeholder={t`Select the token standard`}\n                onChange={(value) => handleFieldChange(value, \"standard\")}\n                value={values.standard}\n              />\n\n              <FilledTextField\n                placeholder={t`Enter total token claimed amount`}\n                onChange={(value) => handleFieldChange(value, \"tokenAmount\")}\n                value={values.tokenAmount}\n                InputProps={{\n                  disableUnderline: true,\n                  inputComponent: TextFieldNumberComponent,\n                  inputProps: {\n                    thousandSeparator: true,\n                    decimalScale: tokenInfo?.decimals ?? 8,\n                    allowNegative: false,\n                    maxLength: 100,\n                    value: values.tokenAmount,\n                  },\n                }}\n              />\n\n              <FilledTextField\n                placeholder={t`Enter total user amount`}\n                onChange={(value) => handleFieldChange(value, \"userAmount\")}\n                value={values.userAmount}\n                InputProps={{\n                  disableUnderline: true,\n                  inputComponent: TextFieldNumberComponent,\n                  inputProps: {\n                    thousandSeparator: true,\n                    decimalScale: 0,\n                    allowNegative: false,\n                    maxLength: 100,\n                    value: values.userAmount,\n                  },\n                }}\n              />\n\n              <Box sx={{ position: \"relative\" }}>\n                <Input\n                  type=\"file\"\n                  inputProps={{\n                    accept: \".xlsx, .xls\",\n                  }}\n                  sx={{\n                    position: \"absolute\",\n                    width: \"100%\",\n                    height: \"42px\",\n                    top: 0,\n                    left: 0,\n                    opacity: 0,\n                    zIndex: 2,\n                    cursor: \"pointer\",\n                    \"& input\": {\n                      width: \"100%\",\n                      height: \"100%\",\n                      padding: \"0\",\n                      cursor: \"pointer\",\n                    },\n                    \"&::before\": {\n                      display: \"none\",\n                    },\n                  }}\n                  onChange={handleFileChange}\n                />\n                <Button variant=\"outlined\" fullWidth size=\"large\" loading={importLoading}>\n                  <Trans>Import Data</Trans>\n                </Button>\n                {!!userClaims.length || !!inValidUserClaims.length ? (\n                  <Box mt=\"4px\">\n                    <Typography component=\"span\" fontSize=\"12px\">\n                      {userClaims.length} valid accounts (TotalAmount: {ExcelTotalAmount.toFormat()})\n                    </Typography>\n\n                    {inValidUserClaims?.length ? (\n                      <Typography\n                        component=\"span\"\n                        fontSize=\"12px\"\n                        sx={{\n                          marginLeft: \"5px\",\n                        }}\n                      >\n                        {inValidUserClaims.length} invalid accounts(Row{\" \"}\n                        {inValidUserClaims.map((ele, index) => `${index !== 0 ? \", \" : \"\"}${ele.__rowNum__ + 1}`)})\n                      </Typography>\n                    ) : null}\n                  </Box>\n                ) : null}\n              </Box>\n            </Grid>\n            <Box mt={4}>\n              <Identity onSubmit={handleCreateClaimEvent}>\n                {({ submit }: CallbackProps) => (\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    size=\"large\"\n                    onClick={submit}\n                    disabled={Boolean(errorMsg) || loading}\n                    loading={loading}\n                  >\n                    {errorMsg || t`Create claim event`}\n                  </Button>\n                )}\n              </Identity>\n            </Box>\n          </Box>\n        </Grid>\n\n        <Config />\n      </MainCard>\n    </Wrapper>\n  );\n}\n","export const ICP_ADDRESS_LENGTH = 64;\n\nexport function isValidAccount(address: string): boolean {\n  return (\n    /^[0-9a-fA-F]+$/.test(address) && ICP_ADDRESS_LENGTH === address.length\n  );\n}\n"],"names":["EventSelector","_ref","onChange","value","result","claimEvents","useClaimEvents","menus","content","map","ele","label","claimEventName","claimEventId","_jsx","FilledTextField","select","placeholder","i18n","_","id","EventConfig","eventId","setEventId","useState","stateValue","setStateValue","openTip","useTips","userClaims","setUserClaims","inValidUserClaims","setInvalidUserClaims","event","useEvent","tokenInfo","useTokenInfo","tokenCid","importLoading","setImportLoading","ExcelTotalAmount","reduce","prev","curr","plus","BigNumber","amount","toFixed","decimals","ROUND_DOWN","_jsxs","_Fragment","children","Box","mt","sx","display","flexDirection","gap","width","gridTemplateColumns","Typography","color","Identity","onSubmit","async","status","status2","message","message2","setClaimEventReady","identity","ResultStatus","OK","submit","loading","Button","variant","fullWidth","disabled","onClick","status3","message3","setClaimEventState","_ref2","position","Input","type","inputProps","accept","height","top","left","opacity","zIndex","cursor","padding","file","target","files","reader","FileReader","readAsBinaryString","onload","e","data","xlsx","read","i","SheetNames","length","sheetData","utils","sheet_to_json","Sheets","address","undefined","MessageTypes","error","isValidAccount","isValidPrincipal","isNaN","isGreaterThan","push","size","Trans","_userClaims","user","principal","Principal","fromText","quota","BigInt","numberToString","formatTokenAmount","promises","slice","setClaimEventData","Promise","all","then","forEach","res","catch","err","console","_ref3","component","fontSize","toFormat","marginLeft","index","concat","__rowNum__","TokenStandards","TOKEN_STANDARD","EXT","DIP20","ICRC1","ICRC2","DIP20_WICP","DIP20_XTC","ICP","useStyles","makeStyles","theme","breadcrumbs","textDecoration","nftDesc","palette","primary","mintInfoBox","gridAutoFlow","uploadImage","CreateTokenClaim","_tokenInfo$decimals","classes","history","useHistory","useAccountPrincipal","values","setValues","standard","setLoading","updateTokenStandard","useUpdateTokenStandard","tokenId","setTokenId","useEffect","valid","standardCheck","canisterId","call","handleFieldChange","field","errorMsg","userAmount","tokenAmount","name","Wrapper","MainCard","Grid","container","justifyContent","maxWidth","className","InputProps","disableUnderline","inputComponent","TextFieldNumberComponent","thousandSeparator","decimalScale","allowNegative","maxLength","createClaimEvent","tokenName","tokenSymbol","symbol","tokenDecimals","tokenStandard","totalUserAmount","totalTokenAmount","claimedTokenAmount","claimEventStatus","claimEventCreator","claimCanisterId","claimedUserAmount","Boolean","Config","ICP_ADDRESS_LENGTH","test"],"sourceRoot":""}