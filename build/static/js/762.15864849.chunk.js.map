{"version":3,"file":"static/js/762.15864849.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@mui+icons-material@5.5.0_@mui+material@5.15.20_@emotion+react@11.11.4_@types+react@17.0.2_re_y34dkmz43sjsezmk4faklzfb6e/node_modules/@mui/icons-material/BrokenImage.js","../node_modules/.pnpm/@mui+material@5.15.20_@emotion+react@11.11.4_@types+react@17.0.2_react@17.0.2__@emotion+style_idrxj3kysflkqc6j6fv76dmypy/node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../node_modules/.pnpm/@mui+material@5.15.20_@emotion+react@11.11.4_@types+react@17.0.2_react@17.0.2__@emotion+style_idrxj3kysflkqc6j6fv76dmypy/node_modules/@mui/material/InputAdornment/InputAdornment.js","../node_modules/.pnpm/dayjs@1.11.11/node_modules/dayjs/dayjs.min.js","../node_modules/.pnpm/decimal.js-light@2.5.1/node_modules/decimal.js-light/decimal.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_arrayMap.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_asciiToArray.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSlice.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseToString.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_castSlice.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_createCaseFirst.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_hasUnicode.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_stringToArray.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_unicodeToArray.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isArray.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isObjectLike.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isSymbol.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toString.js","../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/upperFirst.js","../node_modules/.pnpm/numbro@2.5.0/node_modules/numbro/dist/es/numbro.js","../node_modules/.pnpm/toformat@2.0.0/node_modules/toformat/toFormat.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 5v6.59l-3-3.01-4 4.01-4-4-4 4-3-3.01V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2zm-3 6.42 3 3.01V19c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2v-6.58l3 2.99 4-4 4 4 4-3.99z\"\n}), 'BrokenImage');\n\nexports.default = _default;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _span;\nconst _excluded = [\"children\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active\n}, ownerState.variant === 'filled' && {\n  // Styles applied to the root element if `variant=\"filled\"`.\n  [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n    marginTop: 16\n  }\n}, ownerState.position === 'start' && {\n  // Styles applied to the root element if `position=\"start\"`.\n  marginRight: 8\n}, ownerState.position === 'end' && {\n  // Styles applied to the root element if `position=\"end\"`.\n  marginLeft: 8\n}, ownerState.disablePointerEvents === true && {\n  // Styles applied to the root element if `disablePointerEvents={true}`.\n  pointerEvents: 'none'\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n      children,\n      className,\n      component = 'div',\n      disablePointerEvents = false,\n      disableTypography = false,\n      position,\n      variant: variantProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = _extends({}, props, {\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, _extends({\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other, {\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? ( /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        }))) : null, children]\n      })\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));","/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar enUS;\nvar hasRequiredEnUS;\n\nfunction requireEnUS () {\n\tif (hasRequiredEnUS) return enUS;\n\thasRequiredEnUS = 1;\n\tenUS = {\n\t    languageTag: \"en-US\",\n\t    delimiters: {\n\t        thousands: \",\",\n\t        decimal: \".\"\n\t    },\n\t    abbreviations: {\n\t        thousand: \"k\",\n\t        million: \"m\",\n\t        billion: \"b\",\n\t        trillion: \"t\"\n\t    },\n\t    spaceSeparated: false,\n\t    ordinal: function(number) {\n\t        let b = number % 10;\n\t        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n\t    },\n\t    bytes: {\n\t        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n\t        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t    },\n\t    currency: {\n\t        symbol: \"$\",\n\t        position: \"prefix\",\n\t        code: \"USD\"\n\t    },\n\t    currencyFormat: {\n\t        thousandSeparated: true,\n\t        totalLength: 4,\n\t        spaceSeparated: true,\n\t        spaceSeparatedCurrency: true\n\t    },\n\t    formats: {\n\t        fourDigits: {\n\t            totalLength: 4,\n\t            spaceSeparated: true\n\t        },\n\t        fullWithTwoDecimals: {\n\t            output: \"currency\",\n\t            thousandSeparated: true,\n\t            mantissa: 2\n\t        },\n\t        fullWithTwoDecimalsNoCurrency: {\n\t            thousandSeparated: true,\n\t            mantissa: 2\n\t        },\n\t        fullWithNoDecimals: {\n\t            output: \"currency\",\n\t            thousandSeparated: true,\n\t            mantissa: 0\n\t        }\n\t    }\n\t};\n\treturn enUS;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar unformatting;\nvar hasRequiredUnformatting;\n\nfunction requireUnformatting () {\n\tif (hasRequiredUnformatting) return unformatting;\n\thasRequiredUnformatting = 1;\n\tconst allSuffixes = [\n\t    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n\t    {key: \"ZB\", factor: Math.pow(1000, 7)},\n\t    {key: \"YiB\", factor: Math.pow(1024, 8)},\n\t    {key: \"YB\", factor: Math.pow(1000, 8)},\n\t    {key: \"TiB\", factor: Math.pow(1024, 4)},\n\t    {key: \"TB\", factor: Math.pow(1000, 4)},\n\t    {key: \"PiB\", factor: Math.pow(1024, 5)},\n\t    {key: \"PB\", factor: Math.pow(1000, 5)},\n\t    {key: \"MiB\", factor: Math.pow(1024, 2)},\n\t    {key: \"MB\", factor: Math.pow(1000, 2)},\n\t    {key: \"KiB\", factor: Math.pow(1024, 1)},\n\t    {key: \"KB\", factor: Math.pow(1000, 1)},\n\t    {key: \"GiB\", factor: Math.pow(1024, 3)},\n\t    {key: \"GB\", factor: Math.pow(1000, 3)},\n\t    {key: \"EiB\", factor: Math.pow(1024, 6)},\n\t    {key: \"EB\", factor: Math.pow(1000, 6)},\n\t    {key: \"B\", factor: 1}\n\t];\n\n\t/**\n\t * Generate a RegExp where S get all RegExp specific characters escaped.\n\t *\n\t * @param {string} s - string representing a RegExp\n\t * @return {string}\n\t */\n\tfunction escapeRegExp(s) {\n\t    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n\t}\n\n\t/**\n\t * Recursively compute the unformatted value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @param {function} ordinal - function used to generate an ordinal out of a number\n\t * @param {string} zeroFormat - string representing zero\n\t * @param {*} abbreviations - abbreviations used while generating the inputString\n\t * @param {NumbroFormat} format - format used while generating the inputString\n\t * @return {number|undefined}\n\t */\n\tfunction computeUnformattedValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) {\n\t    if (!isNaN(+inputString)) {\n\t        return +inputString;\n\t    }\n\n\t    let stripped = \"\";\n\t    // Negative\n\n\t    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n\t    if (newInput !== inputString) {\n\t        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t    }\n\n\t    // Byte\n\n\t    for (let i = 0; i < allSuffixes.length; i++) {\n\t        let suffix = allSuffixes[i];\n\t        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n\t        if (stripped !== inputString) {\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * suffix.factor;\n\t        }\n\t    }\n\n\t    // Percent\n\n\t    stripped = inputString.replace(\"%\", \"\");\n\n\t    if (stripped !== inputString) {\n\t        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) / 100;\n\t    }\n\n\t    // Ordinal\n\n\t    let possibleOrdinalValue = parseFloat(inputString);\n\n\t    if (isNaN(possibleOrdinalValue)) {\n\t        return undefined;\n\t    }\n\n\t    let ordinalString = ordinal(possibleOrdinalValue);\n\t    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n\t        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n\t        if (stripped !== inputString) {\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t        }\n\t    }\n\n\t    // Average\n\n\t    let inversedAbbreviations = {};\n\t    Object.keys(abbreviations).forEach((key) => {\n\t        inversedAbbreviations[abbreviations[key]] = key;\n\t    });\n\n\t    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n\t    let numberOfAbbreviations = abbreviationValues.length;\n\n\t    for (let i = 0; i < numberOfAbbreviations; i++) {\n\t        let value = abbreviationValues[i];\n\t        let key = inversedAbbreviations[value];\n\n\t        stripped = inputString.replace(value, \"\");\n\t        if (stripped !== inputString) {\n\t            let factor = undefined;\n\t            switch (key) { // eslint-disable-line default-case\n\t                case \"thousand\":\n\t                    factor = Math.pow(10, 3);\n\t                    break;\n\t                case \"million\":\n\t                    factor = Math.pow(10, 6);\n\t                    break;\n\t                case \"billion\":\n\t                    factor = Math.pow(10, 9);\n\t                    break;\n\t                case \"trillion\":\n\t                    factor = Math.pow(10, 12);\n\t                    break;\n\t            }\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * factor;\n\t        }\n\t    }\n\n\t    return undefined;\n\t}\n\n\t/**\n\t * Removes in one pass all formatting symbols.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @return {string}\n\t */\n\tfunction removeFormattingSymbols(inputString, delimiters, currencySymbol) {\n\t    // Currency\n\n\t    let stripped = inputString.replace(currencySymbol, \"\");\n\n\t    // Thousand separators\n\n\t    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n\t    // Decimal\n\n\t    stripped = stripped.replace(delimiters.decimal, \".\");\n\n\t    return stripped;\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @param {function} ordinal - function used to generate an ordinal out of a number\n\t * @param {string} zeroFormat - string representing zero\n\t * @param {*} abbreviations - abbreviations used while generating the inputString\n\t * @param {NumbroFormat} format - format used while generating the inputString\n\t * @return {number|undefined}\n\t */\n\tfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n\t    if (inputString === \"\") {\n\t        return undefined;\n\t    }\n\n\t    // Zero Format\n\n\t    if (inputString === zeroFormat) {\n\t        return 0;\n\t    }\n\n\t    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n\t    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t}\n\n\t/**\n\t * Check if the INPUTSTRING represents a time.\n\t *\n\t * @param {string} inputString - string to check\n\t * @param {*} delimiters - Delimiters used while generating the inputString\n\t * @return {boolean}\n\t */\n\tfunction matchesTime(inputString, delimiters) {\n\t    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n\t    if (!separators) {\n\t        return false;\n\t    }\n\n\t    let segments = inputString.split(\":\");\n\t    if (segments.length !== 3) {\n\t        return false;\n\t    }\n\n\t    let hours = +segments[0];\n\t    let minutes = +segments[1];\n\t    let seconds = +segments[2];\n\n\t    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string representing a time to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @return {number}\n\t */\n\tfunction unformatTime(inputString) {\n\t    let segments = inputString.split(\":\");\n\n\t    let hours = +segments[0];\n\t    let minutes = +segments[1];\n\t    let seconds = +segments[2];\n\n\t    return seconds + 60 * minutes + 3600 * hours;\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {NumbroFormat} format - format used  while generating the inputString\n\t * @return {number}\n\t */\n\tfunction unformat(inputString, format) {\n\t    // Avoid circular references\n\t    const globalState = requireGlobalState();\n\n\t    let delimiters = globalState.currentDelimiters();\n\t    let currencySymbol = globalState.currentCurrency().symbol;\n\t    let ordinal = globalState.currentOrdinal();\n\t    let zeroFormat = globalState.getZeroFormat();\n\t    let abbreviations = globalState.currentAbbreviations();\n\n\t    let value = undefined;\n\n\t    if (typeof inputString === \"string\") {\n\t        if (matchesTime(inputString, delimiters)) {\n\t            value = unformatTime(inputString);\n\t        } else {\n\t            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t        }\n\t    } else if (typeof inputString === \"number\") {\n\t        value = inputString;\n\t    } else {\n\t        return undefined;\n\t    }\n\n\t    if (value === undefined) {\n\t        return undefined;\n\t    }\n\n\t    return value;\n\t}\n\n\tunformatting = {\n\t    unformat\n\t};\n\treturn unformatting;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar validating$1;\nvar hasRequiredValidating;\n\nfunction requireValidating () {\n\tif (hasRequiredValidating) return validating$1;\n\thasRequiredValidating = 1;\n\tlet unformatter = requireUnformatting();\n\n\t// Simplified regexp supporting only `language`, `script`, and `region`\n\tconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\n\tconst validOutputValues = [\n\t    \"currency\",\n\t    \"percent\",\n\t    \"byte\",\n\t    \"time\",\n\t    \"ordinal\",\n\t    \"number\"\n\t];\n\n\tconst validForceAverageValues = [\n\t    \"trillion\",\n\t    \"billion\",\n\t    \"million\",\n\t    \"thousand\"\n\t];\n\n\tconst validCurrencyPosition = [\n\t    \"prefix\",\n\t    \"infix\",\n\t    \"postfix\"\n\t];\n\n\tconst validNegativeValues = [\n\t    \"sign\",\n\t    \"parenthesis\"\n\t];\n\n\tconst validMandatoryAbbreviations = {\n\t    type: \"object\",\n\t    children: {\n\t        thousand: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        million: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        billion: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        trillion: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        }\n\t    },\n\t    mandatory: true\n\t};\n\n\tconst validAbbreviations = {\n\t    type: \"object\",\n\t    children: {\n\t        thousand: \"string\",\n\t        million: \"string\",\n\t        billion: \"string\",\n\t        trillion: \"string\"\n\t    }\n\t};\n\n\tconst validBaseValues = [\n\t    \"decimal\",\n\t    \"binary\",\n\t    \"general\"\n\t];\n\n\tconst validFormat = {\n\t    output: {\n\t        type: \"string\",\n\t        validValues: validOutputValues\n\t    },\n\t    base: {\n\t        type: \"string\",\n\t        validValues: validBaseValues,\n\t        restriction: (number, format) => format.output === \"byte\",\n\t        message: \"`base` must be provided only when the output is `byte`\",\n\t        mandatory: (format) => format.output === \"byte\"\n\t    },\n\t    characteristic: {\n\t        type: \"number\",\n\t        restriction: (number) => number >= 0,\n\t        message: \"value must be positive\"\n\t    },\n\t    prefix: \"string\",\n\t    postfix: \"string\",\n\t    forceAverage: {\n\t        type: \"string\",\n\t        validValues: validForceAverageValues\n\t    },\n\t    average: \"boolean\",\n\t    lowPrecision: {\n\t        type: \"boolean\",\n\t        restriction: (number, format) => format.average === true,\n\t        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n\t    },\n\t    currencyPosition: {\n\t        type: \"string\",\n\t        validValues: validCurrencyPosition\n\t    },\n\t    currencySymbol: \"string\",\n\t    totalLength: {\n\t        type: \"number\",\n\t        restrictions: [\n\t            {\n\t                restriction: (number) => number >= 0,\n\t                message: \"value must be positive\"\n\t            },\n\t            {\n\t                restriction: (number, format) => !format.exponential,\n\t                message: \"`totalLength` is incompatible with `exponential`\"\n\t            }\n\t        ]\n\t    },\n\t    mantissa: {\n\t        type: \"number\",\n\t        restriction: (number) => number >= 0,\n\t        message: \"value must be positive\"\n\t    },\n\t    optionalMantissa: \"boolean\",\n\t    trimMantissa: \"boolean\",\n\t    roundingFunction: \"function\",\n\t    optionalCharacteristic: \"boolean\",\n\t    thousandSeparated: \"boolean\",\n\t    spaceSeparated: \"boolean\",\n\t    spaceSeparatedCurrency: \"boolean\",\n\t    spaceSeparatedAbbreviation: \"boolean\",\n\t    abbreviations: validAbbreviations,\n\t    negative: {\n\t        type: \"string\",\n\t        validValues: validNegativeValues\n\t    },\n\t    forceSign: \"boolean\",\n\t    exponential: {\n\t        type: \"boolean\"\n\t    },\n\t    prefixSymbol: {\n\t        type: \"boolean\",\n\t        restriction: (number, format) => format.output === \"percent\",\n\t        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n\t    }\n\t};\n\n\tconst validLanguage = {\n\t    languageTag: {\n\t        type: \"string\",\n\t        mandatory: true,\n\t        restriction: (tag) => {\n\t            return tag.match(bcp47RegExp);\n\t        },\n\t        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n\t    },\n\t    delimiters: {\n\t        type: \"object\",\n\t        children: {\n\t            thousands: \"string\",\n\t            decimal: \"string\",\n\t            thousandsSize: \"number\"\n\t        },\n\t        mandatory: true\n\t    },\n\t    abbreviations: validMandatoryAbbreviations,\n\t    spaceSeparated: \"boolean\",\n\t    spaceSeparatedCurrency: \"boolean\",\n\t    ordinal: {\n\t        type: \"function\",\n\t        mandatory: true\n\t    },\n\t    bytes: {\n\t        type: \"object\",\n\t        children: {\n\t            binarySuffixes: \"object\",\n\t            decimalSuffixes: \"object\"\n\t        }\n\t    },\n\t    currency: {\n\t        type: \"object\",\n\t        children: {\n\t            symbol: \"string\",\n\t            position: \"string\",\n\t            code: \"string\"\n\t        },\n\t        mandatory: true\n\t    },\n\t    defaults: \"format\",\n\t    ordinalFormat: \"format\",\n\t    byteFormat: \"format\",\n\t    percentageFormat: \"format\",\n\t    currencyFormat: \"format\",\n\t    timeDefaults: \"format\",\n\t    formats: {\n\t        type: \"object\",\n\t        children: {\n\t            fourDigits: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithTwoDecimals: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithTwoDecimalsNoCurrency: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithNoDecimals: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            }\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Check the validity of the provided input and format.\n\t * The check is NOT lazy.\n\t *\n\t * @param {string|number|Numbro} input - input to check\n\t * @param {NumbroFormat} format - format to check\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validate(input, format) {\n\t    let validInput = validateInput(input);\n\t    let isFormatValid = validateFormat(format);\n\n\t    return validInput && isFormatValid;\n\t}\n\n\t/**\n\t * Check the validity of the numbro input.\n\t *\n\t * @param {string|number|Numbro} input - input to check\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validateInput(input) {\n\t    let value = unformatter.unformat(input);\n\n\t    return value !== undefined;\n\t}\n\n\t/**\n\t * Check the validity of the provided format TOVALIDATE against SPEC.\n\t *\n\t * @param {NumbroFormat} toValidate - format to check\n\t * @param {*} spec - specification against which to check\n\t * @param {string} prefix - prefix use for error messages\n\t * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n\t    let results = Object.keys(toValidate).map((key) => {\n\t        if (!spec[key]) {\n\t            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        let value = toValidate[key];\n\t        let data = spec[key];\n\n\t        if (typeof data === \"string\") {\n\t            data = {type: data};\n\t        }\n\n\t        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n\t            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n\t            if (!valid) {\n\t                return false;\n\t            }\n\t        } else if (typeof value !== data.type) {\n\t            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.restrictions && data.restrictions.length) {\n\t            let length = data.restrictions.length;\n\t            for (let i = 0; i < length; i++) {\n\t                let {restriction, message} = data.restrictions[i];\n\t                if (!restriction(value, toValidate)) {\n\t                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\n\t        if (data.restriction && !data.restriction(value, toValidate)) {\n\t            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.validValues && data.validValues.indexOf(value) === -1) {\n\t            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.children) {\n\t            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n\t            if (!valid) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    });\n\n\t    if (!skipMandatoryCheck) {\n\t        results.push(...Object.keys(spec).map((key) => {\n\t            let data = spec[key];\n\t            if (typeof data === \"string\") {\n\t                data = {type: data};\n\t            }\n\n\t            if (data.mandatory) {\n\t                let mandatory = data.mandatory;\n\t                if (typeof mandatory === \"function\") {\n\t                    mandatory = mandatory(toValidate);\n\t                }\n\n\t                if (mandatory && toValidate[key] === undefined) {\n\t                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }));\n\t    }\n\n\t    return results.reduce((acc, current) => {\n\t        return acc && current;\n\t    }, true);\n\t}\n\n\t/**\n\t * Check the provided FORMAT.\n\t *\n\t * @param {NumbroFormat} format - format to check\n\t * @return {boolean}\n\t */\n\tfunction validateFormat(format) {\n\t    return validateSpec(format, validFormat, \"[Validate format]\");\n\t}\n\n\t/**\n\t * Check the provided LANGUAGE.\n\t *\n\t * @param {NumbroLanguage} language - language to check\n\t * @return {boolean}\n\t */\n\tfunction validateLanguage(language) {\n\t    return validateSpec(language, validLanguage, \"[Validate language]\");\n\t}\n\n\tvalidating$1 = {\n\t    validate,\n\t    validateFormat,\n\t    validateInput,\n\t    validateLanguage\n\t};\n\treturn validating$1;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nvar parsing$2 = {\n    parseFormat\n};\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar globalState$2;\nvar hasRequiredGlobalState;\n\nfunction requireGlobalState () {\n\tif (hasRequiredGlobalState) return globalState$2;\n\thasRequiredGlobalState = 1;\n\tconst enUS = requireEnUS();\n\tconst validating = requireValidating();\n\tconst parsing = parsing$2;\n\n\tlet state = {};\n\n\tlet currentLanguageTag = undefined;\n\tlet languages = {};\n\n\tlet zeroFormat = null;\n\n\tlet globalDefaults = {};\n\n\tfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\n\tfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n\t/**\n\t * Return all the register languages\n\t *\n\t * @return {{}}\n\t */\n\tstate.languages = () => Object.assign({}, languages);\n\n\t//\n\t// Current language accessors\n\t//\n\n\t/**\n\t * Return the current language tag\n\t *\n\t * @return {string}\n\t */\n\tstate.currentLanguage = () => currentLanguageTag;\n\n\t/**\n\t * Return the current language bytes data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentBytes = () => currentLanguageData().bytes || {};\n\n\t/**\n\t * Return the current language currency data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentCurrency = () => currentLanguageData().currency;\n\n\t/**\n\t * Return the current language abbreviations data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n\t/**\n\t * Return the current language delimiters data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n\t/**\n\t * Return the current language ordinal function\n\t *\n\t * @return {function}\n\t */\n\tstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n\t//\n\t// Defaults\n\t//\n\n\t/**\n\t * Return the current formatting defaults.\n\t * First use the current language default, then fallback to the globally defined defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n\t/**\n\t * Return the ordinal default-format.\n\t * First use the current language ordinal default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n\t/**\n\t * Return the byte default-format.\n\t * First use the current language byte default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n\t/**\n\t * Return the percentage default-format.\n\t * First use the current language percentage default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n\t/**\n\t * Return the currency default-format.\n\t * First use the current language currency default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n\t/**\n\t * Return the time default-format.\n\t * First use the current language currency default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n\t/**\n\t * Set the global formatting defaults.\n\t *\n\t * @param {{}|string} format - formatting options to use as defaults\n\t */\n\tstate.setDefaults = (format) => {\n\t    format = parsing.parseFormat(format);\n\t    if (validating.validateFormat(format)) {\n\t        globalDefaults = format;\n\t    }\n\t};\n\n\t//\n\t// Zero format\n\t//\n\n\t/**\n\t * Return the format string for 0.\n\t *\n\t * @return {string}\n\t */\n\tstate.getZeroFormat = () => zeroFormat;\n\n\t/**\n\t * Set a STRING to output when the value is 0.\n\t *\n\t * @param {{}|string} string - string to set\n\t */\n\tstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n\t/**\n\t * Return true if a format for 0 has been set already.\n\t *\n\t * @return {boolean}\n\t */\n\tstate.hasZeroFormat = () => zeroFormat !== null;\n\n\t//\n\t// Getters/Setters\n\t//\n\n\t/**\n\t * Return the language data for the provided TAG.\n\t * Return the current language data if no tag is provided.\n\t *\n\t * Throw an error if the tag doesn't match any registered language.\n\t *\n\t * @param {string} [tag] - language tag of a registered language\n\t * @return {{}}\n\t */\n\tstate.languageData = (tag) => {\n\t    if (tag) {\n\t        if (languages[tag]) {\n\t            return languages[tag];\n\t        }\n\t        throw new Error(`Unknown tag \"${tag}\"`);\n\t    }\n\n\t    return currentLanguageData();\n\t};\n\n\t/**\n\t * Register the provided DATA as a language if and only if the data is valid.\n\t * If the data is not valid, an error is thrown.\n\t *\n\t * When USELANGUAGE is true, the registered language is then used.\n\t *\n\t * @param {{}} data - language data to register\n\t * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n\t */\n\tstate.registerLanguage = (data, useLanguage = false) => {\n\t    if (!validating.validateLanguage(data)) {\n\t        throw new Error(\"Invalid language data\");\n\t    }\n\n\t    languages[data.languageTag] = data;\n\n\t    if (useLanguage) {\n\t        chooseLanguage(data.languageTag);\n\t    }\n\t};\n\n\t/**\n\t * Set the current language according to TAG.\n\t * If TAG doesn't match a registered language, another language matching\n\t * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n\t * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n\t * `en-US` is finally used.\n\t *\n\t * @param tag\n\t * @param fallbackTag\n\t */\n\tstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n\t    if (!languages[tag]) {\n\t        let suffix = tag.split(\"-\")[0];\n\n\t        let matchingLanguageTag = Object.keys(languages).find(each => {\n\t            return each.split(\"-\")[0] === suffix;\n\t        });\n\n\t        if (!languages[matchingLanguageTag]) {\n\t            chooseLanguage(fallbackTag);\n\t            return;\n\t        }\n\n\t        chooseLanguage(matchingLanguageTag);\n\t        return;\n\t    }\n\n\t    chooseLanguage(tag);\n\t};\n\n\tstate.registerLanguage(enUS);\n\tcurrentLanguageTag = enUS.languageTag;\n\n\tglobalState$2 = state;\n\treturn globalState$2;\n}\n\nfunction commonjsRequire(path) {\n\tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = commonjsRequire(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nvar loading = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n\nvar bignumber = {exports: {}};\n\n(function (module) {\n(function (globalObject) {\r\n\r\n\t/*\r\n\t *      bignumber.js v9.1.2\r\n\t *      A JavaScript library for arbitrary-precision arithmetic.\r\n\t *      https://github.com/MikeMcl/bignumber.js\r\n\t *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n\t *      MIT Licensed.\r\n\t *\r\n\t *      BigNumber.prototype methods     |  BigNumber methods\r\n\t *                                      |\r\n\t *      absoluteValue            abs    |  clone\r\n\t *      comparedTo                      |  config               set\r\n\t *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n\t *      dividedBy                div    |      ROUNDING_MODE\r\n\t *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n\t *      exponentiatedBy          pow    |      RANGE\r\n\t *      integerValue                    |      CRYPTO\r\n\t *      isEqualTo                eq     |      MODULO_MODE\r\n\t *      isFinite                        |      POW_PRECISION\r\n\t *      isGreaterThan            gt     |      FORMAT\r\n\t *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n\t *      isInteger                       |  isBigNumber\r\n\t *      isLessThan               lt     |  maximum              max\r\n\t *      isLessThanOrEqualTo      lte    |  minimum              min\r\n\t *      isNaN                           |  random\r\n\t *      isNegative                      |  sum\r\n\t *      isPositive                      |\r\n\t *      isZero                          |\r\n\t *      minus                           |\r\n\t *      modulo                   mod    |\r\n\t *      multipliedBy             times  |\r\n\t *      negated                         |\r\n\t *      plus                            |\r\n\t *      precision                sd     |\r\n\t *      shiftedBy                       |\r\n\t *      squareRoot               sqrt   |\r\n\t *      toExponential                   |\r\n\t *      toFixed                         |\r\n\t *      toFormat                        |\r\n\t *      toFraction                      |\r\n\t *      toJSON                          |\r\n\t *      toNumber                        |\r\n\t *      toPrecision                     |\r\n\t *      toString                        |\r\n\t *      valueOf                         |\r\n\t *\r\n\t */\r\n\r\n\r\n\t  var BigNumber,\r\n\t    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\t    mathceil = Math.ceil,\r\n\t    mathfloor = Math.floor,\r\n\r\n\t    bignumberError = '[BigNumber Error] ',\r\n\t    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n\t    BASE = 1e14,\r\n\t    LOG_BASE = 14,\r\n\t    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n\t    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n\t    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n\t    SQRT_BASE = 1e7,\r\n\r\n\t    // EDITABLE\r\n\t    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n\t    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n\t    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n\t  /*\r\n\t   * Create and return a BigNumber constructor.\r\n\t   */\r\n\t  function clone(configObject) {\r\n\t    var div, convertBase, parseNumeric,\r\n\t      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n\t      ONE = new BigNumber(1),\r\n\r\n\r\n\t      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n\t      // The default values below must be integers within the inclusive ranges stated.\r\n\t      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n\t      // The maximum number of decimal places for operations involving division.\r\n\t      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n\t      // The rounding mode used when rounding to the above decimal places, and when using\r\n\t      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n\t      // UP         0 Away from zero.\r\n\t      // DOWN       1 Towards zero.\r\n\t      // CEIL       2 Towards +Infinity.\r\n\t      // FLOOR      3 Towards -Infinity.\r\n\t      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n\t      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n\t      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n\t      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n\t      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n\t      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n\t      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n\t      // The exponent value at and beneath which toString returns exponential notation.\r\n\t      // Number type: -7\r\n\t      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n\t      // The exponent value at and above which toString returns exponential notation.\r\n\t      // Number type: 21\r\n\t      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n\t      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n\t      // The minimum exponent value, beneath which underflow to zero occurs.\r\n\t      // Number type: -324  (5e-324)\r\n\t      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n\t      // The maximum exponent value, above which overflow to Infinity occurs.\r\n\t      // Number type:  308  (1.7976931348623157e+308)\r\n\t      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n\t      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n\t      // Whether to use cryptographically-secure random number generation, if available.\r\n\t      CRYPTO = false,                          // true or false\r\n\r\n\t      // The modulo mode used when calculating the modulus: a mod n.\r\n\t      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n\t      // The remainder (r) is calculated as: r = a - n * q.\r\n\t      //\r\n\t      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n\t      // DOWN      1 The remainder has the same sign as the dividend.\r\n\t      //             This modulo mode is commonly known as 'truncated division' and is\r\n\t      //             equivalent to (a % n) in JavaScript.\r\n\t      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n\t      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n\t      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n\t      //             The remainder is always positive.\r\n\t      //\r\n\t      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n\t      // modes are commonly used for the modulus operation.\r\n\t      // Although the other rounding modes can also be used, they may not give useful results.\r\n\t      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n\t      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n\t      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n\t      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n\t      // The format specification used by the BigNumber.prototype.toFormat method.\r\n\t      FORMAT = {\r\n\t        prefix: '',\r\n\t        groupSize: 3,\r\n\t        secondaryGroupSize: 0,\r\n\t        groupSeparator: ',',\r\n\t        decimalSeparator: '.',\r\n\t        fractionGroupSize: 0,\r\n\t        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n\t        suffix: ''\r\n\t      },\r\n\r\n\t      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n\t      // '-', '.', whitespace, or repeated character.\r\n\t      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n\t      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n\t      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n\t    //------------------------------------------------------------------------------------------\r\n\r\n\r\n\t    // CONSTRUCTOR\r\n\r\n\r\n\t    /*\r\n\t     * The BigNumber constructor and exported function.\r\n\t     * Create and return a new instance of a BigNumber object.\r\n\t     *\r\n\t     * v {number|string|BigNumber} A numeric value.\r\n\t     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n\t     */\r\n\t    function BigNumber(v, b) {\r\n\t      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n\t        x = this;\r\n\r\n\t      // Enable constructor call without `new`.\r\n\t      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n\t      if (b == null) {\r\n\r\n\t        if (v && v._isBigNumber === true) {\r\n\t          x.s = v.s;\r\n\r\n\t          if (!v.c || v.e > MAX_EXP) {\r\n\t            x.c = x.e = null;\r\n\t          } else if (v.e < MIN_EXP) {\r\n\t            x.c = [x.e = 0];\r\n\t          } else {\r\n\t            x.e = v.e;\r\n\t            x.c = v.c.slice();\r\n\t          }\r\n\r\n\t          return;\r\n\t        }\r\n\r\n\t        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n\t          // Use `1 / n` to handle minus zero also.\r\n\t          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n\t          // Fast path for integers, where n < 2147483648 (2**31).\r\n\t          if (v === ~~v) {\r\n\t            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n\t            if (e > MAX_EXP) {\r\n\t              x.c = x.e = null;\r\n\t            } else {\r\n\t              x.e = e;\r\n\t              x.c = [v];\r\n\t            }\r\n\r\n\t            return;\r\n\t          }\r\n\r\n\t          str = String(v);\r\n\t        } else {\r\n\r\n\t          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n\t          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n\t        }\r\n\r\n\t        // Decimal point?\r\n\t        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n\t        // Exponential form?\r\n\t        if ((i = str.search(/e/i)) > 0) {\r\n\r\n\t          // Determine exponent.\r\n\t          if (e < 0) e = i;\r\n\t          e += +str.slice(i + 1);\r\n\t          str = str.substring(0, i);\r\n\t        } else if (e < 0) {\r\n\r\n\t          // Integer.\r\n\t          e = str.length;\r\n\t        }\r\n\r\n\t      } else {\r\n\r\n\t        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n\t        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n\t        // Allow exponential notation to be used with base 10 argument, while\r\n\t        // also rounding to DECIMAL_PLACES as with other bases.\r\n\t        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n\t          x = new BigNumber(v);\r\n\t          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n\t        }\r\n\r\n\t        str = String(v);\r\n\r\n\t        if (isNum = typeof v == 'number') {\r\n\r\n\t          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n\t          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n\t          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n\t          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n\t          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n\t            throw Error\r\n\t             (tooManyDigits + v);\r\n\t          }\r\n\t        } else {\r\n\t          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n\t        }\r\n\r\n\t        alphabet = ALPHABET.slice(0, b);\r\n\t        e = i = 0;\r\n\r\n\t        // Check that str is a valid base b number.\r\n\t        // Don't use RegExp, so alphabet can contain special characters.\r\n\t        for (len = str.length; i < len; i++) {\r\n\t          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n\t            if (c == '.') {\r\n\r\n\t              // If '.' is not the first character and it has not be found before.\r\n\t              if (i > e) {\r\n\t                e = len;\r\n\t                continue;\r\n\t              }\r\n\t            } else if (!caseChanged) {\r\n\r\n\t              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n\t              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n\t                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n\t                caseChanged = true;\r\n\t                i = -1;\r\n\t                e = 0;\r\n\t                continue;\r\n\t              }\r\n\t            }\r\n\r\n\t            return parseNumeric(x, String(v), isNum, b);\r\n\t          }\r\n\t        }\r\n\r\n\t        // Prevent later check for length on converted number.\r\n\t        isNum = false;\r\n\t        str = convertBase(str, b, 10, x.s);\r\n\r\n\t        // Decimal point?\r\n\t        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\t        else e = str.length;\r\n\t      }\r\n\r\n\t      // Determine leading zeros.\r\n\t      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n\t      // Determine trailing zeros.\r\n\t      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n\t      if (str = str.slice(i, ++len)) {\r\n\t        len -= i;\r\n\r\n\t        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n\t        if (isNum && BigNumber.DEBUG &&\r\n\t          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n\t            throw Error\r\n\t             (tooManyDigits + (x.s * v));\r\n\t        }\r\n\r\n\t         // Overflow?\r\n\t        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n\t          // Infinity.\r\n\t          x.c = x.e = null;\r\n\r\n\t        // Underflow?\r\n\t        } else if (e < MIN_EXP) {\r\n\r\n\t          // Zero.\r\n\t          x.c = [x.e = 0];\r\n\t        } else {\r\n\t          x.e = e;\r\n\t          x.c = [];\r\n\r\n\t          // Transform base\r\n\r\n\t          // e is the base 10 exponent.\r\n\t          // i is where to slice str to get the first element of the coefficient array.\r\n\t          i = (e + 1) % LOG_BASE;\r\n\t          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n\t          if (i < len) {\r\n\t            if (i) x.c.push(+str.slice(0, i));\r\n\r\n\t            for (len -= LOG_BASE; i < len;) {\r\n\t              x.c.push(+str.slice(i, i += LOG_BASE));\r\n\t            }\r\n\r\n\t            i = LOG_BASE - (str = str.slice(i)).length;\r\n\t          } else {\r\n\t            i -= len;\r\n\t          }\r\n\r\n\t          for (; i--; str += '0');\r\n\t          x.c.push(+str);\r\n\t        }\r\n\t      } else {\r\n\r\n\t        // Zero.\r\n\t        x.c = [x.e = 0];\r\n\t      }\r\n\t    }\r\n\r\n\r\n\t    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n\t    BigNumber.clone = clone;\r\n\r\n\t    BigNumber.ROUND_UP = 0;\r\n\t    BigNumber.ROUND_DOWN = 1;\r\n\t    BigNumber.ROUND_CEIL = 2;\r\n\t    BigNumber.ROUND_FLOOR = 3;\r\n\t    BigNumber.ROUND_HALF_UP = 4;\r\n\t    BigNumber.ROUND_HALF_DOWN = 5;\r\n\t    BigNumber.ROUND_HALF_EVEN = 6;\r\n\t    BigNumber.ROUND_HALF_CEIL = 7;\r\n\t    BigNumber.ROUND_HALF_FLOOR = 8;\r\n\t    BigNumber.EUCLID = 9;\r\n\r\n\r\n\t    /*\r\n\t     * Configure infrequently-changing library-wide settings.\r\n\t     *\r\n\t     * Accept an object with the following optional properties (if the value of a property is\r\n\t     * a number, it must be an integer within the inclusive range stated):\r\n\t     *\r\n\t     *   DECIMAL_PLACES   {number}           0 to MAX\r\n\t     *   ROUNDING_MODE    {number}           0 to 8\r\n\t     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n\t     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n\t     *   CRYPTO           {boolean}          true or false\r\n\t     *   MODULO_MODE      {number}           0 to 9\r\n\t     *   POW_PRECISION       {number}           0 to MAX\r\n\t     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n\t     *                                       not contain '.'.\r\n\t     *   FORMAT           {object}           An object with some of the following properties:\r\n\t     *     prefix                 {string}\r\n\t     *     groupSize              {number}\r\n\t     *     secondaryGroupSize     {number}\r\n\t     *     groupSeparator         {string}\r\n\t     *     decimalSeparator       {string}\r\n\t     *     fractionGroupSize      {number}\r\n\t     *     fractionGroupSeparator {string}\r\n\t     *     suffix                 {string}\r\n\t     *\r\n\t     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n\t     *\r\n\t     * E.g.\r\n\t     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n\t     *\r\n\t     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n\t     *\r\n\t     * Return an object with the properties current values.\r\n\t     */\r\n\t    BigNumber.config = BigNumber.set = function (obj) {\r\n\t      var p, v;\r\n\r\n\t      if (obj != null) {\r\n\r\n\t        if (typeof obj == 'object') {\r\n\r\n\t          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n\t          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, MAX, p);\r\n\t            DECIMAL_PLACES = v;\r\n\t          }\r\n\r\n\t          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n\t          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, 8, p);\r\n\t            ROUNDING_MODE = v;\r\n\t          }\r\n\r\n\t          // EXPONENTIAL_AT {number|number[]}\r\n\t          // Integer, -MAX to MAX inclusive or\r\n\t          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n\t          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n\t            v = obj[p];\r\n\t            if (v && v.pop) {\r\n\t              intCheck(v[0], -MAX, 0, p);\r\n\t              intCheck(v[1], 0, MAX, p);\r\n\t              TO_EXP_NEG = v[0];\r\n\t              TO_EXP_POS = v[1];\r\n\t            } else {\r\n\t              intCheck(v, -MAX, MAX, p);\r\n\t              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n\t            }\r\n\t          }\r\n\r\n\t          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n\t          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n\t          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n\t            v = obj[p];\r\n\t            if (v && v.pop) {\r\n\t              intCheck(v[0], -MAX, -1, p);\r\n\t              intCheck(v[1], 1, MAX, p);\r\n\t              MIN_EXP = v[0];\r\n\t              MAX_EXP = v[1];\r\n\t            } else {\r\n\t              intCheck(v, -MAX, MAX, p);\r\n\t              if (v) {\r\n\t                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n\t              } else {\r\n\t                throw Error\r\n\t                 (bignumberError + p + ' cannot be zero: ' + v);\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // CRYPTO {boolean} true or false.\r\n\t          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n\t          // '[BigNumber Error] crypto unavailable'\r\n\t          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n\t            v = obj[p];\r\n\t            if (v === !!v) {\r\n\t              if (v) {\r\n\t                if (typeof crypto != 'undefined' && crypto &&\r\n\t                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n\t                  CRYPTO = v;\r\n\t                } else {\r\n\t                  CRYPTO = !v;\r\n\t                  throw Error\r\n\t                   (bignumberError + 'crypto unavailable');\r\n\t                }\r\n\t              } else {\r\n\t                CRYPTO = v;\r\n\t              }\r\n\t            } else {\r\n\t              throw Error\r\n\t               (bignumberError + p + ' not true or false: ' + v);\r\n\t            }\r\n\t          }\r\n\r\n\t          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n\t          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, 9, p);\r\n\t            MODULO_MODE = v;\r\n\t          }\r\n\r\n\t          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n\t          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, MAX, p);\r\n\t            POW_PRECISION = v;\r\n\t          }\r\n\r\n\t          // FORMAT {object}\r\n\t          // '[BigNumber Error] FORMAT not an object: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n\t            v = obj[p];\r\n\t            if (typeof v == 'object') FORMAT = v;\r\n\t            else throw Error\r\n\t             (bignumberError + p + ' not an object: ' + v);\r\n\t          }\r\n\r\n\t          // ALPHABET {string}\r\n\t          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n\t            v = obj[p];\r\n\r\n\t            // Disallow if less than two characters,\r\n\t            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n\t            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n\t              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n\t              ALPHABET = v;\r\n\t            } else {\r\n\t              throw Error\r\n\t               (bignumberError + p + ' invalid: ' + v);\r\n\t            }\r\n\t          }\r\n\r\n\t        } else {\r\n\r\n\t          // '[BigNumber Error] Object expected: {v}'\r\n\t          throw Error\r\n\t           (bignumberError + 'Object expected: ' + obj);\r\n\t        }\r\n\t      }\r\n\r\n\t      return {\r\n\t        DECIMAL_PLACES: DECIMAL_PLACES,\r\n\t        ROUNDING_MODE: ROUNDING_MODE,\r\n\t        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n\t        RANGE: [MIN_EXP, MAX_EXP],\r\n\t        CRYPTO: CRYPTO,\r\n\t        MODULO_MODE: MODULO_MODE,\r\n\t        POW_PRECISION: POW_PRECISION,\r\n\t        FORMAT: FORMAT,\r\n\t        ALPHABET: ALPHABET\r\n\t      };\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if v is a BigNumber instance, otherwise return false.\r\n\t     *\r\n\t     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n\t     *\r\n\t     * v {any}\r\n\t     *\r\n\t     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n\t     */\r\n\t    BigNumber.isBigNumber = function (v) {\r\n\t      if (!v || v._isBigNumber !== true) return false;\r\n\t      if (!BigNumber.DEBUG) return true;\r\n\r\n\t      var i, n,\r\n\t        c = v.c,\r\n\t        e = v.e,\r\n\t        s = v.s;\r\n\r\n\t      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n\t        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n\t          // If the first element is zero, the BigNumber value must be zero.\r\n\t          if (c[0] === 0) {\r\n\t            if (e === 0 && c.length === 1) return true;\r\n\t            break out;\r\n\t          }\r\n\r\n\t          // Calculate number of digits that c[0] should have, based on the exponent.\r\n\t          i = (e + 1) % LOG_BASE;\r\n\t          if (i < 1) i += LOG_BASE;\r\n\r\n\t          // Calculate number of digits of c[0].\r\n\t          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n\t          if (String(c[0]).length == i) {\r\n\r\n\t            for (i = 0; i < c.length; i++) {\r\n\t              n = c[i];\r\n\t              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n\t            }\r\n\r\n\t            // Last element cannot be zero, unless it is the only element.\r\n\t            if (n !== 0) return true;\r\n\t          }\r\n\t        }\r\n\r\n\t      // Infinity/NaN\r\n\t      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n\t        return true;\r\n\t      }\r\n\r\n\t      throw Error\r\n\t        (bignumberError + 'Invalid BigNumber: ' + v);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the maximum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.maximum = BigNumber.max = function () {\r\n\t      return maxOrMin(arguments, -1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the minimum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.minimum = BigNumber.min = function () {\r\n\t      return maxOrMin(arguments, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n\t     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n\t     * zeros are produced).\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n\t     * '[BigNumber Error] crypto unavailable'\r\n\t     */\r\n\t    BigNumber.random = (function () {\r\n\t      var pow2_53 = 0x20000000000000;\r\n\r\n\t      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n\t      // Check if Math.random() produces more than 32 bits of randomness.\r\n\t      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n\t      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n\t      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n\t       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n\t       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n\t         (Math.random() * 0x800000 | 0); };\r\n\r\n\t      return function (dp) {\r\n\t        var a, b, e, k, v,\r\n\t          i = 0,\r\n\t          c = [],\r\n\t          rand = new BigNumber(ONE);\r\n\r\n\t        if (dp == null) dp = DECIMAL_PLACES;\r\n\t        else intCheck(dp, 0, MAX);\r\n\r\n\t        k = mathceil(dp / LOG_BASE);\r\n\r\n\t        if (CRYPTO) {\r\n\r\n\t          // Browsers supporting crypto.getRandomValues.\r\n\t          if (crypto.getRandomValues) {\r\n\r\n\t            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n\t            for (; i < k;) {\r\n\r\n\t              // 53 bits:\r\n\t              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n\t              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n\t              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n\t              //                                     11111 11111111 11111111\r\n\t              // 0x20000 is 2^21.\r\n\t              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n\t              // Rejection sampling:\r\n\t              // 0 <= v < 9007199254740992\r\n\t              // Probability that v >= 9e15, is\r\n\t              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n\t              if (v >= 9e15) {\r\n\t                b = crypto.getRandomValues(new Uint32Array(2));\r\n\t                a[i] = b[0];\r\n\t                a[i + 1] = b[1];\r\n\t              } else {\r\n\r\n\t                // 0 <= v <= 8999999999999999\r\n\t                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                c.push(v % 1e14);\r\n\t                i += 2;\r\n\t              }\r\n\t            }\r\n\t            i = k / 2;\r\n\r\n\t          // Node.js supporting crypto.randomBytes.\r\n\t          } else if (crypto.randomBytes) {\r\n\r\n\t            // buffer\r\n\t            a = crypto.randomBytes(k *= 7);\r\n\r\n\t            for (; i < k;) {\r\n\r\n\t              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n\t              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n\t              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n\t              // 0 <= v < 9007199254740992\r\n\t              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n\t                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n\t                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n\t              if (v >= 9e15) {\r\n\t                crypto.randomBytes(7).copy(a, i);\r\n\t              } else {\r\n\r\n\t                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                c.push(v % 1e14);\r\n\t                i += 7;\r\n\t              }\r\n\t            }\r\n\t            i = k / 7;\r\n\t          } else {\r\n\t            CRYPTO = false;\r\n\t            throw Error\r\n\t             (bignumberError + 'crypto unavailable');\r\n\t          }\r\n\t        }\r\n\r\n\t        // Use Math.random.\r\n\t        if (!CRYPTO) {\r\n\r\n\t          for (; i < k;) {\r\n\t            v = random53bitInt();\r\n\t            if (v < 9e15) c[i++] = v % 1e14;\r\n\t          }\r\n\t        }\r\n\r\n\t        k = c[--i];\r\n\t        dp %= LOG_BASE;\r\n\r\n\t        // Convert trailing digits to zeros according to dp.\r\n\t        if (k && dp) {\r\n\t          v = POWS_TEN[LOG_BASE - dp];\r\n\t          c[i] = mathfloor(k / v) * v;\r\n\t        }\r\n\r\n\t        // Remove trailing elements which are zero.\r\n\t        for (; c[i] === 0; c.pop(), i--);\r\n\r\n\t        // Zero?\r\n\t        if (i < 0) {\r\n\t          c = [e = 0];\r\n\t        } else {\r\n\r\n\t          // Remove leading elements which are zero and adjust exponent accordingly.\r\n\t          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n\t          // Count the digits of the first element of c to determine leading zeros, and...\r\n\t          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n\t          // adjust the exponent accordingly.\r\n\t          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n\t        }\r\n\r\n\t        rand.e = e;\r\n\t        rand.c = c;\r\n\t        return rand;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Return a BigNumber whose value is the sum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.sum = function () {\r\n\t      var i = 1,\r\n\t        args = arguments,\r\n\t        sum = new BigNumber(args[0]);\r\n\t      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n\t      return sum;\r\n\t    };\r\n\r\n\r\n\t    // PRIVATE FUNCTIONS\r\n\r\n\r\n\t    // Called by BigNumber and BigNumber.prototype.toString.\r\n\t    convertBase = (function () {\r\n\t      var decimal = '0123456789';\r\n\r\n\t      /*\r\n\t       * Convert string of baseIn to an array of numbers of baseOut.\r\n\t       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n\t       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n\t       */\r\n\t      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n\t        var j,\r\n\t          arr = [0],\r\n\t          arrL,\r\n\t          i = 0,\r\n\t          len = str.length;\r\n\r\n\t        for (; i < len;) {\r\n\t          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n\t          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n\t          for (j = 0; j < arr.length; j++) {\r\n\r\n\t            if (arr[j] > baseOut - 1) {\r\n\t              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n\t              arr[j + 1] += arr[j] / baseOut | 0;\r\n\t              arr[j] %= baseOut;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\r\n\t        return arr.reverse();\r\n\t      }\r\n\r\n\t      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n\t      // If the caller is toString, we are converting from base 10 to baseOut.\r\n\t      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n\t      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n\t        var alphabet, d, e, k, r, x, xc, y,\r\n\t          i = str.indexOf('.'),\r\n\t          dp = DECIMAL_PLACES,\r\n\t          rm = ROUNDING_MODE;\r\n\r\n\t        // Non-integer.\r\n\t        if (i >= 0) {\r\n\t          k = POW_PRECISION;\r\n\r\n\t          // Unlimited precision.\r\n\t          POW_PRECISION = 0;\r\n\t          str = str.replace('.', '');\r\n\t          y = new BigNumber(baseIn);\r\n\t          x = y.pow(str.length - i);\r\n\t          POW_PRECISION = k;\r\n\r\n\t          // Convert str as if an integer, then restore the fraction part by dividing the\r\n\t          // result by its base raised to a power.\r\n\r\n\t          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n\t           10, baseOut, decimal);\r\n\t          y.e = y.c.length;\r\n\t        }\r\n\r\n\t        // Convert the number as integer.\r\n\r\n\t        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n\t         ? (alphabet = ALPHABET, decimal)\r\n\t         : (alphabet = decimal, ALPHABET));\r\n\r\n\t        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n\t        e = k = xc.length;\r\n\r\n\t        // Remove trailing zeros.\r\n\t        for (; xc[--k] == 0; xc.pop());\r\n\r\n\t        // Zero?\r\n\t        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n\t        // Does str represent an integer? If so, no need for the division.\r\n\t        if (i < 0) {\r\n\t          --e;\r\n\t        } else {\r\n\t          x.c = xc;\r\n\t          x.e = e;\r\n\r\n\t          // The sign is needed for correct rounding.\r\n\t          x.s = sign;\r\n\t          x = div(x, y, dp, rm, baseOut);\r\n\t          xc = x.c;\r\n\t          r = x.r;\r\n\t          e = x.e;\r\n\t        }\r\n\r\n\t        // xc now represents str converted to baseOut.\r\n\r\n\t        // THe index of the rounding digit.\r\n\t        d = e + dp + 1;\r\n\r\n\t        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n\t        i = xc[d];\r\n\r\n\t        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n\t        k = baseOut / 2;\r\n\t        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n\t        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n\t               rm == (x.s < 0 ? 8 : 7));\r\n\r\n\t        // If the index of the rounding digit is not greater than zero, or xc represents\r\n\t        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n\t        // such as 0.00001.\r\n\t        if (d < 1 || !xc[0]) {\r\n\r\n\t          // 1^-dp or 0\r\n\t          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n\t        } else {\r\n\r\n\t          // Truncate xc to the required number of decimal places.\r\n\t          xc.length = d;\r\n\r\n\t          // Round up?\r\n\t          if (r) {\r\n\r\n\t            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n\t            for (--baseOut; ++xc[--d] > baseOut;) {\r\n\t              xc[d] = 0;\r\n\r\n\t              if (!d) {\r\n\t                ++e;\r\n\t                xc = [1].concat(xc);\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // Determine trailing zeros.\r\n\t          for (k = xc.length; !xc[--k];);\r\n\r\n\t          // E.g. [4, 11, 15] becomes 4bf.\r\n\t          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n\t          // Add leading zeros, decimal point and trailing zeros as required.\r\n\t          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n\t        }\r\n\r\n\t        // The caller will add the sign.\r\n\t        return str;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    // Perform division in the specified base. Called by div and convertBase.\r\n\t    div = (function () {\r\n\r\n\t      // Assume non-zero x and k.\r\n\t      function multiply(x, k, base) {\r\n\t        var m, temp, xlo, xhi,\r\n\t          carry = 0,\r\n\t          i = x.length,\r\n\t          klo = k % SQRT_BASE,\r\n\t          khi = k / SQRT_BASE | 0;\r\n\r\n\t        for (x = x.slice(); i--;) {\r\n\t          xlo = x[i] % SQRT_BASE;\r\n\t          xhi = x[i] / SQRT_BASE | 0;\r\n\t          m = khi * xlo + xhi * klo;\r\n\t          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n\t          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n\t          x[i] = temp % base;\r\n\t        }\r\n\r\n\t        if (carry) x = [carry].concat(x);\r\n\r\n\t        return x;\r\n\t      }\r\n\r\n\t      function compare(a, b, aL, bL) {\r\n\t        var i, cmp;\r\n\r\n\t        if (aL != bL) {\r\n\t          cmp = aL > bL ? 1 : -1;\r\n\t        } else {\r\n\r\n\t          for (i = cmp = 0; i < aL; i++) {\r\n\r\n\t            if (a[i] != b[i]) {\r\n\t              cmp = a[i] > b[i] ? 1 : -1;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\r\n\t        return cmp;\r\n\t      }\r\n\r\n\t      function subtract(a, b, aL, base) {\r\n\t        var i = 0;\r\n\r\n\t        // Subtract b from a.\r\n\t        for (; aL--;) {\r\n\t          a[aL] -= i;\r\n\t          i = a[aL] < b[aL] ? 1 : 0;\r\n\t          a[aL] = i * base + a[aL] - b[aL];\r\n\t        }\r\n\r\n\t        // Remove leading zeros.\r\n\t        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n\t      }\r\n\r\n\t      // x: dividend, y: divisor.\r\n\t      return function (x, y, dp, rm, base) {\r\n\t        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n\t          yL, yz,\r\n\t          s = x.s == y.s ? 1 : -1,\r\n\t          xc = x.c,\r\n\t          yc = y.c;\r\n\r\n\t        // Either NaN, Infinity or 0?\r\n\t        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n\t          return new BigNumber(\r\n\r\n\t           // Return NaN if either NaN, or both Infinity or 0.\r\n\t           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n\t            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n\t            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n\t         );\r\n\t        }\r\n\r\n\t        q = new BigNumber(s);\r\n\t        qc = q.c = [];\r\n\t        e = x.e - y.e;\r\n\t        s = dp + e + 1;\r\n\r\n\t        if (!base) {\r\n\t          base = BASE;\r\n\t          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n\t          s = s / LOG_BASE | 0;\r\n\t        }\r\n\r\n\t        // Result exponent may be one less then the current value of e.\r\n\t        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n\t        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n\t        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n\t        if (s < 0) {\r\n\t          qc.push(1);\r\n\t          more = true;\r\n\t        } else {\r\n\t          xL = xc.length;\r\n\t          yL = yc.length;\r\n\t          i = 0;\r\n\t          s += 2;\r\n\r\n\t          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n\t          n = mathfloor(base / (yc[0] + 1));\r\n\r\n\t          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n\t          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n\t          if (n > 1) {\r\n\t            yc = multiply(yc, n, base);\r\n\t            xc = multiply(xc, n, base);\r\n\t            yL = yc.length;\r\n\t            xL = xc.length;\r\n\t          }\r\n\r\n\t          xi = yL;\r\n\t          rem = xc.slice(0, yL);\r\n\t          remL = rem.length;\r\n\r\n\t          // Add zeros to make remainder as long as divisor.\r\n\t          for (; remL < yL; rem[remL++] = 0);\r\n\t          yz = yc.slice();\r\n\t          yz = [0].concat(yz);\r\n\t          yc0 = yc[0];\r\n\t          if (yc[1] >= base / 2) yc0++;\r\n\t          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n\t          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n\t          do {\r\n\t            n = 0;\r\n\r\n\t            // Compare divisor and remainder.\r\n\t            cmp = compare(yc, rem, yL, remL);\r\n\r\n\t            // If divisor < remainder.\r\n\t            if (cmp < 0) {\r\n\r\n\t              // Calculate trial digit, n.\r\n\r\n\t              rem0 = rem[0];\r\n\t              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n\t              // n is how many times the divisor goes into the current remainder.\r\n\t              n = mathfloor(rem0 / yc0);\r\n\r\n\t              //  Algorithm:\r\n\t              //  product = divisor multiplied by trial digit (n).\r\n\t              //  Compare product and remainder.\r\n\t              //  If product is greater than remainder:\r\n\t              //    Subtract divisor from product, decrement trial digit.\r\n\t              //  Subtract product from remainder.\r\n\t              //  If product was less than remainder at the last compare:\r\n\t              //    Compare new remainder and divisor.\r\n\t              //    If remainder is greater than divisor:\r\n\t              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n\t              if (n > 1) {\r\n\r\n\t                // n may be > base only when base is 3.\r\n\t                if (n >= base) n = base - 1;\r\n\r\n\t                // product = divisor * trial digit.\r\n\t                prod = multiply(yc, n, base);\r\n\t                prodL = prod.length;\r\n\t                remL = rem.length;\r\n\r\n\t                // Compare product and remainder.\r\n\t                // If product > remainder then trial digit n too high.\r\n\t                // n is 1 too high about 5% of the time, and is not known to have\r\n\t                // ever been more than 1 too high.\r\n\t                while (compare(prod, rem, prodL, remL) == 1) {\r\n\t                  n--;\r\n\r\n\t                  // Subtract divisor from product.\r\n\t                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n\t                  prodL = prod.length;\r\n\t                  cmp = 1;\r\n\t                }\r\n\t              } else {\r\n\r\n\t                // n is 0 or 1, cmp is -1.\r\n\t                // If n is 0, there is no need to compare yc and rem again below,\r\n\t                // so change cmp to 1 to avoid it.\r\n\t                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n\t                if (n == 0) {\r\n\r\n\t                  // divisor < remainder, so n must be at least 1.\r\n\t                  cmp = n = 1;\r\n\t                }\r\n\r\n\t                // product = divisor\r\n\t                prod = yc.slice();\r\n\t                prodL = prod.length;\r\n\t              }\r\n\r\n\t              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n\t              // Subtract product from remainder.\r\n\t              subtract(rem, prod, remL, base);\r\n\t              remL = rem.length;\r\n\r\n\t               // If product was < remainder.\r\n\t              if (cmp == -1) {\r\n\r\n\t                // Compare divisor and new remainder.\r\n\t                // If divisor < new remainder, subtract divisor from remainder.\r\n\t                // Trial digit n too low.\r\n\t                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n\t                while (compare(yc, rem, yL, remL) < 1) {\r\n\t                  n++;\r\n\r\n\t                  // Subtract divisor from remainder.\r\n\t                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n\t                  remL = rem.length;\r\n\t                }\r\n\t              }\r\n\t            } else if (cmp === 0) {\r\n\t              n++;\r\n\t              rem = [0];\r\n\t            } // else cmp === 1 and n will be 0\r\n\r\n\t            // Add the next digit, n, to the result array.\r\n\t            qc[i++] = n;\r\n\r\n\t            // Update the remainder.\r\n\t            if (rem[0]) {\r\n\t              rem[remL++] = xc[xi] || 0;\r\n\t            } else {\r\n\t              rem = [xc[xi]];\r\n\t              remL = 1;\r\n\t            }\r\n\t          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n\t          more = rem[0] != null;\r\n\r\n\t          // Leading zero?\r\n\t          if (!qc[0]) qc.splice(0, 1);\r\n\t        }\r\n\r\n\t        if (base == BASE) {\r\n\r\n\t          // To calculate q.e, first get the number of digits of qc[0].\r\n\t          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n\t          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n\t        // Caller is convertBase.\r\n\t        } else {\r\n\t          q.e = e;\r\n\t          q.r = +more;\r\n\t        }\r\n\r\n\t        return q;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n\t     * notation rounded to the specified decimal places or significant digits.\r\n\t     *\r\n\t     * n: a BigNumber.\r\n\t     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n\t     * rm: the rounding mode.\r\n\t     * id: 1 (toExponential) or 2 (toPrecision).\r\n\t     */\r\n\t    function format(n, i, rm, id) {\r\n\t      var c0, e, ne, len, str;\r\n\r\n\t      if (rm == null) rm = ROUNDING_MODE;\r\n\t      else intCheck(rm, 0, 8);\r\n\r\n\t      if (!n.c) return n.toString();\r\n\r\n\t      c0 = n.c[0];\r\n\t      ne = n.e;\r\n\r\n\t      if (i == null) {\r\n\t        str = coeffToString(n.c);\r\n\t        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n\t         ? toExponential(str, ne)\r\n\t         : toFixedPoint(str, ne, '0');\r\n\t      } else {\r\n\t        n = round(new BigNumber(n), i, rm);\r\n\r\n\t        // n.e may have changed if the value was rounded up.\r\n\t        e = n.e;\r\n\r\n\t        str = coeffToString(n.c);\r\n\t        len = str.length;\r\n\r\n\t        // toPrecision returns exponential notation if the number of significant digits\r\n\t        // specified is less than the number of digits necessary to represent the integer\r\n\t        // part of the value in fixed-point notation.\r\n\r\n\t        // Exponential notation.\r\n\t        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n\t          // Append zeros?\r\n\t          for (; len < i; str += '0', len++);\r\n\t          str = toExponential(str, e);\r\n\r\n\t        // Fixed-point notation.\r\n\t        } else {\r\n\t          i -= ne;\r\n\t          str = toFixedPoint(str, e, '0');\r\n\r\n\t          // Append zeros?\r\n\t          if (e + 1 > len) {\r\n\t            if (--i > 0) for (str += '.'; i--; str += '0');\r\n\t          } else {\r\n\t            i += e - len;\r\n\t            if (i > 0) {\r\n\t              if (e + 1 == len) str += '.';\r\n\t              for (; i--; str += '0');\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      return n.s < 0 && c0 ? '-' + str : str;\r\n\t    }\r\n\r\n\r\n\t    // Handle BigNumber.max and BigNumber.min.\r\n\t    // If any number is NaN, return NaN.\r\n\t    function maxOrMin(args, n) {\r\n\t      var k, y,\r\n\t        i = 1,\r\n\t        x = new BigNumber(args[0]);\r\n\r\n\t      for (; i < args.length; i++) {\r\n\t        y = new BigNumber(args[i]);\r\n\t        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n\t          x = y;\r\n\t        }\r\n\t      }\r\n\r\n\t      return x;\r\n\t    }\r\n\r\n\r\n\t    /*\r\n\t     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n\t     * Called by minus, plus and times.\r\n\t     */\r\n\t    function normalise(n, c, e) {\r\n\t      var i = 1,\r\n\t        j = c.length;\r\n\r\n\t       // Remove trailing zeros.\r\n\t      for (; !c[--j]; c.pop());\r\n\r\n\t      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n\t      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n\t      // Overflow?\r\n\t      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n\t        // Infinity.\r\n\t        n.c = n.e = null;\r\n\r\n\t      // Underflow?\r\n\t      } else if (e < MIN_EXP) {\r\n\r\n\t        // Zero.\r\n\t        n.c = [n.e = 0];\r\n\t      } else {\r\n\t        n.e = e;\r\n\t        n.c = c;\r\n\t      }\r\n\r\n\t      return n;\r\n\t    }\r\n\r\n\r\n\t    // Handle values that fail the validity test in BigNumber.\r\n\t    parseNumeric = (function () {\r\n\t      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n\t        dotAfter = /^([^.]+)\\.$/,\r\n\t        dotBefore = /^\\.([^.]+)$/,\r\n\t        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n\t        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n\t      return function (x, str, isNum, b) {\r\n\t        var base,\r\n\t          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n\t        // No exception on ±Infinity or NaN.\r\n\t        if (isInfinityOrNaN.test(s)) {\r\n\t          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n\t        } else {\r\n\t          if (!isNum) {\r\n\r\n\t            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n\t            s = s.replace(basePrefix, function (m, p1, p2) {\r\n\t              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n\t              return !b || b == base ? p1 : m;\r\n\t            });\r\n\r\n\t            if (b) {\r\n\t              base = b;\r\n\r\n\t              // E.g. '1.' to '1', '.1' to '0.1'\r\n\t              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n\t            }\r\n\r\n\t            if (str != s) return new BigNumber(s, base);\r\n\t          }\r\n\r\n\t          // '[BigNumber Error] Not a number: {n}'\r\n\t          // '[BigNumber Error] Not a base {b} number: {n}'\r\n\t          if (BigNumber.DEBUG) {\r\n\t            throw Error\r\n\t              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n\t          }\r\n\r\n\t          // NaN\r\n\t          x.s = null;\r\n\t        }\r\n\r\n\t        x.c = x.e = null;\r\n\t      }\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n\t     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n\t     */\r\n\t    function round(x, sd, rm, r) {\r\n\t      var d, i, j, k, n, ni, rd,\r\n\t        xc = x.c,\r\n\t        pows10 = POWS_TEN;\r\n\r\n\t      // if x is not Infinity or NaN...\r\n\t      if (xc) {\r\n\r\n\t        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n\t        // ni is the index of n within x.c.\r\n\t        // d is the number of digits of n.\r\n\t        // i is the index of rd within n including leading zeros.\r\n\t        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n\t        out: {\r\n\r\n\t          // Get the number of digits of the first element of xc.\r\n\t          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n\t          i = sd - d;\r\n\r\n\t          // If the rounding digit is in the first element of xc...\r\n\t          if (i < 0) {\r\n\t            i += LOG_BASE;\r\n\t            j = sd;\r\n\t            n = xc[ni = 0];\r\n\r\n\t            // Get the rounding digit at index j of n.\r\n\t            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n\t          } else {\r\n\t            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n\t            if (ni >= xc.length) {\r\n\r\n\t              if (r) {\r\n\r\n\t                // Needed by sqrt.\r\n\t                for (; xc.length <= ni; xc.push(0));\r\n\t                n = rd = 0;\r\n\t                d = 1;\r\n\t                i %= LOG_BASE;\r\n\t                j = i - LOG_BASE + 1;\r\n\t              } else {\r\n\t                break out;\r\n\t              }\r\n\t            } else {\r\n\t              n = k = xc[ni];\r\n\r\n\t              // Get the number of digits of n.\r\n\t              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n\t              // Get the index of rd within n.\r\n\t              i %= LOG_BASE;\r\n\r\n\t              // Get the index of rd within n, adjusted for leading zeros.\r\n\t              // The number of leading zeros of n is given by LOG_BASE - d.\r\n\t              j = i - LOG_BASE + d;\r\n\r\n\t              // Get the rounding digit at index j of n.\r\n\t              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n\t            }\r\n\t          }\r\n\r\n\t          r = r || sd < 0 ||\r\n\r\n\t          // Are there any non-zero digits after the rounding digit?\r\n\t          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n\t          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n\t           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n\t          r = rm < 4\r\n\t           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n\t            // Check whether the digit to the left of the rounding digit is odd.\r\n\t            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n\t             rm == (x.s < 0 ? 8 : 7));\r\n\r\n\t          if (sd < 1 || !xc[0]) {\r\n\t            xc.length = 0;\r\n\r\n\t            if (r) {\r\n\r\n\t              // Convert sd to decimal places.\r\n\t              sd -= x.e + 1;\r\n\r\n\t              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n\t              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n\t              x.e = -sd || 0;\r\n\t            } else {\r\n\r\n\t              // Zero.\r\n\t              xc[0] = x.e = 0;\r\n\t            }\r\n\r\n\t            return x;\r\n\t          }\r\n\r\n\t          // Remove excess digits.\r\n\t          if (i == 0) {\r\n\t            xc.length = ni;\r\n\t            k = 1;\r\n\t            ni--;\r\n\t          } else {\r\n\t            xc.length = ni + 1;\r\n\t            k = pows10[LOG_BASE - i];\r\n\r\n\t            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n\t            // j > 0 means i > number of leading zeros of n.\r\n\t            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n\t          }\r\n\r\n\t          // Round up?\r\n\t          if (r) {\r\n\r\n\t            for (; ;) {\r\n\r\n\t              // If the digit to be rounded up is in the first element of xc...\r\n\t              if (ni == 0) {\r\n\r\n\t                // i will be the length of xc[0] before k is added.\r\n\t                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n\t                j = xc[0] += k;\r\n\t                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n\t                // if i != k the length has increased.\r\n\t                if (i != k) {\r\n\t                  x.e++;\r\n\t                  if (xc[0] == BASE) xc[0] = 1;\r\n\t                }\r\n\r\n\t                break;\r\n\t              } else {\r\n\t                xc[ni] += k;\r\n\t                if (xc[ni] != BASE) break;\r\n\t                xc[ni--] = 0;\r\n\t                k = 1;\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // Remove trailing zeros.\r\n\t          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n\t        }\r\n\r\n\t        // Overflow? Infinity.\r\n\t        if (x.e > MAX_EXP) {\r\n\t          x.c = x.e = null;\r\n\r\n\t        // Underflow? Zero.\r\n\t        } else if (x.e < MIN_EXP) {\r\n\t          x.c = [x.e = 0];\r\n\t        }\r\n\t      }\r\n\r\n\t      return x;\r\n\t    }\r\n\r\n\r\n\t    function valueOf(n) {\r\n\t      var str,\r\n\t        e = n.e;\r\n\r\n\t      if (e === null) return n.toString();\r\n\r\n\t      str = coeffToString(n.c);\r\n\r\n\t      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t        ? toExponential(str, e)\r\n\t        : toFixedPoint(str, e, '0');\r\n\r\n\t      return n.s < 0 ? '-' + str : str;\r\n\t    }\r\n\r\n\r\n\t    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n\t     */\r\n\t    P.absoluteValue = P.abs = function () {\r\n\t      var x = new BigNumber(this);\r\n\t      if (x.s < 0) x.s = 1;\r\n\t      return x;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return\r\n\t     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t     *   0 if they have the same value,\r\n\t     *   or null if the value of either is NaN.\r\n\t     */\r\n\t    P.comparedTo = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b));\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n\t     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n\t     *\r\n\t     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n\t     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n\t     * ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.decimalPlaces = P.dp = function (dp, rm) {\r\n\t      var c, n, v,\r\n\t        x = this;\r\n\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        if (rm == null) rm = ROUNDING_MODE;\r\n\t        else intCheck(rm, 0, 8);\r\n\r\n\t        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n\t      }\r\n\r\n\t      if (!(c = x.c)) return null;\r\n\t      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n\t      // Subtract the number of trailing zeros of the last number.\r\n\t      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n\t      if (n < 0) n = 0;\r\n\r\n\t      return n;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n / 0 = I\r\n\t     *  n / N = N\r\n\t     *  n / I = 0\r\n\t     *  0 / n = 0\r\n\t     *  0 / 0 = N\r\n\t     *  0 / N = N\r\n\t     *  0 / I = 0\r\n\t     *  N / n = N\r\n\t     *  N / 0 = N\r\n\t     *  N / N = N\r\n\t     *  N / I = N\r\n\t     *  I / n = I\r\n\t     *  I / 0 = I\r\n\t     *  I / N = N\r\n\t     *  I / I = N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n\t     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     */\r\n\t    P.dividedBy = P.div = function (y, b) {\r\n\t      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n\t     * BigNumber by the value of BigNumber(y, b).\r\n\t     */\r\n\t    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n\t      return div(this, new BigNumber(y, b), 0, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n\t     *\r\n\t     * If m is present, return the result modulo m.\r\n\t     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n\t     *\r\n\t     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n\t     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n\t     *\r\n\t     * n {number|string|BigNumber} The exponent. An integer.\r\n\t     * [m] {number|string|BigNumber} The modulus.\r\n\t     *\r\n\t     * '[BigNumber Error] Exponent not an integer: {n}'\r\n\t     */\r\n\t    P.exponentiatedBy = P.pow = function (n, m) {\r\n\t      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n\t        x = this;\r\n\r\n\t      n = new BigNumber(n);\r\n\r\n\t      // Allow NaN and ±Infinity, but not other non-integers.\r\n\t      if (n.c && !n.isInteger()) {\r\n\t        throw Error\r\n\t          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n\t      }\r\n\r\n\t      if (m != null) m = new BigNumber(m);\r\n\r\n\t      // Exponent of MAX_SAFE_INTEGER is 15.\r\n\t      nIsBig = n.e > 14;\r\n\r\n\t      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n\t      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n\t        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n\t        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n\t        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n\t        return m ? y.mod(m) : y;\r\n\t      }\r\n\r\n\t      nIsNeg = n.s < 0;\r\n\r\n\t      if (m) {\r\n\r\n\t        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n\t        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n\t        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n\t        if (isModExp) x = x.mod(m);\r\n\r\n\t      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n\t      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n\t      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n\t        // [1, 240000000]\r\n\t        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n\t        // [80000000000000]  [99999750000000]\r\n\t        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n\t        // If x is negative and n is odd, k = -0, else k = 0.\r\n\t        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n\t        // If x >= 1, k = ±Infinity.\r\n\t        if (x.e > -1) k = 1 / k;\r\n\r\n\t        // If n is negative return ±0, else return ±Infinity.\r\n\t        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n\t      } else if (POW_PRECISION) {\r\n\r\n\t        // Truncating each coefficient array to a length of k after each multiplication\r\n\t        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n\t        // i.e. there will be a minimum of 28 guard digits retained.\r\n\t        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n\t      }\r\n\r\n\t      if (nIsBig) {\r\n\t        half = new BigNumber(0.5);\r\n\t        if (nIsNeg) n.s = 1;\r\n\t        nIsOdd = isOdd(n);\r\n\t      } else {\r\n\t        i = Math.abs(+valueOf(n));\r\n\t        nIsOdd = i % 2;\r\n\t      }\r\n\r\n\t      y = new BigNumber(ONE);\r\n\r\n\t      // Performs 54 loop iterations for n of 9007199254740991.\r\n\t      for (; ;) {\r\n\r\n\t        if (nIsOdd) {\r\n\t          y = y.times(x);\r\n\t          if (!y.c) break;\r\n\r\n\t          if (k) {\r\n\t            if (y.c.length > k) y.c.length = k;\r\n\t          } else if (isModExp) {\r\n\t            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n\t          }\r\n\t        }\r\n\r\n\t        if (i) {\r\n\t          i = mathfloor(i / 2);\r\n\t          if (i === 0) break;\r\n\t          nIsOdd = i % 2;\r\n\t        } else {\r\n\t          n = n.times(half);\r\n\t          round(n, n.e + 1, 1);\r\n\r\n\t          if (n.e > 14) {\r\n\t            nIsOdd = isOdd(n);\r\n\t          } else {\r\n\t            i = +valueOf(n);\r\n\t            if (i === 0) break;\r\n\t            nIsOdd = i % 2;\r\n\t          }\r\n\t        }\r\n\r\n\t        x = x.times(x);\r\n\r\n\t        if (k) {\r\n\t          if (x.c && x.c.length > k) x.c.length = k;\r\n\t        } else if (isModExp) {\r\n\t          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n\t        }\r\n\t      }\r\n\r\n\t      if (isModExp) return y;\r\n\t      if (nIsNeg) y = ONE.div(y);\r\n\r\n\t      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n\t     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n\t     */\r\n\t    P.integerValue = function (rm) {\r\n\t      var n = new BigNumber(this);\r\n\t      if (rm == null) rm = ROUNDING_MODE;\r\n\t      else intCheck(rm, 0, 8);\r\n\t      return round(n, n.e + 1, rm);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isEqualTo = P.eq = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) === 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n\t     */\r\n\t    P.isFinite = function () {\r\n\t      return !!this.c;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isGreaterThan = P.gt = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) > 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n\t     * BigNumber(y, b), otherwise return false.\r\n\t     */\r\n\t    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n\t      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n\t     */\r\n\t    P.isInteger = function () {\r\n\t      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isLessThan = P.lt = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) < 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is less than or equal to the value of\r\n\t     * BigNumber(y, b), otherwise return false.\r\n\t     */\r\n\t    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n\t      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n\t     */\r\n\t    P.isNaN = function () {\r\n\t      return !this.s;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n\t     */\r\n\t    P.isNegative = function () {\r\n\t      return this.s < 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n\t     */\r\n\t    P.isPositive = function () {\r\n\t      return this.s > 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n\t     */\r\n\t    P.isZero = function () {\r\n\t      return !!this.c && this.c[0] == 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n - 0 = n\r\n\t     *  n - N = N\r\n\t     *  n - I = -I\r\n\t     *  0 - n = -n\r\n\t     *  0 - 0 = 0\r\n\t     *  0 - N = N\r\n\t     *  0 - I = -I\r\n\t     *  N - n = N\r\n\t     *  N - 0 = N\r\n\t     *  N - N = N\r\n\t     *  N - I = N\r\n\t     *  I - n = I\r\n\t     *  I - 0 = I\r\n\t     *  I - N = N\r\n\t     *  I - I = N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n\t     * BigNumber(y, b).\r\n\t     */\r\n\t    P.minus = function (y, b) {\r\n\t      var i, j, t, xLTy,\r\n\t        x = this,\r\n\t        a = x.s;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\t      b = y.s;\r\n\r\n\t      // Either NaN?\r\n\t      if (!a || !b) return new BigNumber(NaN);\r\n\r\n\t      // Signs differ?\r\n\t      if (a != b) {\r\n\t        y.s = -b;\r\n\t        return x.plus(y);\r\n\t      }\r\n\r\n\t      var xe = x.e / LOG_BASE,\r\n\t        ye = y.e / LOG_BASE,\r\n\t        xc = x.c,\r\n\t        yc = y.c;\r\n\r\n\t      if (!xe || !ye) {\r\n\r\n\t        // Either Infinity?\r\n\t        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n\t        // Either zero?\r\n\t        if (!xc[0] || !yc[0]) {\r\n\r\n\t          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n\t           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n\t           ROUNDING_MODE == 3 ? -0 : 0);\r\n\t        }\r\n\t      }\r\n\r\n\t      xe = bitFloor(xe);\r\n\t      ye = bitFloor(ye);\r\n\t      xc = xc.slice();\r\n\r\n\t      // Determine which is the bigger number.\r\n\t      if (a = xe - ye) {\r\n\r\n\t        if (xLTy = a < 0) {\r\n\t          a = -a;\r\n\t          t = xc;\r\n\t        } else {\r\n\t          ye = xe;\r\n\t          t = yc;\r\n\t        }\r\n\r\n\t        t.reverse();\r\n\r\n\t        // Prepend zeros to equalise exponents.\r\n\t        for (b = a; b--; t.push(0));\r\n\t        t.reverse();\r\n\t      } else {\r\n\r\n\t        // Exponents equal. Check digit by digit.\r\n\t        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n\t        for (a = b = 0; b < j; b++) {\r\n\r\n\t          if (xc[b] != yc[b]) {\r\n\t            xLTy = xc[b] < yc[b];\r\n\t            break;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      // x < y? Point xc to the array of the bigger number.\r\n\t      if (xLTy) {\r\n\t        t = xc;\r\n\t        xc = yc;\r\n\t        yc = t;\r\n\t        y.s = -y.s;\r\n\t      }\r\n\r\n\t      b = (j = yc.length) - (i = xc.length);\r\n\r\n\t      // Append zeros to xc if shorter.\r\n\t      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n\t      if (b > 0) for (; b--; xc[i++] = 0);\r\n\t      b = BASE - 1;\r\n\r\n\t      // Subtract yc from xc.\r\n\t      for (; j > a;) {\r\n\r\n\t        if (xc[--j] < yc[j]) {\r\n\t          for (i = j; i && !xc[--i]; xc[i] = b);\r\n\t          --xc[i];\r\n\t          xc[j] += BASE;\r\n\t        }\r\n\r\n\t        xc[j] -= yc[j];\r\n\t      }\r\n\r\n\t      // Remove leading zeros and adjust exponent accordingly.\r\n\t      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n\t      // Zero?\r\n\t      if (!xc[0]) {\r\n\r\n\t        // Following IEEE 754 (2008) 6.3,\r\n\t        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n\t        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n\t        y.c = [y.e = 0];\r\n\t        return y;\r\n\t      }\r\n\r\n\t      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n\t      // for finite x and y.\r\n\t      return normalise(y, xc, ye);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *   n % 0 =  N\r\n\t     *   n % N =  N\r\n\t     *   n % I =  n\r\n\t     *   0 % n =  0\r\n\t     *  -0 % n = -0\r\n\t     *   0 % 0 =  N\r\n\t     *   0 % N =  N\r\n\t     *   0 % I =  0\r\n\t     *   N % n =  N\r\n\t     *   N % 0 =  N\r\n\t     *   N % N =  N\r\n\t     *   N % I =  N\r\n\t     *   I % n =  N\r\n\t     *   I % 0 =  N\r\n\t     *   I % N =  N\r\n\t     *   I % I =  N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n\t     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n\t     */\r\n\t    P.modulo = P.mod = function (y, b) {\r\n\t      var q, s,\r\n\t        x = this;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\r\n\t      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n\t      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n\t        return new BigNumber(NaN);\r\n\r\n\t      // Return x if y is Infinity or x is zero.\r\n\t      } else if (!y.c || x.c && !x.c[0]) {\r\n\t        return new BigNumber(x);\r\n\t      }\r\n\r\n\t      if (MODULO_MODE == 9) {\r\n\r\n\t        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n\t        // r = x - qy    where  0 <= r < abs(y)\r\n\t        s = y.s;\r\n\t        y.s = 1;\r\n\t        q = div(x, y, 0, 3);\r\n\t        y.s = s;\r\n\t        q.s *= s;\r\n\t      } else {\r\n\t        q = div(x, y, 0, MODULO_MODE);\r\n\t      }\r\n\r\n\t      y = x.minus(q.times(y));\r\n\r\n\t      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n\t      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n\t      return y;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n * 0 = 0\r\n\t     *  n * N = N\r\n\t     *  n * I = I\r\n\t     *  0 * n = 0\r\n\t     *  0 * 0 = 0\r\n\t     *  0 * N = N\r\n\t     *  0 * I = N\r\n\t     *  N * n = N\r\n\t     *  N * 0 = N\r\n\t     *  N * N = N\r\n\t     *  N * I = N\r\n\t     *  I * n = I\r\n\t     *  I * 0 = N\r\n\t     *  I * N = N\r\n\t     *  I * I = I\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n\t     * of BigNumber(y, b).\r\n\t     */\r\n\t    P.multipliedBy = P.times = function (y, b) {\r\n\t      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n\t        base, sqrtBase,\r\n\t        x = this,\r\n\t        xc = x.c,\r\n\t        yc = (y = new BigNumber(y, b)).c;\r\n\r\n\t      // Either NaN, ±Infinity or ±0?\r\n\t      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n\t        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n\t        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n\t          y.c = y.e = y.s = null;\r\n\t        } else {\r\n\t          y.s *= x.s;\r\n\r\n\t          // Return ±Infinity if either is ±Infinity.\r\n\t          if (!xc || !yc) {\r\n\t            y.c = y.e = null;\r\n\r\n\t          // Return ±0 if either is ±0.\r\n\t          } else {\r\n\t            y.c = [0];\r\n\t            y.e = 0;\r\n\t          }\r\n\t        }\r\n\r\n\t        return y;\r\n\t      }\r\n\r\n\t      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n\t      y.s *= x.s;\r\n\t      xcL = xc.length;\r\n\t      ycL = yc.length;\r\n\r\n\t      // Ensure xc points to longer array and xcL to its length.\r\n\t      if (xcL < ycL) {\r\n\t        zc = xc;\r\n\t        xc = yc;\r\n\t        yc = zc;\r\n\t        i = xcL;\r\n\t        xcL = ycL;\r\n\t        ycL = i;\r\n\t      }\r\n\r\n\t      // Initialise the result array with zeros.\r\n\t      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n\t      base = BASE;\r\n\t      sqrtBase = SQRT_BASE;\r\n\r\n\t      for (i = ycL; --i >= 0;) {\r\n\t        c = 0;\r\n\t        ylo = yc[i] % sqrtBase;\r\n\t        yhi = yc[i] / sqrtBase | 0;\r\n\r\n\t        for (k = xcL, j = i + k; j > i;) {\r\n\t          xlo = xc[--k] % sqrtBase;\r\n\t          xhi = xc[k] / sqrtBase | 0;\r\n\t          m = yhi * xlo + xhi * ylo;\r\n\t          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n\t          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n\t          zc[j--] = xlo % base;\r\n\t        }\r\n\r\n\t        zc[j] = c;\r\n\t      }\r\n\r\n\t      if (c) {\r\n\t        ++e;\r\n\t      } else {\r\n\t        zc.splice(0, 1);\r\n\t      }\r\n\r\n\t      return normalise(y, zc, e);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n\t     * i.e. multiplied by -1.\r\n\t     */\r\n\t    P.negated = function () {\r\n\t      var x = new BigNumber(this);\r\n\t      x.s = -x.s || null;\r\n\t      return x;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n + 0 = n\r\n\t     *  n + N = N\r\n\t     *  n + I = I\r\n\t     *  0 + n = n\r\n\t     *  0 + 0 = 0\r\n\t     *  0 + N = N\r\n\t     *  0 + I = I\r\n\t     *  N + n = N\r\n\t     *  N + 0 = N\r\n\t     *  N + N = N\r\n\t     *  N + I = N\r\n\t     *  I + n = I\r\n\t     *  I + 0 = I\r\n\t     *  I + N = N\r\n\t     *  I + I = I\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n\t     * BigNumber(y, b).\r\n\t     */\r\n\t    P.plus = function (y, b) {\r\n\t      var t,\r\n\t        x = this,\r\n\t        a = x.s;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\t      b = y.s;\r\n\r\n\t      // Either NaN?\r\n\t      if (!a || !b) return new BigNumber(NaN);\r\n\r\n\t      // Signs differ?\r\n\t       if (a != b) {\r\n\t        y.s = -b;\r\n\t        return x.minus(y);\r\n\t      }\r\n\r\n\t      var xe = x.e / LOG_BASE,\r\n\t        ye = y.e / LOG_BASE,\r\n\t        xc = x.c,\r\n\t        yc = y.c;\r\n\r\n\t      if (!xe || !ye) {\r\n\r\n\t        // Return ±Infinity if either ±Infinity.\r\n\t        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n\t        // Either zero?\r\n\t        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n\t      }\r\n\r\n\t      xe = bitFloor(xe);\r\n\t      ye = bitFloor(ye);\r\n\t      xc = xc.slice();\r\n\r\n\t      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n\t      if (a = xe - ye) {\r\n\t        if (a > 0) {\r\n\t          ye = xe;\r\n\t          t = yc;\r\n\t        } else {\r\n\t          a = -a;\r\n\t          t = xc;\r\n\t        }\r\n\r\n\t        t.reverse();\r\n\t        for (; a--; t.push(0));\r\n\t        t.reverse();\r\n\t      }\r\n\r\n\t      a = xc.length;\r\n\t      b = yc.length;\r\n\r\n\t      // Point xc to the longer array, and b to the shorter length.\r\n\t      if (a - b < 0) {\r\n\t        t = yc;\r\n\t        yc = xc;\r\n\t        xc = t;\r\n\t        b = a;\r\n\t      }\r\n\r\n\t      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n\t      for (a = 0; b;) {\r\n\t        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n\t        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n\t      }\r\n\r\n\t      if (a) {\r\n\t        xc = [a].concat(xc);\r\n\t        ++ye;\r\n\t      }\r\n\r\n\t      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\t      // ye = MAX_EXP + 1 possible\r\n\t      return normalise(y, xc, ye);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * If sd is undefined or null or true or false, return the number of significant digits of\r\n\t     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n\t     * If sd is true include integer-part trailing zeros in the count.\r\n\t     *\r\n\t     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n\t     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n\t     * ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n\t     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n\t     */\r\n\t    P.precision = P.sd = function (sd, rm) {\r\n\t      var c, n, v,\r\n\t        x = this;\r\n\r\n\t      if (sd != null && sd !== !!sd) {\r\n\t        intCheck(sd, 1, MAX);\r\n\t        if (rm == null) rm = ROUNDING_MODE;\r\n\t        else intCheck(rm, 0, 8);\r\n\r\n\t        return round(new BigNumber(x), sd, rm);\r\n\t      }\r\n\r\n\t      if (!(c = x.c)) return null;\r\n\t      v = c.length - 1;\r\n\t      n = v * LOG_BASE + 1;\r\n\r\n\t      if (v = c[v]) {\r\n\r\n\t        // Subtract the number of trailing zeros of the last element.\r\n\t        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n\t        // Add the number of digits of the first element.\r\n\t        for (v = c[0]; v >= 10; v /= 10, n++);\r\n\t      }\r\n\r\n\t      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n\t      return n;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n\t     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n\t     *\r\n\t     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n\t     */\r\n\t    P.shiftedBy = function (k) {\r\n\t      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n\t      return this.times('1e' + k);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  sqrt(-n) =  N\r\n\t     *  sqrt(N) =  N\r\n\t     *  sqrt(-I) =  N\r\n\t     *  sqrt(I) =  I\r\n\t     *  sqrt(0) =  0\r\n\t     *  sqrt(-0) = -0\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n\t     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     */\r\n\t    P.squareRoot = P.sqrt = function () {\r\n\t      var m, n, r, rep, t,\r\n\t        x = this,\r\n\t        c = x.c,\r\n\t        s = x.s,\r\n\t        e = x.e,\r\n\t        dp = DECIMAL_PLACES + 4,\r\n\t        half = new BigNumber('0.5');\r\n\r\n\t      // Negative/NaN/Infinity/zero?\r\n\t      if (s !== 1 || !c || !c[0]) {\r\n\t        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n\t      }\r\n\r\n\t      // Initial estimate.\r\n\t      s = Math.sqrt(+valueOf(x));\r\n\r\n\t      // Math.sqrt underflow/overflow?\r\n\t      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n\t      if (s == 0 || s == 1 / 0) {\r\n\t        n = coeffToString(c);\r\n\t        if ((n.length + e) % 2 == 0) n += '0';\r\n\t        s = Math.sqrt(+n);\r\n\t        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n\t        if (s == 1 / 0) {\r\n\t          n = '5e' + e;\r\n\t        } else {\r\n\t          n = s.toExponential();\r\n\t          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t        }\r\n\r\n\t        r = new BigNumber(n);\r\n\t      } else {\r\n\t        r = new BigNumber(s + '');\r\n\t      }\r\n\r\n\t      // Check for zero.\r\n\t      // r could be zero if MIN_EXP is changed after the this value was created.\r\n\t      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n\t      // coeffToString to throw.\r\n\t      if (r.c[0]) {\r\n\t        e = r.e;\r\n\t        s = e + dp;\r\n\t        if (s < 3) s = 0;\r\n\r\n\t        // Newton-Raphson iteration.\r\n\t        for (; ;) {\r\n\t          t = r;\r\n\t          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n\t          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n\t            // The exponent of r may here be one less than the final result exponent,\r\n\t            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n\t            // are indexed correctly.\r\n\t            if (r.e < e) --s;\r\n\t            n = n.slice(s - 3, s + 1);\r\n\r\n\t            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n\t            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n\t            // iteration.\r\n\t            if (n == '9999' || !rep && n == '4999') {\r\n\r\n\t              // On the first iteration only, check to see if rounding up gives the\r\n\t              // exact result as the nines may infinitely repeat.\r\n\t              if (!rep) {\r\n\t                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n\t                if (t.times(t).eq(x)) {\r\n\t                  r = t;\r\n\t                  break;\r\n\t                }\r\n\t              }\r\n\r\n\t              dp += 4;\r\n\t              s += 4;\r\n\t              rep = 1;\r\n\t            } else {\r\n\r\n\t              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n\t              // result. If not, then there are further digits and m will be truthy.\r\n\t              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n\t                // Truncate to the first rounding digit.\r\n\t                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n\t                m = !r.times(r).eq(x);\r\n\t              }\r\n\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in exponential notation and\r\n\t     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.toExponential = function (dp, rm) {\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        dp++;\r\n\t      }\r\n\t      return format(this, dp, rm, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n\t     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n\t     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.toFixed = function (dp, rm) {\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        dp = dp + this.e + 1;\r\n\t      }\r\n\t      return format(this, dp, rm);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n\t     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n\t     * of the format or FORMAT object (see BigNumber.set).\r\n\t     *\r\n\t     * The formatting object may contain some or all of the properties shown below.\r\n\t     *\r\n\t     * FORMAT = {\r\n\t     *   prefix: '',\r\n\t     *   groupSize: 3,\r\n\t     *   secondaryGroupSize: 0,\r\n\t     *   groupSeparator: ',',\r\n\t     *   decimalSeparator: '.',\r\n\t     *   fractionGroupSize: 0,\r\n\t     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n\t     *   suffix: ''\r\n\t     * };\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     * [format] {object} Formatting options. See FORMAT pbject above.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     * '[BigNumber Error] Argument not an object: {format}'\r\n\t     */\r\n\t    P.toFormat = function (dp, rm, format) {\r\n\t      var str,\r\n\t        x = this;\r\n\r\n\t      if (format == null) {\r\n\t        if (dp != null && rm && typeof rm == 'object') {\r\n\t          format = rm;\r\n\t          rm = null;\r\n\t        } else if (dp && typeof dp == 'object') {\r\n\t          format = dp;\r\n\t          dp = rm = null;\r\n\t        } else {\r\n\t          format = FORMAT;\r\n\t        }\r\n\t      } else if (typeof format != 'object') {\r\n\t        throw Error\r\n\t          (bignumberError + 'Argument not an object: ' + format);\r\n\t      }\r\n\r\n\t      str = x.toFixed(dp, rm);\r\n\r\n\t      if (x.c) {\r\n\t        var i,\r\n\t          arr = str.split('.'),\r\n\t          g1 = +format.groupSize,\r\n\t          g2 = +format.secondaryGroupSize,\r\n\t          groupSeparator = format.groupSeparator || '',\r\n\t          intPart = arr[0],\r\n\t          fractionPart = arr[1],\r\n\t          isNeg = x.s < 0,\r\n\t          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n\t          len = intDigits.length;\r\n\r\n\t        if (g2) {\r\n\t          i = g1;\r\n\t          g1 = g2;\r\n\t          g2 = i;\r\n\t          len -= i;\r\n\t        }\r\n\r\n\t        if (g1 > 0 && len > 0) {\r\n\t          i = len % g1 || g1;\r\n\t          intPart = intDigits.substr(0, i);\r\n\t          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n\t          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n\t          if (isNeg) intPart = '-' + intPart;\r\n\t        }\r\n\r\n\t        str = fractionPart\r\n\t         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n\t          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n\t           '$&' + (format.fractionGroupSeparator || ''))\r\n\t          : fractionPart)\r\n\t         : intPart;\r\n\t      }\r\n\r\n\t      return (format.prefix || '') + str + (format.suffix || '');\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n\t     * fraction with an integer numerator and an integer denominator.\r\n\t     * The denominator will be a positive non-zero value less than or equal to the specified\r\n\t     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n\t     * the lowest value necessary to represent the number exactly.\r\n\t     *\r\n\t     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n\t     */\r\n\t    P.toFraction = function (md) {\r\n\t      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n\t        x = this,\r\n\t        xc = x.c;\r\n\r\n\t      if (md != null) {\r\n\t        n = new BigNumber(md);\r\n\r\n\t        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n\t        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n\t          throw Error\r\n\t            (bignumberError + 'Argument ' +\r\n\t              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n\t        }\r\n\t      }\r\n\r\n\t      if (!xc) return new BigNumber(x);\r\n\r\n\t      d = new BigNumber(ONE);\r\n\t      n1 = d0 = new BigNumber(ONE);\r\n\t      d1 = n0 = new BigNumber(ONE);\r\n\t      s = coeffToString(xc);\r\n\r\n\t      // Determine initial denominator.\r\n\t      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n\t      e = d.e = s.length - x.e - 1;\r\n\t      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n\t      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n\t      exp = MAX_EXP;\r\n\t      MAX_EXP = 1 / 0;\r\n\t      n = new BigNumber(s);\r\n\r\n\t      // n0 = d1 = 0\r\n\t      n0.c[0] = 0;\r\n\r\n\t      for (; ;)  {\r\n\t        q = div(n, d, 0, 1);\r\n\t        d2 = d0.plus(q.times(d1));\r\n\t        if (d2.comparedTo(md) == 1) break;\r\n\t        d0 = d1;\r\n\t        d1 = d2;\r\n\t        n1 = n0.plus(q.times(d2 = n1));\r\n\t        n0 = d2;\r\n\t        d = n.minus(q.times(d2 = d));\r\n\t        n = d2;\r\n\t      }\r\n\r\n\t      d2 = div(md.minus(d0), d1, 0, 1);\r\n\t      n0 = n0.plus(d2.times(n1));\r\n\t      d0 = d0.plus(d2.times(d1));\r\n\t      n0.s = n1.s = x.s;\r\n\t      e = e * 2;\r\n\r\n\t      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n\t      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n\t          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n\t      MAX_EXP = exp;\r\n\r\n\t      return r;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return the value of this BigNumber converted to a number primitive.\r\n\t     */\r\n\t    P.toNumber = function () {\r\n\t      return +valueOf(this);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n\t     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n\t     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n\t     * exponential notation.\r\n\t     *\r\n\t     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n\t     */\r\n\t    P.toPrecision = function (sd, rm) {\r\n\t      if (sd != null) intCheck(sd, 1, MAX);\r\n\t      return format(this, sd, rm, 2);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n\t     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n\t     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n\t     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n\t     * TO_EXP_NEG, return exponential notation.\r\n\t     *\r\n\t     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n\t     */\r\n\t    P.toString = function (b) {\r\n\t      var str,\r\n\t        n = this,\r\n\t        s = n.s,\r\n\t        e = n.e;\r\n\r\n\t      // Infinity or NaN?\r\n\t      if (e === null) {\r\n\t        if (s) {\r\n\t          str = 'Infinity';\r\n\t          if (s < 0) str = '-' + str;\r\n\t        } else {\r\n\t          str = 'NaN';\r\n\t        }\r\n\t      } else {\r\n\t        if (b == null) {\r\n\t          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t           ? toExponential(coeffToString(n.c), e)\r\n\t           : toFixedPoint(coeffToString(n.c), e, '0');\r\n\t        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n\t          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n\t          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n\t        } else {\r\n\t          intCheck(b, 2, ALPHABET.length, 'Base');\r\n\t          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n\t        }\r\n\r\n\t        if (s < 0 && n.c[0]) str = '-' + str;\r\n\t      }\r\n\r\n\t      return str;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n\t     * negative zero.\r\n\t     */\r\n\t    P.valueOf = P.toJSON = function () {\r\n\t      return valueOf(this);\r\n\t    };\r\n\r\n\r\n\t    P._isBigNumber = true;\r\n\r\n\t    if (configObject != null) BigNumber.set(configObject);\r\n\r\n\t    return BigNumber;\r\n\t  }\r\n\r\n\r\n\t  // PRIVATE HELPER FUNCTIONS\r\n\r\n\t  // These functions don't need access to variables,\r\n\t  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n\t  function bitFloor(n) {\r\n\t    var i = n | 0;\r\n\t    return n > 0 || n === i ? i : i - 1;\r\n\t  }\r\n\r\n\r\n\t  // Return a coefficient array as a string of base 10 digits.\r\n\t  function coeffToString(a) {\r\n\t    var s, z,\r\n\t      i = 1,\r\n\t      j = a.length,\r\n\t      r = a[0] + '';\r\n\r\n\t    for (; i < j;) {\r\n\t      s = a[i++] + '';\r\n\t      z = LOG_BASE - s.length;\r\n\t      for (; z--; s = '0' + s);\r\n\t      r += s;\r\n\t    }\r\n\r\n\t    // Determine trailing zeros.\r\n\t    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n\t    return r.slice(0, j + 1 || 1);\r\n\t  }\r\n\r\n\r\n\t  // Compare the value of BigNumbers x and y.\r\n\t  function compare(x, y) {\r\n\t    var a, b,\r\n\t      xc = x.c,\r\n\t      yc = y.c,\r\n\t      i = x.s,\r\n\t      j = y.s,\r\n\t      k = x.e,\r\n\t      l = y.e;\r\n\r\n\t    // Either NaN?\r\n\t    if (!i || !j) return null;\r\n\r\n\t    a = xc && !xc[0];\r\n\t    b = yc && !yc[0];\r\n\r\n\t    // Either zero?\r\n\t    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n\t    // Signs differ?\r\n\t    if (i != j) return i;\r\n\r\n\t    a = i < 0;\r\n\t    b = k == l;\r\n\r\n\t    // Either Infinity?\r\n\t    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n\t    // Compare exponents.\r\n\t    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n\t    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n\t    // Compare digit by digit.\r\n\t    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n\t    // Compare lengths.\r\n\t    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n\t   */\r\n\t  function intCheck(n, min, max, name) {\r\n\t    if (n < min || n > max || n !== mathfloor(n)) {\r\n\t      throw Error\r\n\t       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n\t         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n\t         : ' not a primitive number: ') + String(n));\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  // Assumes finite n.\r\n\t  function isOdd(n) {\r\n\t    var k = n.c.length - 1;\r\n\t    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n\t  }\r\n\r\n\r\n\t  function toExponential(str, e) {\r\n\t    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n\t     (e < 0 ? 'e' : 'e+') + e;\r\n\t  }\r\n\r\n\r\n\t  function toFixedPoint(str, e, z) {\r\n\t    var len, zs;\r\n\r\n\t    // Negative exponent?\r\n\t    if (e < 0) {\r\n\r\n\t      // Prepend zeros.\r\n\t      for (zs = z + '.'; ++e; zs += z);\r\n\t      str = zs + str;\r\n\r\n\t    // Positive exponent\r\n\t    } else {\r\n\t      len = str.length;\r\n\r\n\t      // Append zeros.\r\n\t      if (++e > len) {\r\n\t        for (zs = z, e -= len; --e; zs += z);\r\n\t        str += zs;\r\n\t      } else if (e < len) {\r\n\t        str = str.slice(0, e) + '.' + str.slice(e);\r\n\t      }\r\n\t    }\r\n\r\n\t    return str;\r\n\t  }\r\n\r\n\r\n\t  // EXPORT\r\n\r\n\r\n\t  BigNumber = clone();\r\n\t  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\t  // AMD.\r\n\t  if (module.exports) {\r\n\t    module.exports = BigNumber;\r\n\r\n\t  // Browser.\r\n\t  } else {\r\n\t    if (!globalObject) {\r\n\t      globalObject = typeof self != 'undefined' && self ? self : window;\r\n\t    }\r\n\r\n\t    globalObject.BigNumber = BigNumber;\r\n\t  }\r\n\t})(commonjsGlobal); \n} (bignumber));\n\nvar bignumberExports = bignumber.exports;\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState$1 = requireGlobalState();\nconst validating = requireValidating();\nconst parsing$1 = parsing$2;\nconst BigNumber$1 = bignumberExports;\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState$1.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing$1.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState$1);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState$1, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState$1, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentTimeDefaultFormat());\n            return formatTime(instance);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState$1);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber$1(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState$1, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nvar formatting = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = bignumberExports;\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nvar manipulating = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.5.0\";\n\nconst globalState = requireGlobalState();\nconst validator = requireValidating();\nconst loader = loading(numbro);\nconst unformatter = requireUnformatting();\nlet formatter = formatting(numbro);\nlet manipulate = manipulating(numbro);\nconst parsing = parsing$2;\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nvar numbro_1 = numbro;\n\nvar numbro$1 = /*@__PURE__*/getDefaultExportFromCjs(numbro_1);\n\nexport { numbro$1 as default };\n","/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getInputAdornmentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_span","_excluded","InputAdornmentRoot","styled","name","overridesResolver","props","styles","ownerState","root","concat","capitalize","position","disablePointerEvents","variant","_ref","theme","_extends","display","height","maxHeight","alignItems","whiteSpace","color","vars","palette","action","active","inputAdornmentClasses","positionStart","hiddenLabel","marginTop","marginRight","marginLeft","pointerEvents","React","inProps","ref","useThemeProps","children","className","component","disableTypography","variantProp","other","_objectWithoutPropertiesLoose","muiFormControl","useFormControl","size","classes","slots","composeClasses","useUtilityClasses","_jsx","FormControlContext","Provider","value","as","clsx","_jsxs","Typography","module","t","e","n","r","i","s","u","a","o","c","f","h","l","$","y","M","weekdays","split","months","ordinal","m","String","length","Array","join","v","z","utcOffset","Math","abs","floor","date","year","month","clone","add","ceil","p","w","D","ms","Q","toLowerCase","replace","g","S","_","O","args","arguments","b","locale","$L","utc","$u","x","$x","$offset","this","parse","prototype","$d","Date","NaN","test","match","substring","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","toString","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","apply","slice","$locale","weekStart","$set","min","daysInMonth","get","Number","round","subtract","format","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","k","forEach","extend","$i","isDayjs","en","Ls","globalScope","ONE","MAX_DIGITS","Decimal","precision","rounding","toExpNeg","toExpPos","LN10","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","mathpow","pow","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","MAX_E","P","carry","len","xd","yd","Ctor","constructor","pr","reverse","push","unshift","pop","checkInt32","max","Error","digitsToString","ws","indexOfLastWord","str","getZeroString","absoluteValue","comparedTo","cmp","j","xdL","ydL","decimalPlaces","dp","dividedBy","div","divide","dividedToIntegerBy","idiv","equals","eq","exponent","getBase10Exponent","greaterThan","gt","greaterThanOrEqualTo","gte","isInteger","isint","isNegative","isneg","isPositive","ispos","isZero","lessThan","lt","lessThanOrEqualTo","lte","logarithm","log","base","wpr","ln","minus","sub","modulo","mod","q","times","naturalExponential","exp","naturalLogarithm","negated","neg","plus","sd","squareRoot","sqrt","toExponential","indexOf","mul","rL","shift","toDecimalPlaces","todp","rm","toFixed","toInteger","toint","toNumber","toPower","sign","yIsInt","yn","truncate","toPrecision","toSignificantDigits","tosd","val","multiplyInteger","temp","compare","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","sum","getLn10","zs","c0","numerator","x2","charAt","parseDecimal","search","charCodeAt","rd","doRound","xdi","xe","xLTy","isExp","arr","config","obj","ps","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","hasOwnProperty","define","array","iteratee","index","result","string","start","end","Symbol","arrayMap","isArray","isSymbol","symbolProto","undefined","symbolToString","baseToString","call","baseSlice","castSlice","hasUnicode","stringToArray","methodName","strSymbols","chr","trailing","reHasUnicode","RegExp","asciiToArray","unicodeToArray","rsAstralRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","baseGetTag","isObjectLike","upperFirst","createCaseFirst","enUS","hasRequiredEnUS","unformatting","hasRequiredUnformatting","validating$1","hasRequiredValidating","commonjsGlobal","globalThis","window","global","self","getDefaultExportFromCjs","__esModule","Object","requireEnUS","languageTag","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","spaceSeparated","number","bytes","binarySuffixes","decimalSuffixes","currency","symbol","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","requireUnformatting","allSuffixes","key","factor","escapeRegExp","computeUnformattedValue","inputString","currencySymbol","zeroFormat","isNaN","stripped","newInput","suffix","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","keys","abbreviationValues","sort","numberOfAbbreviations","unformatValue","removeFormattingSymbols","unformat","globalState","requireGlobalState","currentDelimiters","currentCurrency","currentOrdinal","getZeroFormat","currentAbbreviations","segments","hours","minutes","seconds","matchesTime","unformatTime","requireValidating","unformatter","bcp47RegExp","validFormat","type","validValues","restriction","message","mandatory","characteristic","prefix","postfix","forceAverage","average","lowPrecision","currencyPosition","restrictions","exponential","optionalMantissa","trimMantissa","roundingFunction","optionalCharacteristic","spaceSeparatedAbbreviation","negative","forceSign","prefixSymbol","validLanguage","tag","thousandsSize","defaults","ordinalFormat","byteFormat","percentageFormat","timeDefaults","validateInput","input","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","console","error","data","JSON","stringify","reduce","acc","current","validateFormat","validate","validInput","isFormatValid","validateLanguage","language","globalState$2","hasRequiredGlobalState","parsing$2","parseFormat","parseOutput","parsePostfix","parsePrefix","parseTotalLength","parseCharacteristic","parseOptionalCharacteristic","parseAverage","parseForceAverage","parseMantissa","parseOptionalMantissa","parseTrimMantissa","parseThousandSeparated","parseSpaceSeparated","parseNegative","parseForceSign","validating","parsing","currentLanguageTag","state","languages","globalDefaults","chooseLanguage","currentLanguageData","assign","currentLanguage","currentBytes","currentDefaults","currentOrdinalDefaultFormat","currentByteDefaultFormat","currentPercentageDefaultFormat","currentCurrencyDefaultFormat","currentTimeDefaultFormat","timeFormat","setDefaults","setZeroFormat","hasZeroFormat","languageData","registerLanguage","useLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","numbro","path","commonjsRequire","bignumber","globalObject","BigNumber","isNumeric","mathceil","bignumberError","tooManyDigits","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","xc","yc","intCheck","isOdd","toFixedPoint","configObject","convertBase","parseNumeric","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","ALPHABET","alphabetHasNormalDecimalDigits","alphabet","caseChanged","isNum","_isBigNumber","DEBUG","toUpperCase","id","ne","maxOrMin","normalise","ni","pows10","out","EUCLID","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","random","pow2_53","random53bitInt","rand","Uint32Array","copy","splice","toBaseOut","baseIn","baseOut","arrL","callerIsToString","multiply","xlo","xhi","klo","khi","more","qc","yc0","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","integerValue","isEqualTo","isFinite","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","ye","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","shiftedBy","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","n0","n1","bignumberExports","globalState$1","parsing$1","BigNumber$1","powers","defaultOptions","general","scale","suffixes","marker","binary","instance","providedFormat","clonedFormat","options","space","formatNumber","_value","formatCurrency","formatOrDefault","formatPercentage","localBinarySuffixes","localDecimalSuffixes","baseInfo","getFormatByteUnits","formatByte","formatTime","ordinalFn","formatOrdinal","formatNumbro","insertPrefix","insertPostfix","power","zeroes","toFixedLarge","_ref3","characteristicPrecision","mantissaPrecision","abbreviation","characteristicLength","computeAverage","_ref2","numberString","computeExponential","trim","currentCharacteristic","currentMantissa","hasTrailingZeroes","setMantissaPrecision","hasNegativeSign","missingZeros","setCharacteristicPrecision","thousandSeparator","indexesToInsertThousandDelimiters","counter","indexesOfGroupSpaces","replaceDelimiters","insertAbbreviation","insertSign","defaultFormat","otherValue","isNumbro","validator","loader","loading","formatter","_len","_key","getByteUnit","_len2","_key2","getBinaryByteUnit","_len3","_key3","getDecimalByteUnit","_len4","_key4","formatting","manipulate","difference","manipulating","Numbro","binaryByteUnits","decimalByteUnits","byteUnits","normalizeInput","version","object","defaultCurrencyFormat","numbro$1","fmt","nd","intd","intp","fracp","dsep","gsep","gsize","sgsize","fgsep","fgsize","tfmt","cfmt"],"sourceRoot":""}