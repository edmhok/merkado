{"version":3,"file":"static/js/7933.d376f744.chunk.js","mappings":"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","sources":["store/customization/hooks.ts","views/swap-liquidity-v3/PCMReclaim.tsx","../packages/hooks/src/swap/usePassCode.ts","../packages/hooks/src/swap/usePassCodeManager.ts"],"sourcesContent":["import { useAppDispatch, useAppSelector } from \"store/hooks\";\nimport { useCallback, useMemo } from \"react\";\nimport { updateHideUnavailableClaim } from \"./actions\";\n\nexport function useHideUnavailableClaimManager() {\n  const dispatch = useAppDispatch();\n  const hideUnavailableClaim = useAppSelector((state) => state.customization.hideUnavailableClaim);\n\n  const callback = useCallback(\n    (hide: boolean) => {\n      dispatch(updateHideUnavailableClaim(hide));\n    },\n    [dispatch],\n  );\n\n  return useMemo(\n    () => ({\n      hideUnavailableClaim,\n      updateHideUnavailableClaim: callback,\n    }),\n    [callback, hideUnavailableClaim],\n  );\n}\n","import { useState, useMemo, useEffect } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Typography, Box, Grid, Button, CircularProgress, Avatar } from \"@mui/material\";\nimport { useTheme } from \"@mui/styles\";\nimport { NoData, LoadingRow, Wrapper, Breadcrumbs, SwapTooltip } from \"components/index\";\nimport { parseTokenAmount } from \"@w2e/utils\";\nimport { Trans } from \"@lingui/macro\";\nimport { useTokenInfo } from \"hooks/token/useTokenInfo\";\nimport { TokenInfo } from \"types/token\";\nimport { useTips, MessageTypes } from \"hooks/useTips\";\nimport { useHideUnavailableClaimManager } from \"store/customization/hooks\";\nimport { useUserPCMBalance, usePassCode, usePCMMetadata, destroyPassCode, withdrawPCMBalance } from \"@w2e/hooks\";\nimport { useAccountPrincipal } from \"store/auth/hooks\";\nimport { type PassCode, type PCMMetadata, ResultStatus } from \"@w2e/types\";\n\ntype ClaimedKey = string | number;\n\ninterface BalanceItemProps {\n  border?: boolean;\n  token: TokenInfo;\n  name: string | undefined;\n  type: \"code\" | \"unUsed\";\n  balance: bigint | undefined;\n  updateUnavailableKeys: (key: ClaimedKey) => void;\n  updateClaimedKey: (key: ClaimedKey) => void;\n  claimedKey: ClaimedKey;\n  claimedKeys: ClaimedKey[];\n  metadata: PCMMetadata | undefined | null;\n  code: PassCode | undefined;\n}\n\nexport function BalanceItem({\n  token,\n  balance,\n  name,\n  type,\n  updateUnavailableKeys,\n  updateClaimedKey,\n  claimedKey,\n  claimedKeys,\n  metadata,\n  code,\n}: BalanceItemProps) {\n  const theme = useTheme() as Theme;\n  const { hideUnavailableClaim } = useHideUnavailableClaimManager();\n\n  const [openTip, closeTip] = useTips();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const unavailableClaim = !balance\n    ? false\n    : type === \"code\"\n      ? balance < token.transFee * BigInt(2)\n      : balance < token.transFee;\n\n  const isClaimed = useMemo(() => {\n    return claimedKeys.includes(claimedKey);\n  }, [claimedKeys, claimedKey]);\n\n  useEffect(() => {\n    if (unavailableClaim === true) {\n      updateUnavailableKeys(claimedKey);\n    }\n  }, [unavailableClaim, claimedKey]);\n\n  const handleClaim = async () => {\n    if (loading || unavailableClaim || !metadata) return;\n\n    setLoading(true);\n\n    const loadingKey = openTip(\n      `Reclaim your ${parseTokenAmount(balance, token.decimals).toFormat()} ${token.symbol}`,\n      MessageTypes.loading,\n    );\n\n    const amount = balance;\n\n    if (!!amount && amount !== BigInt(0)) {\n      if (type === \"code\" && !!code) {\n        const result = await destroyPassCode(code.token0.toString(), code.token1.toString(), code.fee);\n\n        if (result.status === ResultStatus.OK) {\n          const result = await withdrawPCMBalance(amount, token.transFee);\n          if (result.status === ResultStatus.OK) {\n            openTip(`Withdrew ${name} successfully`, MessageTypes.success);\n            updateClaimedKey(claimedKey);\n          } else {\n            openTip(`Failed to Withdraw ${name}: ${result.message}`, MessageTypes.error);\n          }\n        } else {\n          openTip(`Failed to Withdraw: ${result.message ?? \"\"}`, MessageTypes.error);\n        }\n      } else {\n        const result = await withdrawPCMBalance(amount, token.transFee);\n\n        if (result.status === ResultStatus.OK) {\n          openTip(`Withdrew ${name} successfully`, MessageTypes.success);\n          updateClaimedKey(claimedKey);\n        } else {\n          openTip(result.message ? result.message : `Failed to Withdraw ${name}`, MessageTypes.error);\n        }\n      }\n    }\n\n    closeTip(loadingKey);\n\n    setLoading(false);\n  };\n\n  return (\n    <Grid\n      container\n      alignItems=\"center\"\n      sx={{\n        padding: \"24px\",\n        borderRadius: \"12px\",\n        background: theme.palette.background.level1,\n        margin: \"16px 0 0 0\",\n        ...((hideUnavailableClaim && unavailableClaim) || isClaimed ? { display: \"none\" } : {}),\n        \"@media(max-width: 640px)\": {\n          padding: \"12px\",\n        },\n      }}\n    >\n      <Avatar\n        src={token.logo}\n        sx={{\n          width: \"32px\",\n          height: \"32px\",\n          margin: \"0 12px 0 0\",\n          \"@media(max-width: 640px)\": {\n            width: \"24px\",\n            height: \"24px\",\n          },\n        }}\n      >\n        &nbsp;\n      </Avatar>\n\n      <Box sx={{ display: \"flex\", flex: 1, alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <Box>\n          <Typography\n            color=\"text.primary\"\n            sx={{\n              fontSize: \"24px\",\n              fontWeight: 600,\n              \"@media(max-width: 640px)\": {\n                fontSize: \"16px\",\n              },\n            }}\n          >\n            {parseTokenAmount(balance, token.decimals).toFormat()} {token.symbol}\n          </Typography>\n          {/* <Typography sx={{ margin: \"4px 0 0 0\" }}>{name}</Typography> */}\n        </Box>\n\n        <Box sx={{ display: \"flex\", alignItems: \"center\", gap: \"0 10px\" }}>\n          {unavailableClaim ? (\n            <SwapTooltip tips=\"Claim amount is below the transaction fee, making it unclaimable.\" iconSize=\"24px\" />\n          ) : null}\n\n          <Button\n            variant=\"contained\"\n            fullWidth\n            size=\"medium\"\n            disabled={loading || unavailableClaim}\n            onClick={handleClaim}\n            startIcon={loading ? <CircularProgress size={24} color=\"inherit\" /> : null}\n          >\n            <Trans>Reclaim</Trans>\n          </Button>\n        </Box>\n      </Box>\n    </Grid>\n  );\n}\n\ninterface BalancesItemProps {\n  balance?: bigint;\n  code?: PassCode;\n  updateUnavailableKeys: (key: ClaimedKey) => void;\n  updateClaimedKey: (key: ClaimedKey) => void;\n  claimedKey: ClaimedKey;\n  claimedKeys: ClaimedKey[];\n  metadata: PCMMetadata | undefined | null;\n}\n\nexport function BalancesItem({\n  balance,\n  updateUnavailableKeys,\n  updateClaimedKey,\n  claimedKey,\n  claimedKeys,\n  code,\n  metadata,\n}: BalancesItemProps) {\n  const { result: token } = useTokenInfo(metadata?.tokenCid.toString());\n\n  const name = token ? `${token.symbol}` : \"--\";\n\n  return token ? (\n    <BalanceItem\n      claimedKey={claimedKey}\n      token={token}\n      name={name}\n      balance={code ? metadata?.passcodePrice : balance}\n      type={code ? \"code\" : \"unUsed\"}\n      updateUnavailableKeys={updateUnavailableKeys}\n      updateClaimedKey={updateClaimedKey}\n      claimedKeys={claimedKeys}\n      metadata={metadata}\n      code={code}\n    />\n  ) : null;\n}\n\nexport default function PCMBalanceReclaim() {\n  const [unavailableClaimKeys, setUnavailableClaimKeys] = useState<ClaimedKey[]>([]);\n  const [claimedKeys, setClaimedKeys] = useState<ClaimedKey[]>([]);\n\n  const handleUpdateUnavailableKeys = (key: ClaimedKey) => {\n    setUnavailableClaimKeys((prevState) => [...new Set([...prevState, key])]);\n  };\n\n  const handleUpdateClaimedKey = (index: ClaimedKey) => {\n    setClaimedKeys((prevState) => [...prevState, index]);\n  };\n\n  const unavailableClaimNumbers = useMemo(() => {\n    return unavailableClaimKeys.length;\n  }, [unavailableClaimKeys]);\n\n  const principal = useAccountPrincipal();\n\n  const { result: unusedBalance, loading: unUsedLoading } = useUserPCMBalance(principal);\n  const { result: passCodes, loading: passLoading } = usePassCode(principal?.toString());\n  const { result: pcmMetadata, loading: metadataLoading } = usePCMMetadata();\n\n  const totalClaimedNumbers = useMemo(() => {\n    return (passCodes?.length ?? 0) + (unusedBalance ? 1 : 0);\n  }, [unusedBalance, passCodes]);\n\n  const no_data = useMemo(() => {\n    if (totalClaimedNumbers === 0) return true;\n    if (unavailableClaimNumbers === 0) return claimedKeys.length === totalClaimedNumbers;\n    return unavailableClaimNumbers + claimedKeys.length === totalClaimedNumbers;\n  }, [claimedKeys, unavailableClaimNumbers, totalClaimedNumbers]);\n\n  const loading = useMemo(() => {\n    return metadataLoading || passLoading || unUsedLoading;\n  }, [unUsedLoading, passLoading, metadataLoading]);\n\n  const total_unused = useMemo(() => {\n    if (!passCodes || !pcmMetadata || unusedBalance === undefined || unusedBalance === null) return undefined;\n    return BigInt(passCodes.length) * pcmMetadata.passcodePrice + unusedBalance;\n  }, [passCodes, pcmMetadata, unusedBalance]);\n\n  return (\n    <Wrapper>\n      <Box sx={{ margin: \"10px 0 0 0\" }}>\n        <Breadcrumbs\n          prevLink=\"/swap\"\n          prevLabel={<Trans>Swap</Trans>}\n          currentLabel={<Trans>Withdraw unused swap pool creation fees</Trans>}\n        />\n      </Box>\n\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", margin: \"40px 0 0 0\" }}>\n        <Box sx={{ width: \"800px\" }}>\n          <Typography sx={{ fontSize: \"24px\", fontWeight: 500 }} color=\"text.primary\">\n            <Trans>Withdraw unused swap pool creation fees</Trans>\n          </Typography>\n\n          <Typography sx={{ margin: \"10px 0 0 0\" }}>\n            <Trans>\n              Creating a Swap pool requires a payment of 1 ICP as a Swap pool creation fee. If after payment, the Swap\n              pool is not created, users can withdraw the unused Swap pool creation fee.\n            </Trans>\n          </Typography>\n\n          <Typography sx={{ fontSize: \"16px\", fontWeight: 500, margin: \"20px 0 0 0\" }} color=\"text.primary\">\n            <Trans>\n              Total unused swap pool creation fees:{\" \"}\n              {total_unused !== undefined ? parseTokenAmount(total_unused, 8).toFormat() : \"--\"}&nbsp;ICP\n            </Trans>\n          </Typography>\n\n          <Box sx={{ margin: \"20px 0 0 0\" }}>\n            {loading ? (\n              <LoadingRow>\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n                <div />\n              </LoadingRow>\n            ) : no_data ? (\n              <NoData />\n            ) : (\n              <Box\n                sx={{\n                  overflow: \"auto\",\n                  margin: \"-16px 0 0 0\",\n                }}\n              >\n                {unusedBalance ? (\n                  <BalancesItem\n                    key=\"unusedBalance\"\n                    balance={unusedBalance}\n                    claimedKey=\"unusedBalance\"\n                    updateUnavailableKeys={handleUpdateUnavailableKeys}\n                    updateClaimedKey={handleUpdateClaimedKey}\n                    claimedKeys={claimedKeys}\n                    metadata={pcmMetadata}\n                  />\n                ) : null}\n\n                {passCodes?.map((code, index) => (\n                  <BalancesItem\n                    key={index}\n                    code={code}\n                    claimedKey={index}\n                    updateUnavailableKeys={handleUpdateUnavailableKeys}\n                    updateClaimedKey={handleUpdateClaimedKey}\n                    claimedKeys={claimedKeys}\n                    metadata={pcmMetadata}\n                  />\n                ))}\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </Wrapper>\n  );\n}\n","import { useCallback } from \"react\";\nimport { useCallsData } from \"../useCallData\";\nimport { swapFactory } from \"@w2e/actor\";\nimport { resultFormat } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport type { PassCode } from \"@w2e/candid\";\n\nexport async function getPassCode(principal: string) {\n  return resultFormat<PassCode[]>(await (await swapFactory()).getPasscodesByPrincipal(Principal.fromText(principal)))\n    .data;\n}\n\nexport function usePassCode(principal: string | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!principal) return undefined;\n      return getPassCode(principal);\n    }, [principal]),\n    reload,\n  );\n}\n","import { useCallback } from \"react\";\nimport { passCodeManager } from \"@w2e/actor\";\nimport { resultFormat } from \"@w2e/utils\";\nimport { Principal } from \"@dfinity/principal\";\nimport { useCallsData } from \"../useCallData\";\n\nexport function usePCMMetadata() {\n  return useCallsData(\n    useCallback(async () => {\n      return resultFormat<{\n        passcodePrice: bigint;\n        tokenCid: Principal;\n        factoryCid: Principal;\n      }>(await (await passCodeManager()).metadata()).data;\n    }, []),\n  );\n}\n\nexport async function requestPassCode(token0: Principal, token1: Principal, fee: bigint) {\n  const result = await (await passCodeManager(true)).requestPasscode(token0, token1, fee);\n\n  return resultFormat<string>(result);\n}\n\nexport async function withdrawPCMBalance(amount: bigint, fee: bigint) {\n  const result = await (await passCodeManager(true)).withdraw({ fee, amount });\n  return resultFormat<bigint>(result);\n}\n\nexport async function destroyPassCode(token0: string, token1: string, fee: bigint) {\n  const result = await (\n    await passCodeManager(true)\n  ).destoryPasscode(Principal.fromText(token0), Principal.fromText(token1), fee);\n\n  return resultFormat<string>(result);\n}\n\nexport function useUserPCMBalance(principal: Principal | undefined, reload?: boolean) {\n  return useCallsData(\n    useCallback(async () => {\n      if (!principal) return undefined;\n\n      return resultFormat<bigint>(await (await passCodeManager()).balanceOf(principal)).data;\n    }, [principal]),\n    reload,\n  );\n}\n"],"names":["useHideUnavailableClaimManager","dispatch","useAppDispatch","hideUnavailableClaim","useAppSelector","state","customization","callback","useCallback","hide","updateHideUnavailableClaim","useMemo","BalanceItem","_ref","token","balance","name","type","updateUnavailableKeys","updateClaimedKey","claimedKey","claimedKeys","metadata","code","theme","useTheme","openTip","closeTip","useTips","loading","setLoading","useState","unavailableClaim","transFee","BigInt","isClaimed","includes","useEffect","_jsxs","Grid","container","alignItems","sx","padding","borderRadius","background","palette","level1","margin","display","children","_jsx","Avatar","src","logo","width","height","Box","flex","justifyContent","Typography","color","fontSize","fontWeight","parseTokenAmount","decimals","toFormat","symbol","gap","SwapTooltip","tips","iconSize","Button","variant","fullWidth","size","disabled","onClick","async","loadingKey","concat","MessageTypes","amount","result","destroyPassCode","token0","toString","token1","fee","status","ResultStatus","OK","withdrawPCMBalance","success","message","error","_result$message","startIcon","CircularProgress","Trans","id","BalancesItem","_ref2","useTokenInfo","tokenCid","passcodePrice","PCMBalanceReclaim","unavailableClaimKeys","setUnavailableClaimKeys","setClaimedKeys","handleUpdateUnavailableKeys","key","prevState","Set","handleUpdateClaimedKey","index","unavailableClaimNumbers","length","principal","useAccountPrincipal","unusedBalance","unUsedLoading","useUserPCMBalance","passCodes","passLoading","usePassCode","pcmMetadata","metadataLoading","usePCMMetadata","totalClaimedNumbers","_passCodes$length","no_data","total_unused","undefined","Wrapper","Breadcrumbs","prevLink","prevLabel","currentLabel","values","0","LoadingRow","NoData","overflow","map","fulfilled","value","step","generator","next","e","reject","rejected","throw","done","resolve","then","apply","thisArg","_arguments","getPassCode","__awaiter","resultFormat","swapFactory","getPasscodesByPrincipal","Principal","fromText","data","reload","useCallsData","passCodeManager","requestPassCode","requestPasscode","withdraw","destoryPasscode","balanceOf"],"sourceRoot":""}